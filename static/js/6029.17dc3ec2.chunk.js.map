{"version":3,"file":"static/js/6029.17dc3ec2.chunk.js","mappings":"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","sources":["../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/ignoreAttributes.js","../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"],"sourcesContent":["const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n\nmodule.exports = toNumber;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;"],"names":["hexRegex","numRegex","consider","hex","leadingZeros","decimalPoint","eNotation","module","exports","str","options","arguments","length","undefined","Object","assign","trimmedStr","trim","skipLike","test","numStr","base","parseInt","Number","window","Error","parse_int","search","notation","match","exec","sign","numTrimmedByZeros","indexOf","replace","substr","trimZeros","num","util","require","xmlNode","readDocType","toNumber","getIgnoreAttributesFn","addExternalEntities","externalEntities","entKeys","keys","i","ent","this","lastEntities","regex","RegExp","val","parseTextData","tagName","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","trimValues","replaceEntitiesValue","newval","tagValueProcessor","parseValue","parseTagValue","numberParseOptions","resolveNameSpace","tagname","removeNSPrefix","tags","split","prefix","charAt","attrsRegx","buildAttributesMap","attrStr","ignoreAttributes","matches","getAllMatches","len","attrs","attrName","ignoreAttributesFn","oldVal","aName","attributeNamePrefix","transformAttributeName","newVal","attributeValueProcessor","parseAttributeValue","allowBooleanAttributes","attributesGroupName","attrCollection","parseXml","xmlData","xmlObj","currentNode","textData","closeIndex","findClosingIndex","substring","colonIndex","transformTagName","saveTextToParentTag","lastTagName","lastIndexOf","unpairedTags","propIndex","tagsNodeStack","pop","tagData","readTagExp","ignoreDeclaration","ignorePiTags","childNode","add","textNodeName","tagExp","attrExpPresent","addChild","endIndex","commentPropName","comment","result","docTypeEntities","entities","cdataPropName","rawTagName","lastTag","isItStopNode","stopNodes","tagContent","readStopNodeData","push","child","updateTag","processEntities","entityName","entity","regx","htmlEntities","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","attrBoundary","closingChar","index","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","startIndex","openTagCount","shouldParse","isExist","constructor","_","String","fromCharCode","Array","isArray","pattern","validator","XMLParser","XMLBuilder","XMLValidator","defaultOptions","isWhiteSpace","char","readPI","start","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","tagFound","reachedRoot","err","tagStartPos","closingTag","isName","msg","readAttributeStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","openPos","col","afterAmp","validateAmpersand","JSON","stringify","map","t","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","readEntityExp","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","name","hasBody","exp","arrToStr","arr","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","indentBy","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","obj","key","attrMap","attr","attrVal","suppressBooleanAttributes","textValue","jArray","format","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","alwaysCreateTextNode","jpath","atrrName","propCount","prettify","node","buildFromOrderedJs","a","preserveOrder","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","ajPath","j2x","concat","buildTextValNode","buildObjectNode","repeat","startsWith","prototype","build","jObj","arrayNodeName","join","call","Date","buildAttrPairStr","arrLen","listTagVal","listTagAttr","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","buildOptions","OrderedObjParser","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","nameStartChar","nameRegexp","regexName","v","isEmptyObject","merge","target","arrayMode","getValue","string","allmatches","lastIndex"],"sourceRoot":""}