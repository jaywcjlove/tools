{"version":3,"file":"static/js/3245.f39f9832.chunk.js","mappings":"2PA0Ce,SAASA,EAAWC,GACjC,OAA0BC,EAAAA,EAAAA,YAAkB,eAArCC,EAAK,KAAEC,EAAQ,KACtB,GAA0BF,EAAAA,EAAAA,YAAkB,eAArCG,EAAK,KAAEC,EAAQ,KACtB,GAAwBJ,EAAAA,EAAAA,YAAkB,eAAnCK,EAAI,KAAEC,EAAO,KAYpB,OAXAC,EAAAA,EAAAA,YAAU,WACR,IACE,IAAMC,EAAOC,IAAAA,MAAWR,GAAS,IACjCG,EAAS,IACTE,EAAQI,KAAKC,UAAUH,EAAM,KAAM,GAKrC,CAJE,MAAOI,GACHA,aAAeC,OACjBT,EAASQ,EAAIE,QAEjB,CACF,GAAG,CAACb,KAEFc,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAM,OACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,CACNhB,IAASiB,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACtB,MAAOA,KAC7BiB,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,QAAS,kBAAMvB,EAzDpB,mkBAyDqC,EAAAe,SAAAA,cAE3CA,UAEDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CACTC,OAAO,qBACPC,WAAY,CAACC,EAAAA,GAAAA,OAAsBrB,EAAAA,OACnCP,MAAOA,EACP6B,SAAWC,SAAAA,GAAG,OAAK7B,EAAS6B,EAAG,OAGnCb,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACC,MAAO,cAAeC,MAAOhB,IAAQa,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACtB,MAAOI,IAASY,UAC7EC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CAACC,OAAO,qBAAqBC,WAAY,EAACI,EAAAA,EAAAA,SAAaC,UAAQ,EAAChC,MAAOI,MAEnFF,IAASe,EAAAA,EAAAA,KAACgB,EAAAA,GAAW,CAAAjB,SAAEd,MAG9B,C","sources":["../../packages/toml-to-json/src/index.tsx"],"sourcesContent":["import { useState, Fragment, useEffect } from 'react';\nimport { Wrapper, ErrorLayout, StyledLayout, CopyButton, Button, CodeEditor } from '@wcj/tools-react-components';\nimport TOML from 'toml';\nimport { json as jsonLang } from '@codemirror/lang-json';\nimport { StreamLanguage } from '@codemirror/language';\nimport { toml } from '@codemirror/legacy-modes/mode/toml';\n\nconst sample = `# This is a TOML document.\n\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00 # First class dates\n\n[database]\nserver = \"192.168.1.1\"\nports = [ 8000, 8001, 8002 ]\nconnection_max = 5000\nenabled = true\n\n[servers]\n\n  # Indentation (tabs and/or spaces) is allowed but not required\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"eqdc10\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ]\n\n# Line breaks are OK when inside arrays\nhosts = [\n  \"alpha\",\n  \"omega\"\n]`;\n\nexport interface TOMLToJSONProps {}\nexport default function TOMLToJSON(props: TOMLToJSONProps) {\n  const [value, setValue] = useState<string>();\n  const [error, setError] = useState<string>();\n  const [json, setJson] = useState<string>();\n  useEffect(() => {\n    try {\n      const toml = TOML.parse(value || '');\n      setError('');\n      setJson(JSON.stringify(toml, null, 2));\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n  }, [value]);\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"TOML\"\n        extra={\n          <Fragment>\n            {value && <CopyButton value={value} />}\n            <Button onClick={() => setValue(sample)}>Sample</Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          height=\"calc(100vh - 87px)\"\n          extensions={[StreamLanguage.define(toml)]}\n          value={value}\n          onChange={(val) => setValue(val)}\n        />\n      </StyledLayout>\n      <StyledLayout title={'Result JSON'} extra={json && <CopyButton value={json} />}>\n        <CodeEditor height=\"calc(100vh - 87px)\" extensions={[jsonLang()]} readOnly value={json} />\n      </StyledLayout>\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n"],"names":["TOMLToJSON","props","useState","value","setValue","error","setError","json","setJson","useEffect","toml","TOML","JSON","stringify","err","Error","message","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","CodeEditor","height","extensions","StreamLanguage","onChange","val","jsonLang","readOnly","ErrorLayout"],"sourceRoot":""}