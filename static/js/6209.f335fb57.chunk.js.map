{"version":3,"file":"static/js/6209.f335fb57.chunk.js","mappings":"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","sources":["../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-definitions/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/unist-util-generated/lib/index.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["content","tokenize","effects","previous","contentStart","attempt","this","parser","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","token","contentType","next","data","markdownLineEnding","document","childFlow","childToken","lineStartOffset","self","stack","continued","start","length","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","point","indexBeforeExits","events","indexBeforeFlow","type","end","exitContainers","index","Object","assign","splice","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","subtokenize","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","charCodeAt","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","result","value","String","fromCharCode","join","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","concat","_toConsumableArray","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","destinationEnclosedBefore","asciiControl","destinationRaw","destinationEnclosed","destinationEnclosedEscape","markdownLineEndingOrSpace","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","titleConstruct","defined","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","toLowerCase","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","test","numeric","asciiHexDigit","decodeNamedCharacterReference","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","asciiAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","search","own","hasOwnProperty","fromMarkdown","encoding","options","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","children","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","node","errorHandler","onExitError","Error","stringifyPosition","toString","parseInt","lang","replace","url","depth","referenceType","ancestor","decodeString","fragment","alt","decodeNumericCharacterReference","ordered","spread","checked","compiler","postprocess","arguments","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","extension","_combined$key","right","apply","_combined$key2","left","_this","Parser","doc","settings","normalizeUri","skip","encodeURIComponent","clean","toUpperCase","footnoteReference","counter","id","safeId","footnoteOrder","indexOf","footnoteCounts","reuseCounter","properties","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","head","listItemLoose","tab","space","trimLines","source","last","lines","trimLine","codePointAt","handlers","blockquote","wrap","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","parent","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","pointStart","pointEnd","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","_objectSpread","cache","visit","definitions","one","augment","hName","hProperties","hChildren","ctx","props","to","defaultUnknownHandler","values","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","_tail$children","tailTail","dataFootnotes","JSON","stringify","footer","destination","file","run","error","bridge","mutate"],"sourceRoot":""}