{"version":3,"file":"static/js/5081.239f24bd.chunk.js","mappings":"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","sources":["../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/strnum/strnum.js","../../node_modules/@lezer/json/dist/index.es.js","../../node_modules/@codemirror/lang-json/dist/index.js","../../node_modules/@lezer/xml/dist/index.es.js","../../node_modules/@codemirror/lang-xml/dist/index.js"],"sourcesContent":["'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: []\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"amp\" : { regex: /&(amp|#38|#x26);/g, val : \"&\"},\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n       \n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName) {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","import { LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\nconst jsonHighlighting = styleTags({\n  String: tags.string,\n  Number: tags.number,\n  \"True False\": tags.bool,\n  PropertyName: tags.propertyName,\n  Null: tags.null,\n  \",\": tags.separator,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j\",\n  stateData: \"#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O\",\n  goto: \"!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R\",\n  nodeNames: \"⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array\",\n  maxTerm: 25,\n  nodeProps: [\n    [\"openedBy\", 7,\"{\",12,\"[\"],\n    [\"closedBy\", 8,\"}\",13,\"]\"]\n  ],\n  propSources: [jsonHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 2,\n  tokenData: \"(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~\",\n  tokenizers: [0],\n  topRules: {\"JsonText\":[0,1]},\n  tokenPrec: 0\n});\n\nexport { parser };\n","import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Object: /*@__PURE__*/continuedIndent({ except: /^\\s*\\}/ }),\n                Array: /*@__PURE__*/continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Object Array\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n","import { ContextTracker, ExternalTokenizer, LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst StartTag = 1,\n  StartCloseTag = 2,\n  MissingCloseTag = 3,\n  mismatchedStartCloseTag = 4,\n  incompleteStartCloseTag = 5,\n  commentContent$1 = 35,\n  piContent$1 = 36,\n  cdataContent$1 = 37,\n  Element = 11,\n  OpenTag = 13;\n\n/* Hand-written tokenizer for XML tag matching. */\n\nfunction nameChar(ch) {\n  return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161\n}\n\nfunction isSpace(ch) {\n  return ch == 9 || ch == 10 || ch == 13 || ch == 32\n}\n\nlet cachedName = null, cachedInput = null, cachedPos = 0;\nfunction tagNameAfter(input, offset) {\n  let pos = input.pos + offset;\n  if (cachedInput == input && cachedPos == pos) return cachedName\n  while (isSpace(input.peek(offset))) offset++;\n  let name = \"\";\n  for (;;) {\n    let next = input.peek(offset);\n    if (!nameChar(next)) break\n    name += String.fromCharCode(next);\n    offset++;\n  }\n  cachedInput = input; cachedPos = pos;\n  return cachedName = name || null\n}\n\nfunction ElementContext(name, parent) {\n  this.name = name;\n  this.parent = parent;\n  this.hash = parent ? parent.hash : 0;\n  for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);\n}\n\nconst elementContext = new ContextTracker({\n  start: null,\n  shift(context, term, stack, input) {\n    return term == StartTag ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  reduce(context, term) {\n    return term == Element && context ? context.parent : context\n  },\n  reuse(context, node, _stack, input) {\n    let type = node.type.id;\n    return type == StartTag || type == OpenTag\n      ? new ElementContext(tagNameAfter(input, 1) || \"\", context) : context\n  },\n  hash(context) { return context ? context.hash : 0 },\n  strict: false\n});\n\nconst startTag = new ExternalTokenizer((input, stack) => {\n  if (input.next != 60 /* '<' */) return\n  input.advance();\n  if (input.next == 47 /* '/' */) {\n    input.advance();\n    let name = tagNameAfter(input, 0);\n    if (!name) return input.acceptToken(incompleteStartCloseTag)\n    if (stack.context && name == stack.context.name) return input.acceptToken(StartCloseTag)\n    for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return input.acceptToken(MissingCloseTag, -2)\n    input.acceptToken(mismatchedStartCloseTag);\n  } else if (input.next != 33 /* '!' */ && input.next != 63 /* '?' */) {\n    return input.acceptToken(StartTag)\n  }\n}, {contextual: true});\n\nfunction scanTo(type, end) {\n  return new ExternalTokenizer(input => {\n    for (let endPos = 0, len = 0;; len++) {\n      if (input.next < 0) {\n        if (len) input.acceptToken(type);\n        break\n      } \n      if (input.next == end.charCodeAt(endPos)) {\n        endPos++;\n        if (endPos == end.length) {\n          if (len > end.length) input.acceptToken(type, 1 - end.length);\n          break\n        }\n      } else {\n        endPos = input.next == end.charCodeAt(0) ? 1 : 0;\n      }\n      input.advance();\n    }\n  })\n}\n\nconst commentContent = scanTo(commentContent$1, \"-->\");\nconst piContent = scanTo(piContent$1, \"?>\");\nconst cdataContent = scanTo(cdataContent$1, \"]]>\");\n\nconst xmlHighlighting = styleTags({\n  Text: tags.content,\n  \"StartTag StartCloseTag EndTag SelfCloseEndTag\": tags.angleBracket,\n  TagName: tags.tagName,\n  \"MismatchedCloseTag/Tagname\": [tags.tagName, tags.invalid],\n  AttributeName: tags.attributeName,\n  AttributeValue: tags.attributeValue,\n  Is: tags.definitionOperator,\n  \"EntityReference CharacterReference\": tags.character,\n  Comment: tags.blockComment,\n  ProcessingInst: tags.processingInstruction,\n  DoctypeDecl: tags.documentMeta,\n  Cdata: tags.special(tags.string)\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t\",\n  stateData: \")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O\",\n  goto: \"%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb\",\n  nodeNames: \"⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl\",\n  maxTerm: 47,\n  context: elementContext,\n  nodeProps: [\n    [\"closedBy\", 1,\"SelfCloseEndTag EndTag\",13,\"CloseTag MissingCloseTag\"],\n    [\"openedBy\", 12,\"StartTag StartCloseTag\",19,\"OpenTag\",20,\"StartTag\"]\n  ],\n  propSources: [xmlHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 8,\n  tokenData: \"Az~R!WOX$kXY%rYZ%rZ]$k]^%r^p$kpq%rqr$krs&tsv$kvw'Uw}$k}!O(q!O!P$k!P!Q*n!Q![$k![!]+z!]!^$k!^!_/s!_!`=i!`!a>U!a!b>q!b!c$k!c!}+z!}#P$k#P#Q?}#Q#R$k#R#S+z#S#T$k#T#o+z#o%W$k%W%o+z%o%p$k%p&a+z&a&b$k&b1p+z1p4U$k4U4d+z4d4e$k4e$IS+z$IS$I`$k$I`$Ib+z$Ib$Kh$k$Kh%#t+z%#t&/x$k&/x&Et+z&Et&FV$k&FV;'S+z;'S;:j/S;:j?&r$k?&r?Ah+z?Ah?BY$k?BY?Mn+z?Mn~$kX$rUVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$kP%ZRVPOv%Uw!^%U!_~%UW%iR{WOr%dsv%dw~%d_%{]VP{WyUOX$kXY%rYZ%rZ]$k]^%r^p$kpq%rqr$krs%Usv$kw!^$k!^!_%d!_~$kZ&{RzYVPOv%Uw!^%U!_~%U~'XTOp'hqs'hst(Pt!]'h!^~'h~'kTOp'hqs'ht!]'h!]!^'z!^~'h~(POW~~(SROp(]q!](]!^~(]~(`SOp(]q!](]!]!^(l!^~(]~(qOX~Z(xWVP{WOr$krs%Usv$kw}$k}!O)b!O!^$k!^!_%d!_~$kZ)iWVP{WOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a*R!a~$kZ*[U|QVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$k]*uWVP{WOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a+_!a~$k]+hUdSVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$k_,V}`S^QVP{WOr$krs%Usv$kw}$k}!O+z!O!P+z!P!Q$k!Q![+z![!]+z!]!^$k!^!_%d!_!c$k!c!}+z!}#R$k#R#S+z#S#T$k#T#o+z#o$}$k$}%O+z%O%W$k%W%o+z%o%p$k%p&a+z&a&b$k&b1p+z1p4U+z4U4d+z4d4e$k4e$IS+z$IS$I`$k$I`$Ib+z$Ib$Je$k$Je$Jg+z$Jg$Kh$k$Kh%#t+z%#t&/x$k&/x&Et+z&Et&FV$k&FV;'S+z;'S;:j/S;:j?&r$k?&r?Ah+z?Ah?BY$k?BY?Mn+z?Mn~$k_/ZWVP{WOr$krs%Usv$kw!^$k!^!_%d!_;=`$k;=`<%l+z<%l~$kX/xU{WOq%dqr0[sv%dw!a%d!a!b=X!b~%dX0aZ{WOr%dsv%dw}%d}!O1S!O!f%d!f!g1x!g!}%d!}#O5s#O#W%d#W#X:k#X~%dX1XT{WOr%dsv%dw}%d}!O1h!O~%dX1oR}P{WOr%dsv%dw~%dX1}T{WOr%dsv%dw!q%d!q!r2^!r~%dX2cT{WOr%dsv%dw!e%d!e!f2r!f~%dX2wT{WOr%dsv%dw!v%d!v!w3W!w~%dX3]T{WOr%dsv%dw!{%d!{!|3l!|~%dX3qT{WOr%dsv%dw!r%d!r!s4Q!s~%dX4VT{WOr%dsv%dw!g%d!g!h4f!h~%dX4kV{WOr4frs5Qsv4fvw5Qw!`4f!`!a5c!a~4fP5TRO!`5Q!`!a5^!a~5QP5cOiPX5jRiP{WOr%dsv%dw~%dX5xV{WOr%dsv%dw!e%d!e!f6_!f#V%d#V#W8w#W~%dX6dT{WOr%dsv%dw!f%d!f!g6s!g~%dX6xT{WOr%dsv%dw!c%d!c!d7X!d~%dX7^T{WOr%dsv%dw!v%d!v!w7m!w~%dX7rT{WOr%dsv%dw!c%d!c!d8R!d~%dX8WT{WOr%dsv%dw!}%d!}#O8g#O~%dX8nR{WxPOr%dsv%dw~%dX8|T{WOr%dsv%dw#W%d#W#X9]#X~%dX9bT{WOr%dsv%dw#T%d#T#U9q#U~%dX9vT{WOr%dsv%dw#h%d#h#i:V#i~%dX:[T{WOr%dsv%dw#T%d#T#U8R#U~%dX:pT{WOr%dsv%dw#c%d#c#d;P#d~%dX;UT{WOr%dsv%dw#V%d#V#W;e#W~%dX;jT{WOr%dsv%dw#h%d#h#i;y#i~%dX<OT{WOr%dsv%dw#m%d#m#n<_#n~%dX<dT{WOr%dsv%dw#d%d#d#e<s#e~%dX<xT{WOr%dsv%dw#X%d#X#Y4f#Y~%dX=`R!PP{WOr%dsv%dw~%dZ=rUaQVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$k_>_U[UVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$kZ>xWVP{WOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!a?b!a~$kZ?kU!OQVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$kZ@UWVP{WOr$krs%Usv$kw!^$k!^!_%d!_#P$k#P#Q@n#Q~$kZ@uWVP{WOr$krs%Usv$kw!^$k!^!_%d!_!`$k!`!aA_!a~$kZAhUwQVP{WOr$krs%Usv$kw!^$k!^!_%d!_~$k\",\n  tokenizers: [startTag, commentContent, piContent, cdataContent, 0, 1, 2, 3],\n  topRules: {\"Document\":[0,6]},\n  tokenPrec: 0\n});\n\nexport { parser };\n","import { parser } from '@lezer/xml';\nimport { syntaxTree, LRLanguage, indentNodeProp, foldNodeProp, LanguageSupport } from '@codemirror/language';\n\nfunction tagName(doc, tag) {\n    let name = tag && tag.getChild(\"TagName\");\n    return name ? doc.sliceString(name.from, name.to) : \"\";\n}\nfunction elementName(doc, tree) {\n    let tag = tree && tree.firstChild;\n    return !tag || tag.name != \"OpenTag\" ? \"\" : tagName(doc, tag);\n}\nfunction attrName(doc, tag, pos) {\n    let attr = tag && tag.getChildren(\"Attribute\").find(a => a.from <= pos && a.to >= pos);\n    let name = attr && attr.getChild(\"AttributeName\");\n    return name ? doc.sliceString(name.from, name.to) : \"\";\n}\nfunction findParentElement(tree) {\n    for (let cur = tree && tree.parent; cur; cur = cur.parent)\n        if (cur.name == \"Element\")\n            return cur;\n    return null;\n}\nfunction findLocation(state, pos) {\n    var _a;\n    let at = syntaxTree(state).resolveInner(pos, -1), inTag = null;\n    for (let cur = at; !inTag && cur.parent; cur = cur.parent)\n        if (cur.name == \"OpenTag\" || cur.name == \"CloseTag\" || cur.name == \"SelfClosingTag\" || cur.name == \"MismatchedCloseTag\")\n            inTag = cur;\n    if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {\n        let elt = inTag.parent;\n        if (at.name == \"TagName\")\n            return inTag.name == \"CloseTag\" || inTag.name == \"MismatchedCloseTag\"\n                ? { type: \"closeTag\", from: at.from, context: elt }\n                : { type: \"openTag\", from: at.from, context: findParentElement(elt) };\n        if (at.name == \"AttributeName\")\n            return { type: \"attrName\", from: at.from, context: inTag };\n        if (at.name == \"AttributeValue\")\n            return { type: \"attrValue\", from: at.from, context: inTag };\n        let before = at == inTag || at.name == \"Attribute\" ? at.childBefore(pos) : at;\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"StartTag\")\n            return { type: \"openTag\", from: pos, context: findParentElement(elt) };\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"StartCloseTag\" && before.to <= pos)\n            return { type: \"closeTag\", from: pos, context: elt };\n        if ((before === null || before === void 0 ? void 0 : before.name) == \"Is\")\n            return { type: \"attrValue\", from: pos, context: inTag };\n        if (before)\n            return { type: \"attrName\", from: pos, context: inTag };\n        return null;\n    }\n    else if (at.name == \"StartCloseTag\") {\n        return { type: \"closeTag\", from: pos, context: at.parent };\n    }\n    while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))\n        at = at.parent;\n    if (at.name == \"Element\" || at.name == \"Text\" || at.name == \"Document\")\n        return { type: \"tag\", from: pos, context: at.name == \"Element\" ? at : findParentElement(at) };\n    return null;\n}\nclass Element {\n    constructor(spec, attrs, attrValues) {\n        this.attrs = attrs;\n        this.attrValues = attrValues;\n        this.children = [];\n        this.name = spec.name;\n        this.completion = Object.assign(Object.assign({ type: \"type\" }, spec.completion || {}), { label: this.name });\n        this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: \"<\" + this.name });\n        this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: \"</\" + this.name + \">\", boost: 2 });\n        this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + \">\" });\n        this.text = spec.textContent ? spec.textContent.map(s => ({ label: s, type: \"text\" })) : [];\n    }\n}\nconst Identifier = /^[:\\-\\.\\w\\u00b7-\\uffff]*$/;\nfunction attrCompletion(spec) {\n    return Object.assign(Object.assign({ type: \"property\" }, spec.completion || {}), { label: spec.name });\n}\nfunction valueCompletion(spec) {\n    return typeof spec == \"string\" ? { label: `\"${spec}\"`, type: \"constant\" }\n        : /^\"/.test(spec.label) ? spec\n            : Object.assign(Object.assign({}, spec), { label: `\"${spec.label}\"` });\n}\n/**\nCreate a completion source for the given schema.\n*/\nfunction completeFromSchema(eltSpecs, attrSpecs) {\n    let allAttrs = [], globalAttrs = [];\n    let attrValues = Object.create(null);\n    for (let s of attrSpecs) {\n        let completion = attrCompletion(s);\n        allAttrs.push(completion);\n        if (s.global)\n            globalAttrs.push(completion);\n        if (s.values)\n            attrValues[s.name] = s.values.map(valueCompletion);\n    }\n    let allElements = [], topElements = [];\n    let byName = Object.create(null);\n    for (let s of eltSpecs) {\n        let attrs = globalAttrs, attrVals = attrValues;\n        if (s.attributes)\n            attrs = attrs.concat(s.attributes.map(s => {\n                if (typeof s == \"string\")\n                    return allAttrs.find(a => a.label == s) || { label: s, type: \"property\" };\n                if (s.values) {\n                    if (attrVals == attrValues)\n                        attrVals = Object.create(attrVals);\n                    attrVals[s.name] = s.values.map(valueCompletion);\n                }\n                return attrCompletion(s);\n            }));\n        let elt = new Element(s, attrs, attrVals);\n        byName[elt.name] = elt;\n        allElements.push(elt);\n        if (s.top)\n            topElements.push(elt);\n    }\n    if (!topElements.length)\n        topElements = allElements;\n    for (let i = 0; i < allElements.length; i++) {\n        let s = eltSpecs[i], elt = allElements[i];\n        if (s.children) {\n            for (let ch of s.children)\n                if (byName[ch])\n                    elt.children.push(byName[ch]);\n        }\n        else {\n            elt.children = allElements;\n        }\n    }\n    return cx => {\n        var _a;\n        let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);\n        if (!loc || (loc.type == \"tag\" && !cx.explicit))\n            return null;\n        let { type, from, context } = loc;\n        if (type == \"openTag\") {\n            let children = topElements;\n            let parentName = elementName(doc, context);\n            if (parentName) {\n                let parent = byName[parentName];\n                children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;\n            }\n            return {\n                from,\n                options: children.map(ch => ch.completion),\n                validFor: Identifier\n            };\n        }\n        else if (type == \"closeTag\") {\n            let parentName = elementName(doc, context);\n            return parentName ? {\n                from,\n                to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == \">\" ? 1 : 0),\n                options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + \">\", type: \"type\" }],\n                validFor: Identifier\n            } : null;\n        }\n        else if (type == \"attrName\") {\n            let parent = byName[tagName(doc, context)];\n            return {\n                from,\n                options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,\n                validFor: Identifier\n            };\n        }\n        else if (type == \"attrValue\") {\n            let attr = attrName(doc, context, from);\n            if (!attr)\n                return null;\n            let parent = byName[tagName(doc, context)];\n            let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];\n            if (!values || !values.length)\n                return null;\n            return {\n                from,\n                to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '\"' ? 1 : 0),\n                options: values,\n                validFor: /^\"[^\"]*\"?$/\n            };\n        }\n        else if (type == \"tag\") {\n            let parentName = elementName(doc, context), parent = byName[parentName];\n            let closing = [], last = context && context.lastChild;\n            if (parentName && (!last || last.name != \"CloseTag\" || tagName(doc, last) != parentName))\n                closing.push(parent ? parent.closeCompletion : { label: \"</\" + parentName + \">\", type: \"type\", boost: 2 });\n            let options = closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion));\n            if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {\n                let openTag = context.firstChild;\n                if (openTag.to > cx.pos - 20 && !/\\S/.test(cx.state.sliceDoc(openTag.to, cx.pos)))\n                    options = options.concat(parent.text);\n            }\n            return {\n                from,\n                options,\n                validFor: /^<\\/?[:\\-\\.\\w\\u00b7-\\uffff]*$/\n            };\n        }\n        else {\n            return null;\n        }\n    };\n}\n\n/**\nA language provider based on the [Lezer XML\nparser](https://github.com/lezer-parser/xml), extended with\nhighlighting and indentation information.\n*/\nconst xmlLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Element(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"OpenTag CloseTag SelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                Element(subtree) {\n                    let first = subtree.firstChild, last = subtree.lastChild;\n                    if (!first || first.name != \"OpenTag\")\n                        return null;\n                    return { from: first.to, to: last.name == \"CloseTag\" ? last.from : subtree.to };\n                }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"<!--\", close: \"-->\" } },\n        indentOnInput: /^\\s*<\\/$/\n    }\n});\n/**\nXML language support. Includes schema-based autocompletion when\nconfigured.\n*/\nfunction xml(conf = {}) {\n    return new LanguageSupport(xmlLanguage, xmlLanguage.data.of({\n        autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])\n    }));\n}\n\nexport { completeFromSchema, xml, xmlLanguage };\n"],"names":["validator","require","XMLParser","XMLBuilder","module","exports","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","Builder","this","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","replaceEntitiesValue","buildAttrPairStr","object","level","j2x","tagEndExp","piClosingChar","textValue","entity","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","Date","attr","newval","arrLen","j","item","Ks","L","arrToStr","arr","jPath","xmlStr","indentation","tagObj","propName","newJPath","attStr","attr_to_str","tagStart","tagValue","tempInd","piTextNodeName","tagText","isStopNode","attrMap","attrVal","lastIndexOf","jArray","entityRegex","parseEntityExp","exp","regx","Error","hasBody","comment","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","buildOptions","xmlNode","readDocType","toNumber","OrderedObjParser","currentNode","tagsNodeStack","docTypeEntities","lastEntities","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","readStopNodeData","saveTextToParentTag","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","prefix","charAt","attrsRegx","attrs","oldVal","aName","newVal","attrCollection","xmlObj","textData","closeIndex","findClosingIndex","colonIndex","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","lastTag","tagContent","child","entityName","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","attrBoundary","closingChar","ch","data","str","errMsg","closingIndex","separatorIndex","search","openTagCount","shouldParse","prettify","validationOption","toString","orderedObjParser","orderedResult","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","XmlNode","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","eNotation","trimZeros","numStr","trimmedStr","skipLike","test","sign","numTrimmedByZeros","num","jsonHighlighting","styleTags","String","PropertyName","Null","parser","LRParser","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","propSources","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","tokenPrec","jsonLanguage","LRLanguage","configure","props","indentNodeProp","continuedIndent","except","foldNodeProp","foldInside","languageData","closeBrackets","brackets","indentOnInput","json","LanguageSupport","nameChar","cachedName","cachedInput","cachedPos","tagNameAfter","input","offset","pos","peek","next","fromCharCode","ElementContext","parent","hash","charCodeAt","elementContext","ContextTracker","shift","context","term","stack","reduce","reuse","_stack","type","id","strict","startTag","ExternalTokenizer","advance","acceptToken","cx","contextual","scanTo","end","endPos","commentContent","piContent","cdataContent","xmlHighlighting","Text","TagName","AttributeName","AttributeValue","Is","Comment","ProcessingInst","DoctypeDecl","Cdata","doc","tag","getChild","sliceString","from","to","elementName","tree","firstChild","findParentElement","cur","Element","spec","attrValues","children","completion","label","openCompletion","closeCompletion","boost","closeNameCompletion","textContent","s","Identifier","attrCompletion","valueCompletion","completeFromSchema","eltSpecs","attrSpecs","allAttrs","globalAttrs","create","global","values","allElements","topElements","byName","attrVals","attributes","concat","find","elt","top","_a","state","loc","at","syntaxTree","resolveInner","inTag","lastChild","isError","before","childBefore","findLocation","explicit","parentName","validFor","getChildren","closing","last","e","openTag","sliceDoc","xmlLanguage","closed","textAfter","lineIndent","unit","column","subtree","first","commentTokens","block","open","close","xml","conf","of","autocomplete","elements"],"sourceRoot":""}