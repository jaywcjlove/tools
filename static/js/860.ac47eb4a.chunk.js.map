{"version":3,"file":"static/js/860.ac47eb4a.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/markdown/dist/index.js","../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n        return tree;\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// @internal\n        this.dontInject = new Set;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        let withoutGaps = taken, end = this.absoluteLineStart + taken;\n        for (let i = 1; i < this.ranges.length; i++) {\n            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;\n            if (gapFrom >= this.lineStart && gapTo < end)\n                withoutGaps -= gapTo - gapFrom;\n        }\n        this.lineStart += withoutGaps;\n        this.absoluteLineStart += taken;\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dont) {\n    if (dont.has(tree.tree))\n        return tree.tree;\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node;\n        if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dont);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]]\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            cx.dontInject.add(cur.tree);\n            cx.addNode(cur.tree, cur.from - off);\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, Prec } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, LanguageSupport } from '@codemirror/language';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ block: { open: \"<!--\", close: \"-->\" } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);\n                }\n                insert += state.lineBreak;\n                return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? context[i + 1].from - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = state.lineBreak + insert;\n        changes.push({ from, to: pos, insert });\n        return { range: EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    return new LanguageSupport(mkLang(parser.configure(extensions)), support);\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","type","value","from","hash","end","children","positions","_classCallCheck","this","hashProp","NodeProp","_createClass","key","child","pos","prop","Tree","length","push","nodeSet","_this","arguments","undefined","last","Math","max","types","balance","makeTree","NodeType","parentHash","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forwardInner","newPos","skipSpace","countIndent","charCodeAt","pop","to","findColumn","elt","i","goal","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","_DefaultSkipMarkup","_defineProperty","Blockquote","QuoteMark","lineStart","moveBase","space","ListItem","_cx","moveBaseColumn","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","IndentedCode","base","pendingMarks","nextLine","_step","_iterator","_createForOfIteratorHelper","s","n","done","m","err","f","_step2","_iterator2","_step3","_iterator3","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","_step4","_iterator4","_step5","_iterator5","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","_step6","_iterator6","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","scrub","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","_toConsumableArray","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","dontInject","Set","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","create","FragmentCursor","readLine","get","finishContext","_step7","_iterator7","mark","reuseFragment","_step8","_iterator8","blockParsers","forward","_step9","_iterator9","leafBlockParsers","parse","lines","_step10","_iterator10","endLeafBlock","stop","_step11","_iterator11","_step12","_iterator12","finishLeaf","RangeError","moveTo","matches","taken","takeNodes","withoutGaps","gapFrom","gapTo","moveRangeI","r","lineChunkAt","textOffset","nextFrom","_this$scanLine","scanLine","reset","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","getNodeType","none","addChild","toTree","injectMarks","top","addGaps","tree","injectGaps","topNode","_step13","_iterator13","inline","Paragraph","TreeElement","Buffer","offset","dont","has","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","propValues","MarkdownParser","_Parser","_inherits","_super","_createSuper","blockNames","inlineParsers","inlineNames","wrappers","_this2","call","nodeTypes","Object","_step14","_iterator14","t","name","id","_step15","_iterator15","w","spec","_nodeSet","config","resolveConfig","nonEmpty","defineNodes","assign","styles","_step16","_iterator16","_loop","_ref","composite","style","some","group","props","Array","isArray","Tag","NodeSet","extend","styleTags","apply","remove","_step17","_iterator17","rm","parseBlock","_step18","_iterator18","found","before","findName","splice","endLeaf","_step19","_iterator19","wrap","InlineContext","outer","_step20","char","_iterator20","token","resolveMarkers","Parser","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","_step21","_iterator21","writeTo","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","open","close","emp","closeSize","k","element","startIndex","elements","_step22","eI","_iterator22","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","add","is","markdownHighlighting","tags","keys","map","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","addDelimiter","parseRow","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","TaskParser","GFM","parentType","parseSubSuper","addElement","Superscript","Subscript","Emoji","match","data","defineLanguageFacet","headingProp","commonmark","configure","foldNodeProp","isHeading","state","doc","lineAt","indentNodeProp","languageDataProp","findSectionEnd","headerNode","level","heading","headerIndent","foldService","syntaxTree","resolveInner","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","maxWidth","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","insertNewlineContinueMarkup","dispatch","changeByRange","range","empty","isActiveAt","emptyLine","delTo","marker","EditorSelection","blank","lineBreak","prevLine","quoted","index","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","_ref2","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","_config$addKeymap","addKeymap","_config$base","defaultCode","extensions","support","LanguageSupport","language","languages","defaultLanguage","codeParser","info","LanguageDescription","ParseContext","load","htmlParser","parseMixed","overlay","infoNode","getChild","parseCode","Prec","keymap"],"sourceRoot":""}