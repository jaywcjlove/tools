{"version":3,"file":"static/js/7772.6453d050.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, cur;\n        for (;;) {\n            cur = input.pos;\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(cur + 1, input.token);\n        }\n        if (cur > start) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, cur - start);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"names":["Recover","Stack","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","arguments","length","undefined","parent","_classCallCheck","this","_createClass","key","value","concat","filter","_","i","get","context","start","push","action","_a","depth","type","parser","dPrec","dynamicPrecedence","pushState","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","next","nextEnd","nextState","maxNode","shiftContext","reduce","shift","reused","updateContext","tracker","reuse","stream","reset","off","slice","isNode","sim","SimulatedStack","stateSlot","hasAction","nextStates","s","best","_loop","some","v","result","split","validAction","target","forceReduce","data","other","dialectID","dialect","flags","last","hash","newCx","StackContext","emitContext","emitLookAhead","strict","cx","goto","StackBufferCursor","maybeNext","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","offset","assoc","_step","_iterator","_createForOfIteratorHelper","n","done","Math","max","err","e","f","idx","resolved","resolveOffset","endOffset","RangeError","nextChunk","getChunk","setDone","read","_step2","_iterator2","r","min","TokenGroup","id","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","advance","acceptToken","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","Safety","verbose","process","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","Rec","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","setLookAhead","eofTerm","clipPos","specialized","specializers","set","putAction","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","stopped","stoppedTokens","newStacks","_slicedToArray","advanceStack","tok","getMainToken","finished","_step7","_iterator7","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","forceAll","maxRemaining","sort","a","b","outer","j","sameState","splice","stackID","strictCx","cxHash","cached","nodeAt","match","useNode","inner","defaultReduce","getActions","localStack","apply","pushStackDedup","restarted","tokenEnd","deadEnd","restart","advanceFully","force","forceBase","_step3","_iterator3","recoverByInsert","insert","recoverByDelete","close","create","topID","maxBufferLength","minRepeatType","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","_Parser","_inherits","_super","_createSuper","_this$nodeSet","_this","call","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","_step4","_iterator4","propSpec","NodeSet","name","NodeType","props","indexOf","error","skipped","skippedNodes","propSources","_toConsumableArray","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","_step5","parse","_iterator5","w","loose","table","groupTag","terminal","slot","flag","_this2","_loop2","_i8","config","_this$nodeSet2","copy","assign","info","t","found","find","external","contextTracker","wrap","prec","values","_step6","_iterator6","part","Uint8Array","Parser"],"sourceRoot":""}