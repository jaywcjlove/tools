{"version":3,"file":"static/js/7772.6453d050.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, cur;\n        for (;;) {\n            cur = input.pos;\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(cur + 1, input.token);\n        }\n        if (cur > start) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, cur - start);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"names":["Recover","Stack","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","filter","_","i","concat","context","start","push","length","action","_a","depth","type","parser","dPrec","dynamicPrecedence","pushState","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","next","nextEnd","nextState","maxNode","shiftContext","reduce","shift","value","reused","updateContext","tracker","reuse","stream","reset","off","slice","isNode","sim","SimulatedStack","stateSlot","hasAction","nextStates","s","best","some","v","result","split","validAction","target","forceReduce","data","other","dialectID","dialect","flags","last","hash","newCx","StackContext","emitContext","emitLookAhead","strict","cx","goto","StackBufferCursor","maybeNext","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","offset","assoc","Math","max","idx","resolved","resolveOffset","endOffset","RangeError","nextChunk","getChunk","n","setDone","read","r","min","TokenGroup","id","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","advance","acceptToken","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","Safety","verbose","process","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","Rec","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","setLookAhead","eofTerm","clipPos","specialized","specializers","set","putAction","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","stopped","stoppedTokens","newStacks","advanceStack","tok","getMainToken","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","forceAll","maxRemaining","sort","a","b","outer","j","sameState","splice","stackID","strictCx","cxHash","cached","nodeAt","match","useNode","inner","defaultReduce","getActions","localStack","apply","pushStackDedup","restarted","tokenEnd","deadEnd","restart","advanceFully","force","forceBase","recoverByInsert","insert","recoverByDelete","close","create","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","parse","w","loose","table","groupTag","terminal","slot","flag","config","copy","assign","info","t","found","find","external","contextTracker","wrap","prec","values","part","Uint8Array","Parser"],"sourceRoot":""}