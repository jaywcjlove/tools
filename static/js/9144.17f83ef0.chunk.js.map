{"version":3,"file":"static/js/9144.17f83ef0.chunk.js","mappings":"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","sources":["../../node_modules/stringify-entities/lib/core.js","../../node_modules/character-entities-html4/index.js","../../node_modules/stringify-entities/lib/constant/dangerous.js","../../node_modules/stringify-entities/lib/util/to-named.js","../../node_modules/stringify-entities/lib/util/format-smart.js","../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","../../node_modules/stringify-entities/lib/util/to-decimal.js","../../node_modules/stringify-entities/lib/index.js","../../node_modules/hast-util-to-html/lib/omission/util/siblings.js","../../node_modules/hast-util-to-html/lib/omission/omission.js","../../node_modules/hast-util-to-html/lib/omission/closing.js","../../node_modules/hast-util-to-html/lib/omission/opening.js","../../node_modules/hast-util-to-html/lib/handle/element.js","../../node_modules/hast-util-to-html/lib/handle/text.js","../../node_modules/hast-util-to-html/lib/handle/index.js","../../node_modules/hast-util-to-html/lib/handle/comment.js","../../node_modules/hast-util-to-html/lib/handle/doctype.js","../../node_modules/hast-util-to-html/lib/handle/raw.js","../../node_modules/hast-util-to-html/lib/handle/root.js","../../node_modules/hast-util-to-html/lib/index.js","../../node_modules/rehype-stringify/lib/index.js"],"sourcesContent":["/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @typedef {import('../../types.js').Parent} Parent\n * @typedef {import('../../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @param {Parent | null | undefined} parent\n   * @param {number | null | undefined} index\n   * @param {boolean | null | undefined} [includeWhitespace=false]\n   * @returns {Content}\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : []\n    let offset = (index || 0) + increment\n    let next = siblings && siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    return next\n  }\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  html,\n  head: headOrColgroupOrCaption,\n  body,\n  p,\n  li,\n  dt,\n  dd,\n  rt: rubyElement,\n  rp: rubyElement,\n  optgroup,\n  option,\n  menuitem,\n  colgroup: headOrColgroupOrCaption,\n  caption: headOrColgroupOrCaption,\n  thead,\n  tbody,\n  tfoot,\n  tr,\n  td: cells,\n  th: cells\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\n// eslint-disable-next-line complexity\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</menuitem>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction menuitem(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'menuitem' ||\n        next.tagName === 'hr' ||\n        next.tagName === 'menu'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array<string>} */\n  const seen = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'col'\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'tr'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {opening} from '../omission/opening.js'\nimport {closing} from '../omission/closing.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: constants.unquoted[x][y],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @typedef {import('../types.js').Comment} Comment\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').DocType} DocType\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {DocType} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @typedef {import('../types.js').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {handle} from './handle/index.js'\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nexport function toHtml(tree, options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>}\n */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n"],"names":["core","value","options","replace","subset","groups","index","length","push","RegExp","join","charactersToExpression","basic","escapeOnly","pair","all","format","charCodeAt","character","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","dangerous","own","hasOwnProperty","characters","key","call","formatSmart","code","next","named","numeric","omit","toString","toUpperCase","test","String","fromCharCode","toHexadecimal","omitOptionalSemicolons","useNamedReferences","useShortestReferences","attribute","name","characterEntitiesLegacy","includes","toNamed","decimal","toDecimal","stringifyEntities","Object","assign","siblingAfter","siblings","siblingBefore","increment","parent","includeWhitespace","children","offset","whitespace","omission","handlers","node","tagName","closing","html","_","type","head","headOrColgroupOrCaption","body","p","li","dt","dd","rt","rubyElement","rp","optgroup","option","menuitem","colgroup","caption","thead","tbody","tfoot","tr","td","cells","th","charAt","opening","seen","child","previous","indexOf","constants","split","unquoted","single","double","serializeAttribute","state","info","find","schema","x","settings","allowParseErrors","space","y","allowDangerousCharacters","result","quote","overloadedBoolean","boolean","Boolean","undefined","Number","isNaN","characterReferences","Array","isArray","commaSeparated","commas","spaces","padLeft","tightCommaSeparatedLists","collapseEmptyAttributes","preferUnquoted","quoteSmart","ccount","alternative","text","handle","zwitch","invalid","Error","unknown","comment","_1","_2","bogusComments","$0","doctype","_3","upperDoctype","tightDoctype","element","omitOptionalTags","selfClosing","closeEmptyElements","voids","toLowerCase","parts","last","svg","attrs","props","values","tightAttributes","serializeAttributes","properties","content","closeSelfClosing","tightSelfClosing","raw","allowDangerousHtml","root","one","this","results","rehypeStringify","config","processorSettings","data","Compiler","tree","options_","htmlVoidElements","entities","toHtml"],"sourceRoot":""}