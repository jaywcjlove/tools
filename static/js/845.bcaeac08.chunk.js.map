{"version":3,"file":"static/js/845.bcaeac08.chunk.js","mappings":"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","sources":["../../node_modules/rehype-parse/lib/errors.js","../../node_modules/rehype-parse/lib/index.js","../../src/generator.js","../../src/all.js","../../src/common.js"],"sourcesContent":["export const errors = {\n  abandonedHeadElementChild: {\n    reason: 'Unexpected metadata element after head',\n    description:\n      'Unexpected element after head. Expected the element before `</head>`',\n    url: false\n  },\n  abruptClosingOfEmptyComment: {\n    reason: 'Unexpected abruptly closed empty comment',\n    description: 'Unexpected `>` or `->`. Expected `-->` to close comments'\n  },\n  abruptDoctypePublicIdentifier: {\n    reason: 'Unexpected abruptly closed public identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the public identifier'\n  },\n  abruptDoctypeSystemIdentifier: {\n    reason: 'Unexpected abruptly closed system identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the identifier identifier'\n  },\n  absenceOfDigitsInNumericCharacterReference: {\n    reason: 'Unexpected non-digit at start of numeric character reference',\n    description:\n      'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'\n  },\n  cdataInHtmlContent: {\n    reason: 'Unexpected CDATA section in HTML',\n    description:\n      'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'\n  },\n  characterReferenceOutsideUnicodeRange: {\n    reason: 'Unexpected too big numeric character reference',\n    description:\n      'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'\n  },\n  closingOfElementWithOpenChildElements: {\n    reason: 'Unexpected closing tag with open child elements',\n    description:\n      'Unexpectedly closing tag. Expected other tags to be closed first',\n    url: false\n  },\n  controlCharacterInInputStream: {\n    reason: 'Unexpected control character',\n    description:\n      'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  controlCharacterReference: {\n    reason: 'Unexpected control character reference',\n    description:\n      'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  disallowedContentInNoscriptInHead: {\n    reason: 'Disallowed content inside `<noscript>` in `<head>`',\n    description:\n      'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',\n    url: false\n  },\n  duplicateAttribute: {\n    reason: 'Unexpected duplicate attribute',\n    description:\n      'Unexpectedly double attribute. Expected attributes to occur only once'\n  },\n  endTagWithAttributes: {\n    reason: 'Unexpected attribute on closing tag',\n    description: 'Unexpected attribute. Expected `>` instead'\n  },\n  endTagWithTrailingSolidus: {\n    reason: 'Unexpected slash at end of closing tag',\n    description: 'Unexpected `%c-1`. Expected `>` instead'\n  },\n  endTagWithoutMatchingOpenElement: {\n    reason: 'Unexpected unopened end tag',\n    description: 'Unexpected end tag. Expected no end tag or another end tag',\n    url: false\n  },\n  eofBeforeTagName: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected tag name instead'\n  },\n  eofInCdata: {\n    reason: 'Unexpected end of file in CDATA',\n    description: 'Unexpected end of file. Expected `]]>` to close the CDATA'\n  },\n  eofInComment: {\n    reason: 'Unexpected end of file in comment',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInDoctype: {\n    reason: 'Unexpected end of file in doctype',\n    description:\n      'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'\n  },\n  eofInElementThatCanContainOnlyText: {\n    reason: 'Unexpected end of file in element that can only contain text',\n    description: 'Unexpected end of file. Expected text or a closing tag',\n    url: false\n  },\n  eofInScriptHtmlCommentLikeText: {\n    reason: 'Unexpected end of file in comment inside script',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInTag: {\n    reason: 'Unexpected end of file in tag',\n    description: 'Unexpected end of file. Expected `>` to close the tag'\n  },\n  incorrectlyClosedComment: {\n    reason: 'Incorrectly closed comment',\n    description: 'Unexpected `%c-1`. Expected `-->` to close the comment'\n  },\n  incorrectlyOpenedComment: {\n    reason: 'Incorrectly opened comment',\n    description: 'Unexpected `%c`. Expected `<!--` to open the comment'\n  },\n  invalidCharacterSequenceAfterDoctypeName: {\n    reason: 'Invalid sequence after doctype name',\n    description: 'Unexpected sequence at `%c`. Expected `public` or `system`'\n  },\n  invalidFirstCharacterOfTagName: {\n    reason: 'Invalid first character in tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  misplacedDoctype: {\n    reason: 'Misplaced doctype',\n    description: 'Unexpected doctype. Expected doctype before head',\n    url: false\n  },\n  misplacedStartTagForHeadElement: {\n    reason: 'Misplaced `<head>` start tag',\n    description:\n      'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',\n    url: false\n  },\n  missingAttributeValue: {\n    reason: 'Missing attribute value',\n    description:\n      'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'\n  },\n  missingDoctype: {\n    reason: 'Missing doctype before other content',\n    description: 'Expected a `<!doctype html>` before anything else',\n    url: false\n  },\n  missingDoctypeName: {\n    reason: 'Missing doctype name',\n    description: 'Unexpected doctype end at `%c`. Expected `html` instead'\n  },\n  missingDoctypePublicIdentifier: {\n    reason: 'Missing public identifier in doctype',\n    description: 'Unexpected `%c`. Expected identifier for `public` instead'\n  },\n  missingDoctypeSystemIdentifier: {\n    reason: 'Missing system identifier in doctype',\n    description:\n      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `\"about:legacy-compat\"`)'\n  },\n  missingEndTagName: {\n    reason: 'Missing name in end tag',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  missingQuoteBeforeDoctypePublicIdentifier: {\n    reason: 'Missing quote before public identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingQuoteBeforeDoctypeSystemIdentifier: {\n    reason: 'Missing quote before system identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingSemicolonAfterCharacterReference: {\n    reason: 'Missing semicolon after character reference',\n    description: 'Unexpected `%c`. Expected `;` instead'\n  },\n  missingWhitespaceAfterDoctypePublicKeyword: {\n    reason: 'Missing whitespace after public identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceAfterDoctypeSystemKeyword: {\n    reason: 'Missing whitespace after system identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBeforeDoctypeName: {\n    reason: 'Missing whitespace before doctype name',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenAttributes: {\n    reason: 'Missing whitespace between attributes',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {\n    reason:\n      'Missing whitespace between public and system identifiers in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  nestedComment: {\n    reason: 'Unexpected nested comment',\n    description: 'Unexpected `<!--`. Expected `-->`'\n  },\n  nestedNoscriptInHead: {\n    reason: 'Unexpected nested `<noscript>` in `<head>`',\n    description:\n      'Unexpected `<noscript>`. Expected a closing tag or a meta element',\n    url: false\n  },\n  nonConformingDoctype: {\n    reason: 'Unexpected non-conforming doctype declaration',\n    description:\n      'Expected `<!doctype html>` or `<!doctype html system \"about:legacy-compat\">`',\n    url: false\n  },\n  nonVoidHtmlElementStartTagWithTrailingSolidus: {\n    reason: 'Unexpected trailing slash on start tag of non-void element',\n    description: 'Unexpected `/`. Expected `>` instead'\n  },\n  noncharacterCharacterReference: {\n    reason:\n      'Unexpected noncharacter code point referenced by character reference',\n    description: 'Unexpected code point. Do not use noncharacters in HTML'\n  },\n  noncharacterInInputStream: {\n    reason: 'Unexpected noncharacter character',\n    description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'\n  },\n  nullCharacterReference: {\n    reason: 'Unexpected NULL character referenced by character reference',\n    description: 'Unexpected code point. Do not use NULL characters in HTML'\n  },\n  openElementsLeftAfterEof: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected closing tag instead',\n    url: false\n  },\n  surrogateCharacterReference: {\n    reason: 'Unexpected surrogate character referenced by character reference',\n    description:\n      'Unexpected code point. Do not use lone surrogate characters in HTML'\n  },\n  surrogateInInputStream: {\n    reason: 'Unexpected surrogate character',\n    description:\n      'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'\n  },\n  unexpectedCharacterAfterDoctypeSystemIdentifier: {\n    reason: 'Invalid character after system identifier in doctype',\n    description: 'Unexpected character at `%c`. Expected `>`'\n  },\n  unexpectedCharacterInAttributeName: {\n    reason: 'Unexpected character in attribute name',\n    description:\n      'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'\n  },\n  unexpectedCharacterInUnquotedAttributeValue: {\n    reason: 'Unexpected character in unquoted attribute value',\n    description: 'Unexpected `%c`. Quote the attribute value to include it'\n  },\n  unexpectedEqualsSignBeforeAttributeName: {\n    reason: 'Unexpected equals sign before attribute name',\n    description: 'Unexpected `%c`. Add an attribute name before it'\n  },\n  unexpectedNullCharacter: {\n    reason: 'Unexpected NULL character',\n    description:\n      'Unexpected code point `%x`. Do not use NULL characters in HTML'\n  },\n  unexpectedQuestionMarkInsteadOfTagName: {\n    reason: 'Unexpected question mark instead of tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  unexpectedSolidusInTag: {\n    reason: 'Unexpected slash in tag',\n    description:\n      'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'\n  },\n  unknownNamedCharacterReference: {\n    reason: 'Unexpected unknown named character reference',\n    description:\n      'Unexpected character reference. Expected known named character references'\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {errors} from './errors.js'\n\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-'\n\nconst fatalities = {2: true, 1: false, 0: null}\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, options)\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse'\n    const onParseError = settings.emitParseErrors ? onerror : null\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    })\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    })\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code\n      const name = camelcase(code)\n      const setting = settings[name]\n      const config = setting === undefined || setting === null ? true : setting\n      const level = typeof config === 'number' ? config : config ? 1 : 0\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      }\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      }\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {reason: '', description: '', url: ''}\n        const message = file.message(format(info.reason), {start, end})\n        message.source = 'parse-error'\n        message.ruleId = code\n        message.fatal = fatalities[level]\n        message.note = format(info.description)\n        message.url = 'url' in info && info.url === false ? null : base + code\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value\n          .replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */ $1) => {\n            const offset = $1 ? -Number.parseInt($1, 10) : 0\n            const char = doc.charAt(error.startOffset + offset)\n            return char === '`' ? '` ` `' : char\n          })\n          .replace(\n            /%x/g,\n            () =>\n              '0x' +\n              doc.charCodeAt(error.startOffset).toString(16).toUpperCase()\n          )\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Split line to div node with className `code-line`\n *\n * @param {string} text\n * @return {Element[]}\n */\nconst splitLine = (text) => {\n  // Xdm Markdown parses every code line with \\n\n  const textArray = text.split(/\\n/)\n\n  // Remove last line \\n which results in empty array\n  if (textArray[textArray.length - 1].trim() === '') {\n    textArray.pop()\n  }\n\n  // Empty array are actually line segments so we convert them back to newlines\n  return textArray.map((line) => {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: ['code-line'] },\n      children: [{ type: 'text', value: line }],\n    }\n  })\n}\n\n/**\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    // @ts-ignore\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        node.position = {\n          // column: 0 is to make the ts compiler happy but we do not use this field\n          start: { line: startLineNum, column: 0 },\n          end: { line: startLineNum + numLines, column: 0 },\n        }\n        startLineNum = startLineNum + numLines\n        result.push(node)\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 0 },\n          end: { line: startLineNum, column: 0 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n *\n * @param {Element['children']} ast\n * @return {Element['children']}\n */\nconst splitTextByLine = (ast) => {\n  //@ts-ignore\n  return ast.reduce((result, node) => {\n    if (node.type === 'text') {\n      if (node.value.indexOf('\\n') === -1) {\n        result.push(node)\n        return result\n      }\n\n      const lines = node.value.split('\\n')\n      for (const [i, line] of lines.entries()) {\n        result.push({\n          type: 'text',\n          value: i === lines.length - 1 ? line : line + '\\n',\n          position: {\n            start: { line: node.position.start.line + i },\n            end: { line: node.position.start.line + i },\n          },\n        })\n      }\n\n      return result\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n      // @ts-ignore\n      node.children = splitTextByLine(node.children)\n      result.push(node)\n      return result\n    }\n\n    result.push(node)\n    return result\n  }, [])\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n      let langError = false\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), lang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + lang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            langError = true\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      const nodeWithPosition = addNodePositionClosure()(refractorRoot.children)\n      refractorRoot.children = splitTextByLine(nodeWithPosition)\n\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      }\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = splitLine(toString(node))\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Code lines\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          // @ts-ignore\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          // @ts-ignore\n          line.properties.className.push('highlight-line')\n        }\n\n        if (lang === 'diff' && toString(line).substring(0, 1) === '-') {\n          // @ts-ignore\n          line.properties.className.push('deleted')\n        } else if (lang === 'diff' && toString(line).substring(0, 1) === '+') {\n          // @ts-ignore\n          line.properties.className.push('inserted')\n        }\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n"],"names":["errors","abandonedHeadElementChild","reason","description","url","abruptClosingOfEmptyComment","abruptDoctypePublicIdentifier","abruptDoctypeSystemIdentifier","absenceOfDigitsInNumericCharacterReference","cdataInHtmlContent","characterReferenceOutsideUnicodeRange","closingOfElementWithOpenChildElements","controlCharacterInInputStream","controlCharacterReference","disallowedContentInNoscriptInHead","duplicateAttribute","endTagWithAttributes","endTagWithTrailingSolidus","endTagWithoutMatchingOpenElement","eofBeforeTagName","eofInCdata","eofInComment","eofInDoctype","eofInElementThatCanContainOnlyText","eofInScriptHtmlCommentLikeText","eofInTag","incorrectlyClosedComment","incorrectlyOpenedComment","invalidCharacterSequenceAfterDoctypeName","invalidFirstCharacterOfTagName","misplacedDoctype","misplacedStartTagForHeadElement","missingAttributeValue","missingDoctype","missingDoctypeName","missingDoctypePublicIdentifier","missingDoctypeSystemIdentifier","missingEndTagName","missingQuoteBeforeDoctypePublicIdentifier","missingQuoteBeforeDoctypeSystemIdentifier","missingSemicolonAfterCharacterReference","missingWhitespaceAfterDoctypePublicKeyword","missingWhitespaceAfterDoctypeSystemKeyword","missingWhitespaceBeforeDoctypeName","missingWhitespaceBetweenAttributes","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","nestedComment","nestedNoscriptInHead","nonConformingDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","noncharacterCharacterReference","noncharacterInInputStream","nullCharacterReference","openElementsLeftAfterEof","surrogateCharacterReference","surrogateInInputStream","unexpectedCharacterAfterDoctypeSystemIdentifier","unexpectedCharacterInAttributeName","unexpectedCharacterInUnquotedAttributeValue","unexpectedEqualsSignBeforeAttributeName","unexpectedNullCharacter","unexpectedQuestionMarkInsteadOfTagName","unexpectedSolidusInTag","unknownNamedCharacterReference","base","fatalities","rehypeParse","options","processorSettings","this","data","settings","Object","assign","Parser","doc","file","fn","fragment","onParseError","emitParseErrors","error","code","name","value","replace","$0","charAt","toUpperCase","setting","config","undefined","level","start","line","startLine","column","startCol","offset","startOffset","end","endLine","endCol","endOffset","info","message","format","source","ruleId","fatal","note","_","$1","Number","parseInt","char","charCodeAt","toString","parse5","Parser5","sourceCodeLocationInfo","scriptingEnabled","fromParse5","space","verbose","splitTextByLine","ast","reduce","result","node","type","indexOf","push","lines","split","o","entries","i","length","position","prototype","hasOwnProperty","call","children","rehypePrismGenerator","refractor","tree","visit","visitor","index","parent","tagName","meta","properties","className","Array","isArray","refractorRoot","lang","c","classListItem","slice","toLowerCase","highlight","concat","err","ignoreMissing","test","startLineNum","nodeWithPosition","addNodePosition","numLines","match","initialLineNum","textArray","shouldHighlightLine","RE","parsedMeta","map","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","includes","startingLineNumber","groups","codeLineArray","pop","falseShowLineNumbersStr","x","showLineNumbers","some","substring","treeExtract","filter","rehypePrismAll","refractorCommon","refractorAll"],"sourceRoot":""}