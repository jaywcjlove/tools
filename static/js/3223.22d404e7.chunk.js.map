{"version":3,"file":"static/js/3223.22d404e7.chunk.js","mappings":"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","sources":["../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/hast-util-to-mdast/lib/all.js","../../node_modules/hast-util-to-mdast/lib/util/own.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-text.js","../../node_modules/hast-util-to-mdast/lib/one.js","../../node_modules/hast-util-to-mdast/lib/util/wrap.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-children.js","../../node_modules/hast-util-to-mdast/lib/util/resolve.js","../../node_modules/unist-util-find-after/lib/index.js","../../node_modules/hast-util-to-text/lib/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/code.js","../../node_modules/trim-trailing-lines/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/del.js","../../node_modules/hast-util-to-mdast/lib/util/list-items-spread.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js","../../node_modules/hast-util-to-mdast/lib/handlers/dl.js","../../node_modules/hast-util-to-mdast/lib/handlers/em.js","../../node_modules/hast-util-to-mdast/lib/handlers/heading.js","../../node_modules/hast-util-to-mdast/lib/handlers/img.js","../../node_modules/hast-util-to-mdast/lib/handlers/inline-code.js","../../node_modules/hast-util-to-mdast/lib/util/find-selected-options.js","../../node_modules/hast-util-to-mdast/lib/handlers/input.js","../../node_modules/hast-util-to-mdast/lib/handlers/li.js","../../node_modules/hast-util-to-mdast/lib/handlers/list.js","../../node_modules/hast-util-to-mdast/lib/handlers/media.js","../../node_modules/hast-util-to-mdast/lib/handlers/p.js","../../node_modules/hast-util-to-mdast/lib/handlers/strong.js","../../node_modules/hast-util-to-mdast/lib/handlers/table-cell.js","../../node_modules/hast-util-to-mdast/lib/handlers/table.js","../../node_modules/hast-util-to-mdast/lib/handlers/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/root.js","../../node_modules/hast-util-to-mdast/lib/handlers/text.js","../../node_modules/hast-util-to-mdast/lib/handlers/comment.js","../../node_modules/hast-util-to-mdast/lib/handlers/a.js","../../node_modules/hast-util-to-mdast/lib/handlers/base.js","../../node_modules/hast-util-to-mdast/lib/handlers/blockquote.js","../../node_modules/hast-util-to-mdast/lib/handlers/br.js","../../node_modules/hast-util-to-mdast/lib/handlers/hr.js","../../node_modules/hast-util-to-mdast/lib/handlers/iframe.js","../../node_modules/hast-util-to-mdast/lib/handlers/q.js","../../node_modules/hast-util-to-mdast/lib/handlers/select.js","../../node_modules/hast-util-to-mdast/lib/handlers/textarea.js","../../node_modules/hast-util-to-mdast/lib/handlers/table-row.js","../../node_modules/hast-util-to-mdast/lib/handlers/wbr.js","../../node_modules/hast-util-to-mdast/lib/index.js","../../node_modules/rehype-remark/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/configure.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-to-markdown/lib/join.js","../../node_modules/mdast-util-to-markdown/lib/unsafe.js","../../node_modules/mdast-util-to-markdown/lib/index.js","../../node_modules/remark-stringify/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * @param\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\nexport const phrasing = /** @type {AssertPredicatePhrasing} */ (\n  convert([\n    'break',\n    'delete',\n    'emphasis',\n    'footnote',\n    'footnoteReference',\n    'image',\n    'imageReference',\n    'inlineCode',\n    'link',\n    'linkReference',\n    'strong',\n    'text'\n  ])\n)\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {one} from './one.js'\n\n/**\n * @param {H} h\n * @param {Node} parent\n * @returns {Array<MdastNode>}\n */\nexport function all(h, parent) {\n  /** @type {Array<Node>} */\n  // @ts-expect-error Assume `parent` is a parent.\n  const nodes = parent.children || []\n  /** @type {Array<MdastNode>} */\n  const values = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    // @ts-expect-error assume `parent` is a parent.\n    const result = one(h, nodes[index], parent)\n\n    if (Array.isArray(result)) {\n      values.push(...result)\n    } else if (result) {\n      values.push(result)\n    }\n  }\n\n  let start = 0\n  let end = values.length\n\n  while (start < end && values[start].type === 'break') {\n    start++\n  }\n\n  while (end > start && values[end - 1].type === 'break') {\n    end--\n  }\n\n  return start === 0 && end === values.length\n    ? values\n    : values.slice(start, end)\n}\n","export const own = {}.hasOwnProperty\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string} value\n * @returns {string}\n */\nexport function wrapText(h, value) {\n  return h.wrapText ? value : value.replace(/\\r?\\n|\\r/g, ' ')\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {all} from './all.js'\nimport {own} from './util/own.js'\nimport {wrapText} from './util/wrap-text.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @param {Parent|undefined} parent\n * @returns {MdastNode|Array<MdastNode>|void}\n */\nexport function one(h, node, parent) {\n  /** @type {Handle|undefined} */\n  let fn\n\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(h.handlers, node.tagName)) {\n      fn = h.handlers[node.tagName]\n    }\n  } else if (own.call(h.handlers, node.type)) {\n    fn = h.handlers[node.type]\n  }\n\n  if (typeof fn === 'function') {\n    return fn(h, node, parent)\n  }\n\n  return unknown(h, node)\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(h, node) {\n  // @ts-expect-error: Looks like a literal.\n  if (typeof node.value === 'string') {\n    // @ts-expect-error: Looks like a literal.\n    return h(node, 'text', wrapText(h, node.value))\n  }\n\n  return all(h, node)\n}\n","/**\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n */\n\nimport extend from 'extend'\nimport {phrasing as hastPhrasing} from 'hast-util-phrasing'\nimport {phrasing as mdastPhrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Array<MdastNode>} nodes\n */\nexport function wrap(nodes) {\n  return runs(nodes, onphrasing)\n\n  /**\n   * @param {Array<MdastPhrasingContent>} nodes\n   * @returns {MdastNode|Array<MdastNode>}\n   */\n  function onphrasing(nodes) {\n    const head = nodes[0]\n\n    if (\n      nodes.length === 1 &&\n      head.type === 'text' &&\n      (head.value === ' ' || head.value === '\\n')\n    ) {\n      return []\n    }\n\n    return {type: 'paragraph', children: nodes}\n  }\n}\n\n/**\n * Check if there are non-phrasing mdast nodes returned.\n * This is needed if a fragment is given, which could just be a sentence, and\n * doesn’t need a wrapper paragraph.\n *\n * @param {Array<MdastNode>} nodes\n * @returns {boolean}\n */\nexport function wrapNeeded(nodes) {\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\n *\n * @param {Array<MdastNode>} nodes\n * @param {(nodes: Array<MdastPhrasingContent>) => MdastNode|Array<MdastNode>} onphrasing\n * @param {(node: MdastNode) => MdastNode} [onnonphrasing]\n */\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  const nonphrasing = onnonphrasing || identity\n  /** @type {Array<MdastNode>} */\n  const flattened = flatten(nodes)\n  /** @type {Array<MdastNode>} */\n  let result = []\n  let index = -1\n  /** @type {Array<MdastPhrasingContent>|undefined} */\n  let queue\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < flattened.length) {\n    node = flattened[index]\n\n    if (phrasing(node)) {\n      if (!queue) queue = []\n      queue.push(node)\n    } else {\n      if (queue) {\n        result = result.concat(onphrasing(queue))\n        queue = undefined\n      }\n\n      result = result.concat(nonphrasing(node))\n    }\n  }\n\n  if (queue) {\n    result = result.concat(onphrasing(queue))\n  }\n\n  return result\n}\n\n/**\n * Flatten a list of nodes.\n *\n * @param {Array<MdastNode>} nodes\n * @returns {Array<MdastNode>}\n */\nfunction flatten(nodes) {\n  /** @type {Array<MdastNode>} */\n  let flattened = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      wrapNeeded(node.children)\n    ) {\n      flattened = flattened.concat(split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n/**\n * @param {MdastNode} node\n * @returns {Array<MdastNode>}\n */\nfunction split(node) {\n  // @ts-expect-error Assume parent.\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  /**\n   * Use `child`, add `parent` as its first child, put the original children\n   * into `parent`.\n   * If `child` is not a parent, `parent` will not be added.\n   *\n   * @param {MdastNode} child\n   * @returns {MdastNode}\n   */\n  function onnonphrasing(child) {\n    if ('children' in child && 'children' in node) {\n      const {children, ...rest} = node\n      return {\n        ...child,\n        // @ts-expect-error: assume matching parent & child.\n        children: [{...extend(true, {}, rest), children: child.children}]\n      }\n    }\n\n    return {...child}\n  }\n\n  /**\n   * Use `parent`, put the phrasing run inside it.\n   *\n   * @param {Array<MdastPhrasingContent>} nodes\n   * @returns {MdastNode}\n   */\n  function onphrasing(nodes) {\n    // @ts-expect-error: assume parent.\n    const {children, ...rest} = node\n    // @ts-expect-error: assume matching parent & child.\n    return {...extend(true, {}, rest), children: nodes}\n  }\n}\n\n/**\n * Check if an mdast node is phrasing.\n *\n * Also supports checking embedded hast fields.\n *\n * @param {MdastNode} node\n * @returns {node is MdastPhrasingContent}\n */\nfunction phrasing(node) {\n  return node.data && node.data.hName\n    ? hastPhrasing({\n        type: 'element',\n        tagName: node.data.hName,\n        properties: {},\n        children: []\n      })\n    : mdastPhrasing(node)\n}\n\n/**\n * @template {unknown} T\n * @param {T} n\n * @returns {T}\n */\nfunction identity(n) {\n  return n\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @returns {Array<MdastNode>}\n */\nexport function wrapChildren(h, node) {\n  return wrap(all(h, node))\n}\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string|null|undefined} url\n * @returns {string}\n */\nexport function resolve(h, url) {\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  if (h.frozenBaseUrl) {\n    return String(new URL(url, h.frozenBaseUrl))\n  }\n\n  return url\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Find the first node in `parent` after another `node` or after an index,\n * that passes `test`.\n\n * @param parent\n *   Parent node.\n * @param index\n *   Child of `parent` or it’s index.\n * @param test\n *   `unist-util-is`-compatible test.\n * @returns\n *   Child of `parent` or `null`.\n */\nexport const findAfter =\n  /**\n   * @type {(\n   *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &\n   *  ((node: Parent, index: Node | number, test?: Test) => Node | null)\n   * )}\n   */\n  (\n    /**\n     * @param {Parent} parent\n     * @param {Node | number} index\n     * @param {Test} [test]\n     * @returns {Node | null}\n     */\n    function (parent, index, test) {\n      const is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return null\n    }\n  )\n","/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any node.\n * @typedef {Extract<Node, import('unist').Parent>} Parent\n *   Any parent.\n * @typedef {'normal' | 'pre' | 'nowrap' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n * @typedef {BreakValue | BreakNumber | undefined} BreakBefore\n *   Any value for a break before.\n * @typedef {BreakValue | BreakNumber | BreakForce | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Node} tree\n *   Tree to turn into text.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options = {}) {\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<string | BreakNumber>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      // @ts-expect-error Looks like a parent.\n      ...innerTextCollection(children[index], tree, {\n        whitespace,\n        breakBefore: index ? undefined : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {Node} node\n * @param {Parent} parent\n * @param {CollectionInfo} info\n * @returns {Array<string | BreakNumber>}\n */\nfunction innerTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parent} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<string | BreakNumber>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakNumber | BreakForce | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Text | Comment} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<string | BreakNumber>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Node} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return props.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return props.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {trimTrailingLines} from 'trim-trailing-lines'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst prefix = 'language-'\n\nconst pre = convertElement('pre')\nconst isCode = convertElement('code')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function code(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array<string|number>|undefined} */\n  let classList\n  /** @type {string|undefined} */\n  let lang\n\n  if (pre(node)) {\n    while (++index < children.length) {\n      const child = children[index]\n\n      if (\n        isCode(child) &&\n        child.properties &&\n        child.properties.className &&\n        Array.isArray(child.properties.className)\n      ) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    index = -1\n\n    while (++index < classList.length) {\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\n        lang = String(classList[index]).slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  return h(\n    node,\n    'code',\n    {lang: lang || null, meta: null},\n    trimTrailingLines(wrapText(h, toText(node)))\n  )\n}\n","/**\n * Remove final line endings from `value`\n *\n * @param {unknown} value\n *   Value with trailing line endings, coerced to string.\n * @return {string}\n *   Value without trailing line endings.\n */\nexport function trimTrailingLines(value) {\n  const input = String(value)\n  let end = input.length\n\n  while (end > 0) {\n    const code = input.codePointAt(end - 1)\n    if (code !== undefined && (code === 10 || code === 13)) {\n      end--\n    } else {\n      break\n    }\n  }\n\n  return input.slice(0, end)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function del(h, node) {\n  return h(node, 'delete', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\n/**\n * @param {Array<MdastListContent>} children\n * @returns {boolean}\n */\nexport function listItemsSpread(children) {\n  let index = -1\n\n  if (children.length > 1) {\n    while (++index < children.length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\nimport {all} from '../all.js'\n\n/**\n * @param {H} h\n * @param {Child} node\n * @returns {Array<MdastListContent>}\n */\nexport function wrapListItems(h, node) {\n  const children = all(h, node)\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (child.type !== 'listItem') {\n      children[index] = {\n        type: 'listItem',\n        spread: false,\n        checked: null,\n        // @ts-expect-error Assume `children[index]` is block content.\n        children: [child]\n      }\n    }\n  }\n\n  // @ts-expect-error Assume all `listItem`s\n  return children\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent\n * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent\n *\n * @typedef Group\n * @property {Array<Element>} titles\n * @property {Array<ElementChild>} definitions\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst div = convertElement('div')\nconst dt = convertElement('dt')\nconst dd = convertElement('dd')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function dl(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array<ElementChild>} */\n  let clean = []\n  /** @type {Array<Group>} */\n  const groups = []\n  /** @type {Group} */\n  let group = {titles: [], definitions: []}\n  /** @type {ElementChild} */\n  let child\n  /** @type {Array<MdastBlockContent|MdastDefinitionContent>} */\n  let result\n\n  // Unwrap `<div>`s\n  while (++index < children.length) {\n    child = children[index]\n    clean = clean.concat(div(child) ? child.children : child)\n  }\n\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < clean.length) {\n    child = clean[index]\n\n    if (dt(child)) {\n      if (dd(clean[index - 1])) {\n        groups.push(group)\n        group = {titles: [], definitions: []}\n      }\n\n      group.titles.push(child)\n    } else {\n      group.definitions.push(child)\n    }\n  }\n\n  groups.push(group)\n\n  // Create items.\n  index = -1\n  /** @type {Array<MdastListContent>} */\n  const content = []\n\n  while (++index < groups.length) {\n    result = [\n      ...handle(h, groups[index].titles),\n      ...handle(h, groups[index].definitions)\n    ]\n\n    if (result.length > 0) {\n      content.push({\n        type: 'listItem',\n        spread: result.length > 1,\n        checked: null,\n        children: result\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length > 0) {\n    return h(\n      node,\n      'list',\n      {ordered: false, start: null, spread: listItemsSpread(content)},\n      content\n    )\n  }\n}\n\n/**\n * @param {H} h\n * @param {Array<ElementChild>} children\n * @returns {Array<MdastBlockContent|MdastDefinitionContent>}\n */\nfunction handle(h, children) {\n  const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children})\n\n  if (nodes.length === 0) {\n    return []\n  }\n\n  if (nodes.length === 1) {\n    return nodes[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(nodes),\n      children: nodes\n    }\n  ]\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function em(h, node) {\n  return h(node, 'emphasis', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function heading(h, node) {\n  // `else` shouldn’t happen, of course…\n  /* c8 ignore next */\n  const depth = Number(node.tagName.charAt(1)) || 1\n  const wrap = h.wrapText\n\n  h.wrapText = false\n  const result = h(node, 'heading', {depth}, all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function img(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(node, 'image', {\n    url: resolve(h, String(props.src || '') || null),\n    title: props.title || null,\n    alt: props.alt || ''\n  })\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {hasProperty} from 'hast-util-has-property'\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from './wrap-text.js'\n\nconst option = convertElement('option')\n\n/**\n * @param {H} h\n * @param {Element} node\n * @param {Properties} [properties]\n * @returns {Array<[string, string|null]>}\n */\nexport function findSelectedOptions(h, node, properties) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` exist.\n  const props = properties || node.properties\n  let options = findOptions(node)\n  const size =\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\n    (props.multiple ? 4 : 1)\n  let index = -1\n  /** @type {Array<Element>} */\n  const selectedOptions = []\n  /** @type {Array<[string, string|null]>} */\n  const values = []\n\n  while (++index < options.length) {\n    if (hasProperty(options[index], 'selected')) {\n      selectedOptions.push(options[index])\n    }\n  }\n\n  const list = selectedOptions.length > 0 ? selectedOptions : options\n  options = list.slice(0, size)\n  index = -1\n\n  while (++index < options.length) {\n    const option = options[index]\n    const content = wrapText(h, toText(option))\n    /** @type {Properties} */\n    // @ts-expect-error: `props` exist.\n    const props = option.properties\n    const label = content || String(props.label || '')\n    const value = String(props.value || '') || content\n    values.push([value, label === value ? null : label])\n  }\n\n  return values\n}\n\n/**\n * @param {Parent} node\n */\nfunction findOptions(node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array<Element>} */\n  let results = []\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n\n    // @ts-expect-error Looks like a parent.\n    if (Array.isArray(child.children)) {\n      // @ts-expect-error Looks like a parent.\n      results = results.concat(findOptions(child))\n    }\n\n    if (option(child) && !hasProperty(child, 'disabled')) {\n      results.push(child)\n    }\n  }\n\n  return results\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {own} from '../util/own.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst datalist = convertElement('datalist')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function input(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  let value = String(props.value || props.placeholder || '')\n  /** @type {Array<MdastNode>} */\n  const results = []\n  /** @type {Array<string>} */\n  const texts = []\n  /** @type {Array<[string, string|null]>} */\n  let values = []\n  let index = -1\n  /** @type {string} */\n  let list\n\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\n    return\n  }\n\n  if (props.type === 'checkbox' || props.type === 'radio') {\n    return h(\n      node,\n      'text',\n      wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\n    )\n  }\n\n  if (props.type === 'image') {\n    return props.alt || value\n      ? h(node, 'image', {\n          url: resolve(h, String(props.src || '') || null),\n          title: wrapText(h, String(props.title || '')) || null,\n          alt: wrapText(h, String(props.alt || value))\n        })\n      : []\n  }\n\n  if (value) {\n    values = [[value, null]]\n  } else if (\n    // `list` is not supported on these types:\n    props.type !== 'password' &&\n    props.type !== 'file' &&\n    props.type !== 'submit' &&\n    props.type !== 'reset' &&\n    props.type !== 'button' &&\n    props.list\n  ) {\n    list = String(props.list).toUpperCase()\n\n    if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {\n      values = findSelectedOptions(h, h.nodeById[list], props)\n    }\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Hide password value.\n  if (props.type === 'password') {\n    // Passwords don’t support `list`.\n    values[0] = ['•'.repeat(values[0][0].length), null]\n  }\n\n  if (props.type === 'url' || props.type === 'email') {\n    while (++index < values.length) {\n      value = resolve(h, values[index][0])\n\n      results.push(\n        h(\n          node,\n          'link',\n          {\n            title: null,\n            url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)\n          },\n          [{type: 'text', value: wrapText(h, values[index][1] || value)}]\n        )\n      )\n\n      if (index !== values.length - 1) {\n        results.push({type: 'text', value: ', '})\n      }\n    }\n\n    return results\n  }\n\n  while (++index < values.length) {\n    texts.push(\n      values[index][1]\n        ? values[index][1] + ' (' + values[index][0] + ')'\n        : values[index][0]\n    )\n  }\n\n  return h(node, 'text', wrapText(h, texts.join(', ')))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {wrapChildren} from '../util/wrap-children.js'\n\nconst p = convertElement('p')\nconst input = convertElement('input')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function li(h, node) {\n  const head = node.children[0]\n  /** @type {boolean|null} */\n  let checked = null\n  /** @type {ElementChild} */\n  let checkbox\n  /** @type {Element|undefined} */\n  let clone\n\n  // Check if this node starts with a checkbox.\n  if (p(head)) {\n    checkbox = head.children[0]\n\n    if (\n      input(checkbox) &&\n      checkbox.properties &&\n      (checkbox.properties.type === 'checkbox' ||\n        checkbox.properties.type === 'radio')\n    ) {\n      checked = Boolean(checkbox.properties.checked)\n      clone = {\n        ...node,\n        children: [\n          {...head, children: head.children.slice(1)},\n          ...node.children.slice(1)\n        ]\n      }\n    }\n  }\n\n  const content = wrapChildren(h, clone || node)\n\n  return h(node, 'listItem', {spread: content.length > 1, checked}, content)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst ol = convertElement('ol')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function list(h, node) {\n  const ordered = ol(node)\n  const children = wrapListItems(h, node)\n  /** @type {number|null} */\n  let start = null\n\n  if (ordered) {\n    start = hasProperty(node, 'start')\n      ? // @ts-expect-error: `props` exist.\n        Number.parseInt(String(node.properties.start), 10)\n      : 1\n  }\n\n  return h(\n    node,\n    'list',\n    {ordered, start, spread: listItemsSpread(children)},\n    children\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toString} from 'mdast-util-to-string'\nimport {visit, EXIT} from 'unist-util-visit'\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapNeeded} from '../util/wrap.js'\n\nconst source = convertElement('source')\nconst video = convertElement('video')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function media(h, node) {\n  let nodes = all(h, node)\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const properties = node.properties\n  const poster = video(node) && String(properties.poster || '')\n  let src = String(properties.src || '')\n  let index = -1\n  /** @type {boolean} */\n  let linkInFallbackContent = false\n  /** @type {ElementChild} */\n  let child\n\n  visit({type: 'root', children: nodes}, 'link', findLink)\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\n    return nodes\n  }\n\n  // Find the source.\n  while (!src && ++index < node.children.length) {\n    child = node.children[index]\n    if (source(child)) {\n      // @ts-expect-error: `props` are defined.\n      src = String(child.properties.src || '')\n    }\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    nodes = [\n      {\n        type: 'image',\n        title: null,\n        url: resolve(h, poster),\n        alt: toString({children: nodes})\n      }\n    ]\n  }\n\n  // Link to the media resource.\n  return {\n    type: 'link',\n    // @ts-expect-error Types are broken.\n    title: node.properties.title || null,\n    url: resolve(h, src),\n    // @ts-expect-error Assume phrasing content.\n    children: nodes\n  }\n\n  function findLink() {\n    linkInFallbackContent = true\n    return EXIT\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function p(h, node) {\n  const nodes = all(h, node)\n\n  if (nodes.length > 0) {\n    return h(node, 'paragraph', nodes)\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableCell(h, node) {\n  const wrap = h.wrapText\n\n  h.wrapText = false\n\n  const result = h(node, 'tableCell', all(h, node))\n\n  if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {\n    const data = result.data || (result.data = {})\n    if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan\n    if (node.properties.colSpan) data.colSpan = node.properties.colSpan\n  }\n\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastTableContent} MdastTableContent\n * @typedef {import('../types.js').MdastRowContent} MdastRowContent\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n *\n * @typedef Info\n * @property {Array<string|null>} align\n * @property {boolean} headless\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {visit, SKIP} from 'unist-util-visit'\nimport {wrapText} from '../util/wrap-text.js'\nimport {all} from '../all.js'\n\nconst thead = convertElement('thead')\nconst tr = convertElement('tr')\nconst cell = convertElement(['th', 'td'])\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function table(h, node) {\n  if (h.inTable) {\n    return h(node, 'text', wrapText(h, toText(node)))\n  }\n\n  h.inTable = true\n\n  const {headless, align} = inspect(node)\n  const rows = toRows(all(h, node), headless)\n  let columns = 1\n  let rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = -1\n\n    while (++cellIndex < cells.length) {\n      const cell = cells[cellIndex]\n\n      if (cell.data) {\n        const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1\n        const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1\n\n        if (colSpan > 1 || rowSpan > 1) {\n          let otherRowIndex = rowIndex - 1\n\n          while (++otherRowIndex < rowIndex + rowSpan) {\n            let colIndex = cellIndex - 1\n\n            while (++colIndex < cellIndex + colSpan) {\n              if (!rows[otherRowIndex]) {\n                // Don’t add rows that don’t exist.\n                // Browsers don’t render them either.\n                break\n              }\n\n              /** @type {Array<MdastRowContent>} */\n              const newCells = []\n\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\n                newCells.push({type: 'tableCell', children: []})\n              }\n\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\n            }\n          }\n        }\n\n        // Clean the data fields.\n        if ('colSpan' in cell.data) delete cell.data.colSpan\n        if ('rowSpan' in cell.data) delete cell.data.rowSpan\n        if (Object.keys(cell.data).length === 0) delete cell.data\n      }\n    }\n\n    if (cells.length > columns) columns = cells.length\n  }\n\n  // Add extra empty cells.\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = cells.length - 1\n    while (++cellIndex < columns) {\n      cells.push({type: 'tableCell', children: []})\n    }\n  }\n\n  let alignIndex = align.length - 1\n  while (++alignIndex < columns) {\n    align.push(null)\n  }\n\n  h.inTable = false\n\n  return h(node, 'table', {align}, rows)\n}\n\n/**\n * Infer whether the HTML table has a head and how it aligns.\n *\n * @param {Element} node\n * @returns {Info}\n */\nfunction inspect(node) {\n  let headless = true\n  let rowIndex = 0\n  let cellIndex = 0\n  /** @type {Array<string|null>} */\n  const align = [null]\n\n  visit(node, 'element', (child) => {\n    if (child.tagName === 'table' && node !== child) {\n      return SKIP\n    }\n\n    // If there is a `thead`, assume there is a header row.\n    if (cell(child) && child.properties) {\n      if (!align[cellIndex]) {\n        align[cellIndex] = String(child.properties.align || '') || null\n      }\n\n      // If there is a th in the first row, assume there is a header row.\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\n        headless = false\n      }\n\n      cellIndex++\n    } else if (thead(child)) {\n      headless = false\n    } else if (tr(child)) {\n      rowIndex++\n      cellIndex = 0\n    }\n  })\n\n  return {align, headless}\n}\n\n/**\n * Ensure the rows are properly structured.\n *\n * @param {Array<MdastNode>} children\n * @param {boolean} headless\n * @returns {Array<MdastTableContent>}\n */\nfunction toRows(children, headless) {\n  let index = -1\n  /** @type {Array<MdastTableContent>} */\n  const nodes = []\n  /** @type {Array<MdastRowContent>|undefined} */\n  let queue\n\n  // Add an empty header row.\n  if (headless) {\n    nodes.push({type: 'tableRow', children: []})\n  }\n\n  while (++index < children.length) {\n    const node = children[index]\n\n    if (node.type === 'tableRow') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume row content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    nodes[nodes.length - 1].children.push(...queue)\n  }\n\n  index = -1\n\n  while (++index < nodes.length) {\n    nodes[index].children = toCells(nodes[index].children)\n  }\n\n  return nodes\n}\n\n/**\n * Ensure the cells in a row are properly structured.\n *\n * @param {Array<MdastNode>} children\n * @returns {Array<MdastRowContent>}\n */\nfunction toCells(children) {\n  /** @type {Array<MdastRowContent>} */\n  const nodes = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n  /** @type {Array<MdastPhrasingContent>|undefined} */\n  let queue\n\n  while (++index < children.length) {\n    node = children[index]\n\n    if (node.type === 'tableCell') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume phrasing content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    node = nodes[nodes.length - 1]\n\n    if (!node) {\n      node = {type: 'tableCell', children: []}\n      nodes.push(node)\n    }\n\n    node.children.push(...queue)\n  }\n\n  return nodes\n}\n","import {all} from '../all.js'\nimport {wrapChildren} from '../util/wrap-children.js'\nimport {a} from './a.js'\nimport {base} from './base.js'\nimport {blockquote} from './blockquote.js'\nimport {br} from './br.js'\nimport {code} from './code.js'\nimport {comment} from './comment.js'\nimport {del} from './del.js'\nimport {dl} from './dl.js'\nimport {em} from './em.js'\nimport {heading} from './heading.js'\nimport {hr} from './hr.js'\nimport {iframe} from './iframe.js'\nimport {img} from './img.js'\nimport {inlineCode} from './inline-code.js'\nimport {input} from './input.js'\nimport {li} from './li.js'\nimport {list} from './list.js'\nimport {media} from './media.js'\nimport {p} from './p.js'\nimport {q} from './q.js'\nimport {root} from './root.js'\nimport {select} from './select.js'\nimport {strong} from './strong.js'\nimport {tableCell} from './table-cell.js'\nimport {tableRow} from './table-row.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {textarea} from './textarea.js'\nimport {wbr} from './wbr.js'\n\nexport const handlers = {\n  root,\n  text,\n  comment,\n  doctype: ignore,\n\n  applet: ignore,\n  area: ignore,\n  basefont: ignore,\n  bgsound: ignore,\n  caption: ignore,\n  col: ignore,\n  colgroup: ignore,\n  command: ignore,\n  content: ignore,\n  datalist: ignore,\n  dialog: ignore,\n  element: ignore,\n  embed: ignore,\n  frame: ignore,\n  frameset: ignore,\n  isindex: ignore,\n  keygen: ignore,\n  link: ignore,\n  math: ignore,\n  menu: ignore,\n  menuitem: ignore,\n  meta: ignore,\n  nextid: ignore,\n  noembed: ignore,\n  noframes: ignore,\n  optgroup: ignore,\n  option: ignore,\n  param: ignore,\n  script: ignore,\n  shadow: ignore,\n  source: ignore,\n  spacer: ignore,\n  style: ignore,\n  svg: ignore,\n  template: ignore,\n  title: ignore,\n  track: ignore,\n\n  abbr: all,\n  acronym: all,\n  bdi: all,\n  bdo: all,\n  big: all,\n  blink: all,\n  button: all,\n  canvas: all,\n  cite: all,\n  data: all,\n  details: all,\n  dfn: all,\n  font: all,\n  ins: all,\n  label: all,\n  map: all,\n  marquee: all,\n  meter: all,\n  nobr: all,\n  noscript: all,\n  object: all,\n  output: all,\n  progress: all,\n  rb: all,\n  rbc: all,\n  rp: all,\n  rt: all,\n  rtc: all,\n  ruby: all,\n  slot: all,\n  small: all,\n  span: all,\n  sup: all,\n  sub: all,\n  tbody: all,\n  tfoot: all,\n  thead: all,\n  time: all,\n\n  address: wrapChildren,\n  article: wrapChildren,\n  aside: wrapChildren,\n  body: wrapChildren,\n  center: wrapChildren,\n  div: wrapChildren,\n  fieldset: wrapChildren,\n  figcaption: wrapChildren,\n  figure: wrapChildren,\n  form: wrapChildren,\n  footer: wrapChildren,\n  header: wrapChildren,\n  hgroup: wrapChildren,\n  html: wrapChildren,\n  legend: wrapChildren,\n  main: wrapChildren,\n  multicol: wrapChildren,\n  nav: wrapChildren,\n  picture: wrapChildren,\n  section: wrapChildren,\n\n  a,\n  audio: media,\n  b: strong,\n  base,\n  blockquote,\n  br,\n  code: inlineCode,\n  dir: list,\n  dl,\n  dt: li,\n  dd: li,\n  del,\n  em,\n  h1: heading,\n  h2: heading,\n  h3: heading,\n  h4: heading,\n  h5: heading,\n  h6: heading,\n  hr,\n  i: em,\n  iframe,\n  img,\n  image: img,\n  input,\n  kbd: inlineCode,\n  li,\n  listing: code,\n  mark: em,\n  ol: list,\n  p,\n  plaintext: code,\n  pre: code,\n  q,\n  s: del,\n  samp: inlineCode,\n  select,\n  strike: del,\n  strong,\n  summary: p,\n  table,\n  td: tableCell,\n  textarea,\n  th: tableCell,\n  tr: tableRow,\n  tt: inlineCode,\n  u: em,\n  ul: list,\n  var: inlineCode,\n  video: media,\n  wbr,\n  xmp: code\n}\n\nfunction ignore() {}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Root} Root\n */\n\nimport {all} from '../all.js'\nimport {wrap, wrapNeeded} from '../util/wrap.js'\n\n/**\n * @type {Handle}\n * @param {Root} node\n */\nexport function root(h, node) {\n  let children = all(h, node)\n\n  if (h.document || wrapNeeded(children)) {\n    children = wrap(children)\n  }\n\n  return h(node, 'root', children)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h(node, 'text', wrapText(h, node.value))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Comment} Comment\n */\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(h, node) {\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function a(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(\n    node,\n    'link',\n    {\n      title: props.title || null,\n      url: resolve(h, String(props.href || '') || null)\n    },\n    all(h, node)\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function base(h, node) {\n  if (!h.baseFound) {\n    h.frozenBaseUrl =\n      String((node.properties && node.properties.href) || '') || null\n    h.baseFound = true\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {wrapChildren} from '../util/wrap-children.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrapChildren(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function br(h, node) {\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function hr(h, node) {\n  return h(node, 'thematicBreak')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function iframe(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  const src = String(props.src || '')\n  const title = String(props.title || '')\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    return {\n      type: 'link',\n      title: null,\n      url: resolve(h, src),\n      children: [{type: 'text', value: wrapText(h, title)}]\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function q(h, node) {\n  const expected = h.quotes[h.qNesting % h.quotes.length]\n\n  h.qNesting++\n  const contents = all(h, node)\n  h.qNesting--\n\n  contents.unshift({type: 'text', value: expected.charAt(0)})\n\n  contents.push({\n    type: 'text',\n    value: expected.length > 1 ? expected.charAt(1) : expected\n  })\n\n  return contents\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function select(h, node) {\n  const values = findSelectedOptions(h, node)\n  let index = -1\n  /** @type {Array<string>} */\n  const results = []\n  /** @type {[string, string|null]} */\n  let value\n\n  while (++index < values.length) {\n    value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length > 0) {\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function textarea(h, node) {\n  return h(node, 'text', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableRow(h, node) {\n  return h(node, 'tableRow', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function wbr(h, node) {\n  return h(node, 'text', '\\u200B')\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').HWithoutProps} HWithoutProps\n * @typedef {import('./types.js').HWithProps} HWithProps\n * @typedef {import('./types.js').MdastNode} MdastNode\n * @typedef {import('./types.js').MdastRoot} MdastRoot\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {convert} from 'unist-util-is'\nimport {visit} from 'unist-util-visit'\nimport {one} from './one.js'\nimport {handlers} from './handlers/index.js'\nimport {own} from './util/own.js'\n\nexport {one} from './one.js'\nexport {all} from './all.js'\n\nconst block = convert(['heading', 'paragraph', 'root'])\n\n/**\n * Transform hast to mdast.\n *\n * @param {Node} tree\n *   Tree (hast).\n * @param {Options} [options]\n *   Configuration (optional).\n */\nexport function toMdast(tree, options = {}) {\n  /** @type {Record<string, Element>} */\n  const byId = {}\n  /** @type {MdastNode|MdastRoot} */\n  let mdast\n\n  /**\n   * @type {H}\n   */\n  const h = Object.assign(\n    /**\n     * @type {HWithProps & HWithoutProps}\n     */\n    (\n      /**\n       * @param {Node} node\n       * @param {string} type\n       * @param {Properties|string|Array<Node>} [props]\n       * @param {string|Array<Node>} [children]\n       */\n      (node, type, props, children) => {\n        /** @type {Properties|undefined} */\n        let properties\n\n        if (typeof props === 'string' || Array.isArray(props)) {\n          children = props\n          properties = {}\n        } else {\n          properties = props\n        }\n\n        /** @type {Node} */\n        // @ts-expect-error Assume valid `type` and `children`/`value`.\n        const result = {type, ...properties}\n\n        if (typeof children === 'string') {\n          // @ts-expect-error: Looks like a literal.\n          result.value = children\n        } else if (children) {\n          // @ts-expect-error: Looks like a parent.\n          result.children = children\n        }\n\n        if (node.position) {\n          result.position = node.position\n        }\n\n        return result\n      }\n    ),\n    {\n      nodeById: byId,\n      baseFound: false,\n      inTable: false,\n      wrapText: true,\n      /** @type {string|null} */\n      frozenBaseUrl: null,\n      qNesting: 0,\n      handlers: options.handlers\n        ? {...handlers, ...options.handlers}\n        : handlers,\n      document: options.document,\n      checked: options.checked || '[x]',\n      unchecked: options.unchecked || '[ ]',\n      quotes: options.quotes || ['\"']\n    }\n  )\n\n  visit(tree, 'element', (node) => {\n    const id =\n      node.properties &&\n      'id' in node.properties &&\n      String(node.properties.id).toUpperCase()\n\n    if (id && !own.call(byId, id)) {\n      byId[id] = node\n    }\n  })\n\n  // @ts-expect-error: does return a transformer, that does accept any node.\n  rehypeMinifyWhitespace({newlines: options.newlines === true})(tree)\n\n  const result = one(h, tree, undefined)\n\n  if (!result) {\n    mdast = {type: 'root', children: []}\n  } else if (Array.isArray(result)) {\n    mdast = {type: 'root', children: result}\n  } else {\n    mdast = result\n  }\n\n  visit(mdast, 'text', ontext)\n\n  return mdast\n\n  /**\n   * Collapse text nodes, and fix whitespace.\n   * Most of this is taken care of by `rehype-minify-whitespace`, but\n   * we’re generating some whitespace too, and some nodes are in the end\n   * ignored.\n   * So clean up.\n   *\n   * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}\n   */\n  function ontext(node, index, parent) {\n    /* c8 ignore next 3 */\n    if (index === null || !parent) {\n      return\n    }\n\n    const previous = parent.children[index - 1]\n\n    if (previous && previous.type === node.type) {\n      previous.value += node.value\n      parent.children.splice(index, 1)\n\n      if (previous.position && node.position) {\n        previous.position.end = node.position.end\n      }\n\n      // Iterate over the previous node again, to handle its total value.\n      return index - 1\n    }\n\n    node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\n\n    // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\n    // as there the whitespace matters.\n    if (parent && block(parent)) {\n      if (!index) {\n        node.value = node.value.replace(/^[\\t ]+/, '')\n      }\n\n      if (index === parent.children.length - 1) {\n        node.value = node.value.replace(/[\\t ]+$/, '')\n      }\n    }\n\n    if (!node.value) {\n      parent.children.splice(index, 1)\n      return index\n    }\n  }\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast-util-to-mdast').Options} Options\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n */\n\nimport {toMdast} from 'hast-util-to-mdast'\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new mdast\n * tree (bridge-mode).\n * Without destination, returns the mdast tree: further plugins run on that\n * tree (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `hast-util-to-mdast`.\n */\nconst rehypeRemark =\n  /**\n   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}\n   */\n  (\n    /**\n     * @param {Processor|Options} [destination]\n     * @param {Options} [options]\n     */\n    function (destination, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {Processor|undefined} */\n      let processor\n\n      if (typeof destination === 'function') {\n        processor = destination\n        settings = options || {}\n      } else {\n        settings = destination || {}\n      }\n\n      if (settings.document === undefined || settings.document === null) {\n        settings = Object.assign({}, settings, {document: true})\n      }\n\n      return processor ? bridge(processor, settings) : mutate(settings)\n    }\n  )\n\nexport default rehypeRemark\n\n/**\n * Bridge-mode.\n * Runs the destination with the new mdast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toMdast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the mdast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}\n */\nfunction mutate(options = {}) {\n  return (node) => {\n    const result = /** @type {MdastRoot} */ (toMdast(node, options))\n    return result\n  }\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|void[], Node, string>}\n */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n"],"names":["phrasing","convert","all","h","parent","nodes","children","values","index","length","result","one","Array","isArray","push","apply","_toConsumableArray","start","end","type","slice","own","hasOwnProperty","wrapText","value","replace","node","fn","properties","dataMdast","call","handlers","tagName","unknown","wrap","runs","head","wrapNeeded","onphrasing","onnonphrasing","queue","nonphrasing","identity","flattened","concat","split","flatten","undefined","rest","_objectWithoutProperties","_excluded2","_objectSpread","extend","child","_excluded","data","hName","hastPhrasing","mdastPhrasing","n","wrapChildren","resolve","url","frozenBaseUrl","String","URL","findAfter","test","is","Error","Number","POSITIVE_INFINITY","indexOf","searchLineFeeds","searchTabOrSpaces","br","convertElement","p","cell","row","notRendered","Boolean","hidden","open","blockOrCaption","toText","tree","options","arguments","block","whitespace","inferWhitespace","breakBefore","breakAfter","results","collectText","innerTextCollection","count","repeat","join","info","prefix","suffix","items","unshift","collectElement","collectPreText","lines","lastIndex","match","exec","trimAndCollapseSpacesAndTabs","charCodeAt","props","noWrap","pre","isCode","code","classList","lang","className","meta","input","codePointAt","trimTrailingLines","del","listItemsSpread","spread","wrapListItems","checked","div","dt","dd","handle","ordered","em","heading","depth","charAt","img","src","title","alt","inlineCode","option","findSelectedOptions","findOptions","size","Math","min","parseInt","multiple","selectedOptions","hasProperty","content","label","datalist","li","checkbox","clone","ol","list","source","video","media","poster","linkInFallbackContent","visit","EXIT","toString","strong","tableCell","rowSpan","colSpan","thead","tr","toCells","_node$children3","_node$children2","root","document","text","comment","doctype","ignore","applet","area","basefont","bgsound","caption","col","colgroup","command","dialog","element","embed","frame","frameset","isindex","keygen","link","math","menu","menuitem","nextid","noembed","noframes","optgroup","param","script","shadow","spacer","style","svg","template","track","abbr","acronym","bdi","bdo","big","blink","button","canvas","cite","details","dfn","font","ins","map","marquee","meter","nobr","noscript","object","output","progress","rb","rbc","rp","rt","rtc","ruby","slot","small","span","sup","sub","tbody","tfoot","time","address","article","aside","body","center","fieldset","figcaption","figure","form","footer","header","hgroup","html","legend","main","multicol","nav","picture","section","a","href","audio","b","base","baseFound","blockquote","dir","dl","clean","groups","group","titles","definitions","h1","h2","h3","h4","h5","h6","hr","i","iframe","image","placeholder","texts","disabled","toUpperCase","nodeById","kbd","listing","mark","plaintext","q","expected","quotes","qNesting","contents","s","samp","select","strike","summary","table","inTable","_inspect","headless","rowIndex","cellIndex","align","SKIP","inspect","rows","_nodes$children","_node$children","toRows","columns","cells","otherRowIndex","colIndex","_rows$otherRowIndex$c","newCells","splice","Object","keys","alignIndex","td","textarea","th","tt","u","ul","var","wbr","xmp","toMdast","mdast","byId","assign","position","unchecked","id","rehypeMinifyWhitespace","newlines","previous","destination","settings","processor","file","next","run","error","bridge","mutate","configure","extension","key","extensions","line","_","blank","hardBreak","_1","state","unsafe","character","patternInScope","stack","before","formatCodeAsIndented","fences","checkQuote","marker","quote","emphasis","checkEmphasis","exit","enter","tracker","createTracker","move","containerPhrasing","after","current","peek","formatHeadingAsSetext","literalWithBreak","setext","subexit","safe","imageReference","referenceType","reference","associationId","formatLinkAsAutolink","raw","resourceLink","linkReference","checkBulletOrdered","bulletOrdered","checkRule","rule","checkStrong","shift","indentLines","containerFlow","break","fence","checkFence","sequence","max","substring","TypeError","longestStreak","encode","definition","rank","lastIndexOf","closeAtx","bulletCurrent","bullet","checkBullet","bulletOther","bulletOrderedOther","checkBulletOrderedOther","checkBulletOther","bulletLastUsed","useDifferentMarker","firstListItem","indexStack","item","listItem","paragraph","some","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","left","right","fullPhrasingSpans","inConstruct","notInConstruct","atBreak","invalid","joinDefinition","containerPhrasingBound","this","containerFlowBound","safeBound","config","remarkStringify","_this","Compiler","name","pop","association","tightDefinitions","zwitch","now","column","lineShift","toMarkdown"],"sourceRoot":""}