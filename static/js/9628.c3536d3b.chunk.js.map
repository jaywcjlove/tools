{"version":3,"file":"static/js/9628.c3536d3b.chunk.js","mappings":"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","sources":["../../node_modules/html-void-elements/index.js","../../node_modules/hast-util-to-string/index.js","../../node_modules/rehype-minify-whitespace/node_modules/unist-util-is/lib/index.js","../../node_modules/rehype-minify-whitespace/block.js","../../node_modules/rehype-minify-whitespace/content.js","../../node_modules/rehype-minify-whitespace/skippable.js","../../node_modules/rehype-minify-whitespace/index.js","../../node_modules/rehype-minify-whitespace/node_modules/hast-util-whitespace/index.js","../../node_modules/rehype-video/src/index.ts","../../node_modules/rehype-video/src/detailsNode.ts","../../node_modules/rehype-video/node_modules/unist-util-visit/lib/index.js","../../node_modules/unified/node_modules/is-buffer/index.js","../../node_modules/rehype-ignore/node_modules/unist-util-visit/lib/index.js","../../node_modules/rehype-ignore/src/index.ts","../../node_modules/rehype-autolink-headings/node_modules/unist-util-visit/lib/index.js","../../node_modules/rehype-autolink-headings/lib/index.js","../../node_modules/hast-util-heading-rank/lib/index.js","../../node_modules/hast-util-embedded/lib/index.js","../../node_modules/hast-util-is-body-ok-link/index.js","../../node_modules/hast-util-phrasing/lib/index.js","../../node_modules/rehype-slug/node_modules/unist-util-visit/lib/index.js","../../node_modules/rehype-slug/index.js","../../node_modules/hast-util-has-property/lib/index.js","../../node_modules/unist-util-visit-parents/node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/hast-util-is-element/index.js","../../node_modules/micromark-extension-gfm/node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-extension-gfm/node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-factory-space/index.js","../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-extension-gfm-table/node_modules/micromark-factory-space/index.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","../../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-factory-space/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","../../node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/association.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/safe.js","../../node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/mdast-util-gfm-strikethrough/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/remark-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/unified/node_modules/is-plain-obj/index.js","../../node_modules/unified/node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/unified/node_modules/vfile-message/lib/index.js","../../node_modules/unified/node_modules/vfile/lib/minpath.browser.js","../../node_modules/unified/node_modules/vfile/lib/minproc.browser.js","../../node_modules/unified/node_modules/vfile/lib/minurl.shared.js","../../node_modules/unified/node_modules/vfile/lib/minurl.browser.js","../../node_modules/unified/node_modules/vfile/lib/index.js","../../node_modules/unified/lib/index.js","../../node_modules/rehype-format/node_modules/hast-util-whitespace/index.js","../../node_modules/html-whitespace-sensitive-tag-names/index.js","../../node_modules/rehype-format/index.js"],"sourcesContent":["/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'isindex',\n  'keygen',\n  'link',\n  'menuitem',\n  'meta',\n  'nextid',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nexport const blocks = [\n  'address', // Flow content.\n  'article', // Sections and headings.\n  'aside', // Sections and headings.\n  'blockquote', // Flow content.\n  'body', // Page.\n  'br', // Contribute whitespace intrinsically.\n  'caption', // Similar to block.\n  'center', // Flow content, legacy.\n  'col', // Similar to block.\n  'colgroup', // Similar to block.\n  'dd', // Lists.\n  'dialog', // Flow content.\n  'dir', // Lists, legacy.\n  'div', // Flow content.\n  'dl', // Lists.\n  'dt', // Lists.\n  'figcaption', // Flow content.\n  'figure', // Flow content.\n  'footer', // Flow content.\n  'form', // Flow content.\n  'h1', // Sections and headings.\n  'h2', // Sections and headings.\n  'h3', // Sections and headings.\n  'h4', // Sections and headings.\n  'h5', // Sections and headings.\n  'h6', // Sections and headings.\n  'head', // Page.\n  'header', // Flow content.\n  'hgroup', // Sections and headings.\n  'hr', // Flow content.\n  'html', // Page.\n  'legend', // Flow content.\n  'li', // Block-like.\n  'li', // Similar to block.\n  'listing', // Flow content, legacy\n  'main', // Flow content.\n  'menu', // Lists.\n  'nav', // Sections and headings.\n  'ol', // Lists.\n  'optgroup', // Similar to block.\n  'option', // Similar to block.\n  'p', // Flow content.\n  'plaintext', // Flow content, legacy\n  'pre', // Flow content.\n  'section', // Sections and headings.\n  'summary', // Similar to block.\n  'table', // Similar to block.\n  'tbody', // Similar to block.\n  'td', // Block-like.\n  'td', // Similar to block.\n  'tfoot', // Similar to block.\n  'th', // Block-like.\n  'th', // Similar to block.\n  'thead', // Similar to block.\n  'tr', // Similar to block.\n  'ul', // Lists.\n  'wbr', // Contribute whitespace intrinsically.\n  'xmp' // Flow content, legacy\n]\n","export const content = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n","export const skippable = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n","/**\n * rehype plugin to minify whitespace between elements.\n *\n * ## What is this?\n *\n * This package is a plugin that can minify the whitespace between elements.\n *\n * ## When should I use this?\n *\n * You can use this plugin when you want to improve the size of HTML documents.\n *\n * ## API\n *\n * ### `unified().use(rehypeMinifyWhitespace[, options])`\n *\n * Minify whitespace.\n *\n * ##### `options`\n *\n * Configuration (optional).\n *\n * ##### `options.newlines`\n *\n * Whether to collapse runs of whitespace that include line endings to one\n * line ending (`boolean`, default: `false`).\n * The default is to collapse everything to one space.\n *\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n * @property {boolean} [newlines=false]\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n *   The default is to collapse to a single space.\n *\n * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace\n *\n * @typedef Context\n * @property {ReturnType<collapseFactory>} collapse\n * @property {Whitespace} whitespace\n * @property {boolean} [before]\n * @property {boolean} [after]\n *\n * @typedef Result\n * @property {boolean} remove\n * @property {boolean} ignore\n * @property {boolean} stripAtStart\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {embedded} from 'hast-util-embedded'\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {blocks} from './block.js'\nimport {content as contents} from './content.js'\nimport {skippable as skippables} from './skippable.js'\n\nconst ignorableNode = convert(['doctype', 'comment'])\n\n/**\n * Minify whitespace.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeMinifyWhitespace(options = {}) {\n  const collapse = collapseFactory(\n    options.newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  return (tree) => {\n    minify(tree, {collapse, whitespace: 'normal'})\n  }\n}\n\n/**\n * @param {Node} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minify(node, context) {\n  if ('children' in node) {\n    const settings = Object.assign({}, context)\n\n    if (node.type === 'root' || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, context)\n\n    return all(node, settings)\n  }\n\n  if (node.type === 'text') {\n    if (context.whitespace === 'normal') {\n      return minifyText(node, context)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (context.whitespace === 'nowrap') {\n      node.value = context.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {remove: false, ignore: ignorableNode(node), stripAtStart: false}\n}\n\n/**\n * @param {Text} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minifyText(node, context) {\n  const value = context.collapse(node.value)\n  const result = {remove: false, ignore: false, stripAtStart: false}\n  let start = 0\n  let end = value.length\n\n  if (context.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (context.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\n/**\n * @param {Root|Element} parent\n * @param {Context} context\n * @returns {Result}\n */\nfunction all(parent, context) {\n  let before = context.before\n  const after = context.after\n  const children = parent.children\n  let length = children.length\n  let index = -1\n\n  while (++index < length) {\n    const result = minify(\n      children[index],\n      Object.assign({}, context, {\n        before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}\n}\n\n/**\n * @param {Array<Node>} nodes\n * @param {number} index\n * @param {boolean|undefined} [after]\n * @returns {boolean|undefined}\n */\nfunction collapsableAfter(nodes, index, after) {\n  while (++index < nodes.length) {\n    const node = nodes[index]\n    let result = inferBoundary(node)\n\n    if (result === undefined && 'children' in node && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n/**\n * Infer two types of boundaries:\n *\n * 1. `true` — boundary for which whitespace around it does not contribute\n *    anything\n * 2. `false` — boundary for which whitespace around it *does* contribute\n *\n * No result (`undefined`) is returned if it is unknown.\n *\n * @param {Node} node\n * @returns {boolean|undefined}\n */\nfunction inferBoundary(node) {\n  if (node.type === 'element') {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (node.type === 'text') {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n/**\n * Infer whether a node is skippable.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nfunction content(node) {\n  return embedded(node) || isElement(node, contents)\n}\n\n/**\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\n *\n * @param {Element} node\n * @returns {boolean}\n */\nfunction blocklike(node) {\n  return isElement(node, blocks)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {boolean}\n */\nfunction skippable(node) {\n  return (\n    Boolean(\n      'properties' in node && node.properties && node.properties.hidden\n    ) ||\n    ignorableNode(node) ||\n    isElement(node, skippables)\n  )\n}\n\n/**\n * @param {string} character\n * @returns {boolean}\n */\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction replaceNewlines(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * @returns {string}\n */\nfunction replaceWhitespace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction collapseFactory(replace) {\n  return collapse\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n/**\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\n * ignored).\n *\n * @param {Root|Element} node\n * @param {Context} context\n * @returns {Whitespace}\n */\nfunction inferWhiteSpace(node, context) {\n  if ('tagName' in node && node.properties) {\n    switch (node.tagName) {\n      // Whitespace in script/style, while not displayed by CSS as significant,\n      // could have some meaning in JS/CSS, so we can’t touch them.\n      case 'listing':\n      case 'plaintext':\n      case 'script':\n      case 'style':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return node.properties.noWrap ? 'nowrap' : context.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return context.whitespace\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","import { Plugin } from 'unified';\nimport { Root, Element } from 'hast';\nimport { visit } from 'unist-util-visit';\nimport { detailsNode } from './detailsNode';\n\nexport type RehypeVideoOptions = {\n  /**\n   * URL suffix verification.\n   * @default /\\/(.*)(.mp4|.mov)$/\n   */\n  test?: RegExp;\n  /**\n   * Support `<details>` tag to wrap <video>.\n   * @default true\n   */\n  details?: boolean;\n}\n\nconst properties = { muted: 'muted', controls: 'controls', style: 'max-height:640px;' };\nconst queryStringToObject = (url: string) =>\n  [...new URLSearchParams(url.split('?!#')[1])].reduce(\n    (a: Record<string, string>, [k, v]) => ((a[k] = v), a),\n    {}\n  );\n\nfunction reElement(node: Element, details: boolean, href: string) {\n  const filename = href.split('/').pop()?.replace(/(\\?|!|\\#|$).+/, '');\n  node.properties = { ...properties, src: href };\n  node.tagName = 'video';\n  node.children = [];\n  const { title = filename }= queryStringToObject(href);\n  if (details) {\n    const reNode = detailsNode(title);\n    reNode.children.push({ ...node });\n    node.children = reNode.children;\n    node.tagName = reNode.tagName;\n    node.properties = reNode.properties;\n  }\n}\n\nconst RehypeVideo: Plugin<[RehypeVideoOptions?], Root> = (options) => {\n  const { test = /\\/(.*)(.mp4|.mov)$/, details = true } = options || {};\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      const isChecked = (str: string) => test.test(str.replace(/(\\?|!|\\#|$).+/g, '').toLocaleLowerCase())\n      const child = node.children[0];\n      const delimiter = /((?:https?:\\/\\/)(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&=;%+?\\-\\\\(\\\\)]*)/g;\n      // const delimiter = /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&=;%+?\\-\\\\(\\\\)]*)/g;\n\n      if (node.tagName === 'p' && node.children.length === 1) {\n        if (child.type === 'text' && delimiter.test(child.value) && isChecked(child.value)) {\n          reElement(node, details, child.value);\n        }\n        if (child.type === 'element' && child.tagName === 'a' && child.properties && typeof child.properties.href === 'string' && isChecked(child.properties.href)) {\n          reElement(node, details, child.properties.href);\n        }\n      }\n    });\n  }\n}\n\nexport default RehypeVideo;\n","import { Element } from 'hast';\n\nexport function detailsNode(title?: string): Element {\n  return {\n    type: 'element',\n    tagName: 'details',\n    properties: { open: true, className: 'octicon octicon-video' },\n    children: [\n      {\n        type: 'element',\n        tagName: 'summary',\n        children: [\n          {\n            type: 'element',\n            tagName: 'svg',\n            properties: {\n              'aria-hidden': true, height: 16, width: 16, viewBox: '0 0 16 16', version: '1.1', 'data-view-component': true,\n              className: 'octicon octicon-device-camera-video'\n            },\n            children: [\n              {\n                type: 'element',\n                tagName: 'path',\n                properties: {\n                  'fill-rule': 'evenodd',\n                  d: 'M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z'\n                },\n                children: [],\n              }\n            ]\n          },\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              'aria-label': `Video description ${title || ''}`\n            },\n            children: [\n              {\n                type: 'text',\n                value: title || ''\n              }\n            ]\n          },\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              className: 'dropdown-caret'\n            },\n            children: []\n          }\n        ]\n      }\n    ]\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import type { Plugin } from 'unified';\nimport type { Root, RootContent, Literal } from 'hast';\nimport { visit } from 'unist-util-visit';\n\n/**\n * Raw string of HTML embedded into HTML AST.\n */\nexport interface Raw extends Literal {\n  /**\n   * Node type.\n   */\n  type: 'raw'\n}\n\n// Register nodes in content.\ndeclare module 'hast' {\n  interface RootContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n  interface ElementContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n}\n\n\nexport type RehypeIgnoreOptions = {\n  /**\n   *  Character to use for opening delimiter, by default `rehype:ignore:start`\n   */\n  openDelimiter?: string;\n  /**\n   * Character to use for closing delimiter, by default `rehype:ignore:end`\n   */\n  closeDelimiter?: string;\n}\n\nconst rehypeIgnore: Plugin<[RehypeIgnoreOptions?], Root> = (options = {}) => {\n  const { openDelimiter = 'rehype:ignore:start', closeDelimiter = 'rehype:ignore:end' } = options;\n  return (tree) => {\n    visit(tree, (node: Root | RootContent, index, parent) => {\n      if (node.type === 'element' || node.type === 'root') {\n        // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);\n        // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);\n        // if (start > -1 && end > -1) {\n        //   node.children = node.children.filter((_, idx) => idx < start || idx > end);\n        // }\n        let start = false;\n        node.children = node.children.filter((item) => {\n          if (item.type === 'raw' || item.type === 'comment') {\n            let str =  (item.value || '').trim();\n            str = str.replace(/^<!--(.*?)-->/, '$1')\n            if (str === openDelimiter) {\n                start = true;\n                return false;\n            }\n            if (str === closeDelimiter) {\n                start = false;\n                return false;\n            }\n          }\n          \n          return !start;\n        })\n      }\n    });\n  }\n}\n\nexport default rehypeIgnore;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast-util-is-element').Test} Test\n *\n * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior\n *\n * @callback Build\n * @param {Element} node\n * @returns {ElementChild|ElementChild[]}\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior} [behavior='prepend']\n *   How to create links.\n * @property {Behavior} [behaviour]\n *   Please use `behavior` instead\n * @property {Properties} [properties]\n *   Extra properties to set on the link when injecting.\n *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or\n *   `'append'`.\n * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]\n *   hast nodes to insert in the link.\n * @property {ElementChild|ElementChild[]|Build} [group]\n *   hast node to wrap the heading and link with, if `behavior` is `'before'` or\n *   `'after'`.\n *   There is no default.\n * @property {Test} [test]\n *   Test to define which heading elements are linked.\n *   Any test that can be given to `hast-util-is-element` is supported.\n *   The default (no test) is to link all headings.\n *   Can be used to link only h1-h3, or for example all except h1.\n */\n\nimport extend from 'extend'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {visit, SKIP} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/**\n * Plugin to automatically add links to headings (h1-h6).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeAutolinkHeadings(options = {}) {\n  let props = options.properties\n  const behavior = options.behaviour || options.behavior || 'prepend'\n  const content = options.content || contentDefaults\n  const group = options.group\n  const is = convertElement(options.test)\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  let method\n\n  if (behavior === 'wrap') {\n    method = wrap\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around\n  } else {\n    if (!props) {\n      props = {ariaHidden: 'true', tabIndex: -1}\n    }\n\n    method = inject\n  }\n\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      if (\n        headingRank(node) &&\n        hasProperty(node, 'id') &&\n        is(node, index, parent)\n      ) {\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function inject(node) {\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, extend(true, {}, props), toChildren(content, node))\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function around(node, index, parent) {\n    // Uncommon.\n    /* c8 ignore next */\n    if (typeof index !== 'number' || !parent) return\n\n    const link = create(\n      node,\n      extend(true, {}, props),\n      toChildren(content, node)\n    )\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function wrap(node) {\n    node.children = [create(node, extend(true, {}, props), node.children)]\n    return [SKIP]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild[]}\n   */\n  function toChildren(value, node) {\n    const result = toNode(value, node)\n    return Array.isArray(result) ? result : [result]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild|ElementChild[]}\n   */\n  function toNode(value, node) {\n    if (typeof value === 'function') return value(node)\n    return extend(true, Array.isArray(value) ? [] : {}, value)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {Properties} props\n   * @param {ElementChild[]} children\n   * @returns {Element}\n   */\n  function create(node, props, children) {\n    return {\n      type: 'element',\n      tagName: 'a',\n      properties: Object.assign({}, props, {\n        // Fix hast types and make them required.\n        /* c8 ignore next */\n        href: '#' + (node.properties || {}).id\n      }),\n      children\n    }\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\n// To do next major: return `undefined`.\n/**\n * Get the rank (`1` to `6`) of headings (`h1` to `h6`).\n *\n * @param {Node} node\n *   Node to check.\n * @returns {number | null}\n *   Rank of the heading or `null` if not a heading.\n */\nexport function headingRank(node) {\n  const name =\n    (node && node.type === 'element' && node.tagName.toLowerCase()) || ''\n  const code =\n    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */\n      ? name.charCodeAt(1)\n      : 0\n  return code > 48 /* `0` */ && code < 55 /* `7` */ ? code - 48 /* `0` */ : null\n}\n","/**\n * @typedef {import('hast').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is a *embedded content*.\n *\n * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}\n * @param value\n *   Thing to check (typically `Node`).\n * @returns\n *   Whether `value` is an element considered embedded content.\n *\n *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,\n *   `object`, `picture`, `svg`, and `video` are embedded content.\n */\n// @ts-expect-error Sure, the assertion matches.\nexport const embedded = convertElement([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n])\n","/**\n * @fileoverview\n *   Check if a `link` element is “Body OK”.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {isBodyOkLink} from 'hast-util-is-body-ok-link'\n *\n *   isBodyOkLink(h('link', {itemProp: 'foo'})) //=> true\n *   isBodyOkLink(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true\n *   isBodyOkLink(h('link', {rel: ['author'], href: 'index.css'})) //=> false\n *   ```\n *\n *   ## API\n *\n *   ### `isBodyOkLink(node)`\n *\n *   * Return `true` for `link` elements with an `itemProp`\n *   * Return `true` for `link` elements with a `rel` list where one or more\n *     entries are `pingback`, `prefetch`, or `stylesheet`.\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\n\nconst list = new Set(['pingback', 'prefetch', 'stylesheet'])\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Check if a `link` element is “Body OK”.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nexport function isBodyOkLink(node) {\n  if (!isElement(node, 'link')) {\n    return false\n  }\n\n  if (hasProperty(node, 'itemProp')) {\n    return true\n  }\n\n  const props = node.properties || {}\n  const rel = props.rel || []\n  let index = -1\n\n  if (!Array.isArray(rel) || rel.length === 0) {\n    return false\n  }\n\n  while (++index < rel.length) {\n    if (!list.has(String(rel[index]))) {\n      return false\n    }\n  }\n\n  return true\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {embedded} from 'hast-util-embedded'\nimport {isBodyOkLink} from 'hast-util-is-body-ok-link'\n\nconst basic = convertElement([\n  'a',\n  'abbr',\n  // `area` is in fact only phrasing if it is inside a `map` element.\n  // However, since `area`s are required to be inside a `map` element, and it’s\n  // a rather involved check, it’s ignored here for now.\n  'area',\n  'b',\n  'bdi',\n  'bdo',\n  'br',\n  'button',\n  'cite',\n  'code',\n  'data',\n  'datalist',\n  'del',\n  'dfn',\n  'em',\n  'i',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'map',\n  'mark',\n  'meter',\n  'noscript',\n  'output',\n  'progress',\n  'q',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'select',\n  'small',\n  'span',\n  'strong',\n  'sub',\n  'sup',\n  'template',\n  'textarea',\n  'time',\n  'u',\n  'var',\n  'wbr'\n])\n\nconst meta = convertElement('meta')\n\n/**\n * Check if the given value is *phrasing* content.\n *\n * @param {unknown} value\n *   Thing to check, typically `Node`.\n * @returns {boolean}\n *   Whether `value` is phrasing content.\n */\nexport function phrasing(value) {\n  return Boolean(\n    node(value) &&\n      (value.type === 'text' ||\n        basic(value) ||\n        embedded(value) ||\n        isBodyOkLink(value) ||\n        (meta(value) && hasProperty(value, 'itemProp')))\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction node(value) {\n  // @ts-expect-error: looks like an object.\n  return value && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string} [prefix='']\n *   Prefix to add in front of `id`s.\n */\n\nimport Slugger from 'github-slugger'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {toString} from 'hast-util-to-string'\nimport {visit} from 'unist-util-visit'\n\nconst slugs = new Slugger()\n\n/**\n * Plugin to add `id`s to headings.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeSlug(options = {}) {\n  const prefix = options.prefix || ''\n\n  return (tree) => {\n    slugs.reset()\n\n    visit(tree, 'element', (node) => {\n      if (headingRank(node) && node.properties && !hasProperty(node, 'id')) {\n        node.properties.id = prefix + slugs.slug(toString(node))\n      }\n    })\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Check if `node`is an element and has a `field` property.\n *\n * @param {unknown} node\n *   Thing to check (typically `Element`).\n * @param {unknown} field\n *   Field name to check (typically `string`).\n * @returns {boolean}\n *   Whether `node` is an element that has a `field` property.\n */\nexport function hasProperty(node, field) {\n  const value =\n    typeof field === 'string' &&\n    isNode(node) &&\n    node.type === 'element' &&\n    node.properties &&\n    own.call(node.properties, field) &&\n    node.properties[field]\n\n  return value !== null && value !== undefined && value !== false\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n  return Boolean(value && typeof value === 'object' && 'type' in value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\n *   Check for an arbitrary element, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if an element passes a test, unaware of TypeScript inferral.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {boolean | void}\n *   Whether this element passes the test.\n */\n\n/**\n * @template {Element} T\n *   Element type.\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\n *   Check for an element that can be inferred by TypeScript.\n */\n\n/**\n * Check if an element passes a certain node test.\n *\n * @template {Element} T\n *   Element type.\n * @callback TestFunctionPredicate\n *   Complex test function for an element that can be inferred by TypeScript.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {element is T}\n *   Whether this element passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} T\n *   Element type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is T}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if `node` is an `Element` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific element.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is an element and passes a test.\n */\nexport const isElement =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *  When nullish, checks if `node` is an `Element`.\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\n *   *  When `function` checks if function passed the element is true.\n *   *  When `array`, checks any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<string | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain tag name.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @fileoverview\n *   List of whitespace sensitive HTML tag names\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'\n *\n *   whitespaceSensitiveTagNames\n *   //=> ['pre', 'script', 'style', 'textarea']\n *   ```\n *\n *   ## API\n *\n *   ### `whitespaceSensitiveTagNames`\n *\n *   List of whitespace sensitive HTML tag names (`string[]`).\n */\n\nexport const whitespaceSensitiveTagNames = [\n  'pre',\n  'script',\n  'style',\n  'textarea'\n]\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root['children'][number]} Child\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Child} Node\n *\n * @typedef Options\n *   Configuration.\n * @property {number|string} [indent=2]\n *   Indentation per level (`number`, `string`, default: `2`).\n *   When number, uses that amount of spaces.\n *   When `string`, uses that per indentation level.\n * @property {boolean} [indentInitial=true]\n *   Whether to indent the first level (`boolean`, default: `true`).\n *   This is usually the `<html>`, thus not indenting `head` and `body`.\n * @property {Array<string>} [blanks=[]]\n *   List of tag names to join with a blank line (`Array<string>`, default:\n *   `[]`).\n *   These tags, when next to each other, are joined by a blank line (`\\n\\n`).\n *   For example, when `['head', 'body']` is given, a blank line is added\n *   between these two.\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {visitParents, SKIP} from 'unist-util-visit-parents'\nimport {embedded} from 'hast-util-embedded'\nimport {phrasing} from 'hast-util-phrasing'\nimport {whitespace} from 'hast-util-whitespace'\nimport {isElement} from 'hast-util-is-element'\nimport {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'\n\nconst minify = rehypeMinifyWhitespace({newlines: true})\n\n/**\n * Format whitespace in HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\n */\nexport default function rehypeFormat(options = {}) {\n  let indent = options.indent || 2\n  let indentInitial = options.indentInitial\n\n  if (typeof indent === 'number') {\n    indent = ' '.repeat(indent)\n  }\n\n  // Default to indenting the initial level.\n  if (indentInitial === null || indentInitial === undefined) {\n    indentInitial = true\n  }\n\n  return (tree) => {\n    /** @type {boolean|undefined} */\n    let head\n\n    // @ts-expect-error: fine, it’s a sync transformer.\n    minify(tree)\n\n    // eslint-disable-next-line complexity\n    visitParents(tree, (node, parents) => {\n      let index = -1\n\n      if (!('children' in node)) {\n        return\n      }\n\n      if (isElement(node, 'head')) {\n        head = true\n      }\n\n      if (head && isElement(node, 'body')) {\n        head = undefined\n      }\n\n      if (isElement(node, whitespaceSensitiveTagNames)) {\n        return SKIP\n      }\n\n      const children = node.children\n      let level = parents.length\n\n      // Don’t indent content of whitespace-sensitive nodes / inlines.\n      if (children.length === 0 || !padding(node, head)) {\n        return\n      }\n\n      if (!indentInitial) {\n        level--\n      }\n\n      /** @type {boolean|undefined} */\n      let eol\n\n      // Indent newlines in `text`.\n      while (++index < children.length) {\n        const child = children[index]\n\n        if (child.type === 'text' || child.type === 'comment') {\n          if (child.value.includes('\\n')) {\n            eol = true\n          }\n\n          child.value = child.value.replace(\n            / *\\n/g,\n            '$&' + String(indent).repeat(level)\n          )\n        }\n      }\n\n      /** @type {Array<Child>} */\n      const result = []\n      /** @type {Child|undefined} */\n      let previous\n\n      index = -1\n\n      while (++index < children.length) {\n        const child = children[index]\n\n        if (padding(child, head) || (eol && !index)) {\n          addBreak(result, level, child)\n          eol = true\n        }\n\n        previous = child\n        result.push(child)\n      }\n\n      if (previous && (eol || padding(previous, head))) {\n        // Ignore trailing whitespace (if that already existed), as we’ll add\n        // properly indented whitespace.\n        if (whitespace(previous)) {\n          result.pop()\n          previous = result[result.length - 1]\n        }\n\n        addBreak(result, level - 1)\n      }\n\n      node.children = result\n    })\n  }\n\n  /**\n   * @param {Array<Child>} list\n   * @param {number} level\n   * @param {Child} [next]\n   * @returns {void}\n   */\n  function addBreak(list, level, next) {\n    const tail = list[list.length - 1]\n    const previous = whitespace(tail) ? list[list.length - 2] : tail\n    const replace =\n      (blank(previous) && blank(next) ? '\\n\\n' : '\\n') +\n      String(indent).repeat(Math.max(level, 0))\n\n    if (tail && tail.type === 'text') {\n      tail.value = whitespace(tail) ? replace : tail.value + replace\n    } else {\n      list.push({type: 'text', value: replace})\n    }\n  }\n\n  /**\n   * @param {Node|undefined} node\n   * @returns {boolean}\n   */\n  function blank(node) {\n    return Boolean(\n      node &&\n        node.type === 'element' &&\n        options.blanks &&\n        options.blanks.length > 0 &&\n        options.blanks.includes(node.tagName)\n    )\n  }\n}\n\n/**\n * @param {Node} node\n * @param {boolean|undefined} head\n * @returns {boolean}\n */\nfunction padding(node, head) {\n  return (\n    node.type === 'root' ||\n    (node.type === 'element'\n      ? head || isElement(node, 'script') || embedded(node) || !phrasing(node)\n      : false)\n  )\n}\n"],"names":["htmlVoidElements","toString","node","all","value","one","type","index","result","children","length","join","convert","test","undefined","ok","check","castFactory","typeFactory","Array","isArray","tests","checks","any","_len","arguments","parameters","_key","call","this","anyFactory","key","propsFactory","Error","_len2","_key2","Boolean","blocks","content","skippable","ignorableNode","rehypeMinifyWhitespace","collapse","replace","String","collapseFactory","newlines","replaceNewlines","replaceWhitespace","tree","minify","whitespace","context","settings","Object","assign","blocklike","before","after","properties","tagName","wrap","noWrap","inferWhiteSpace","parent","collapsableAfter","remove","splice","ignore","stripAtStart","start","end","removable","charAt","slice","minifyText","nodes","inferBoundary","thing","embedded","isElement","contents","hidden","skippables","character","match","exec","muted","controls","style","reElement","details","href","filename","split","pop","src","title","URLSearchParams","reduce","a","_ref","k","v","reNode","open","className","height","width","viewBox","version","d","detailsNode","push","options","visitor","reverse","visitParents","parents","indexOf","visit","isChecked","str","toLocaleLowerCase","child","delimiter","module","exports","obj","constructor","isBuffer","openDelimiter","closeDelimiter","filter","item","trim","contentDefaults","rehypeAutolinkHeadings","props","behavior","behaviour","group","is","convertElement","method","create","extend","SKIP","link","toChildren","grouping","toNode","ariaHidden","tabIndex","headingRank","hasProperty","id","name","toLowerCase","code","charCodeAt","list","Set","basic","meta","phrasing","rel","has","isBodyOkLink","slugs","Slugger","rehypeSlug","prefix","reset","slug","own","hasOwnProperty","field","isNode","CONTINUE","EXIT","step","factory","defineProperty","subresult","offset","grandparents","toResult","concat","Number","POSITIVE_INFINITY","element","tagNameFactory","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","add","asciiAlpha","regexCheck","asciiAlphanumeric","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","wwwPrefix","tokenize","effects","nok","size","wwwPrefixInside","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","trail","domainAfter","domainAtPunctuation","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previous","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","text","gfmAutolinkLiteral","token","_balanced","_gfmAutolinkLiteralWalkedInto","markdownSpace","factorySpace","max","limit","blankLine","markdownLineEnding","normalizeIdentifier","toUpperCase","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","now","codePointAt","includes","resolveToPotentialGfmFootnoteCall","marker","column","_bufferIndex","string","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","classifyCharacter","resolveAll","called","resolve","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","map","editMap","at","addImpl","sort","b","vecs","gfmTableAlign","inDelimiterRow","align","event","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","line","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","gfm","extensions","combineExtensions","document","continuation","resolveTo","findAndReplace","find","schema","RegExp","ignored","pairs","TypeError","toExpression","toFunction","toPairs","pairIndex","grandparent","change","lastIndex","position","matchObject","input","stack","global","handler","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","_","parts","isCorrectDomain","trailExec","closingParenIndex","openingParens","ccount","closingParens","splitUrl","label","email","characterEscapeOrReference","decode","$0","$1","$2","head","hex","base","parseInt","decodeNumericCharacterReference","decodeNamedCharacterReference","association","between","state","repeat","eol","patternCompile","pattern","_compiled","atBreak","patternInScope","listInScope","none","safe","positions","infos","expression","numerical","escapeBackslashes","encode","results","whole","track","lineShift","move","chunks","current","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","tracker","subexit","footnoteDefinition","indentLines","info","indexStack","createTracker","handle","bulletLastUsed","containerFlow","blank","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","handlers","delete","containerPhrasing","inlineCode","sequence","gfmTableFromMarkdown","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","markdownTable","listItem","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","spread","Math","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","isPlainObject","prototype","getPrototypeOf","Symbol","toStringTag","iterator","stringifyPosition","point","pos","VFileMessage","reason","place","origin","super","message","fatal","source","ruleId","file","actual","expected","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","error","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","messages","history","stored","prop","assertNonEmpty","assertPart","stem","encoding","fail","part","unified","transformers","trough","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","use","addPlugin","addList","addPreset","plugin","plugins","entry","isPlainObj","parse","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","run","callback","Promise","executor","reject","done","runSync","complete","assertDone","bail","process","processSync","destination","keys","asyncName","looksLikeAVFile","whitespaceSensitiveTagNames","rehypeFormat","indentInitial","level","addBreak","blanks"],"sourceRoot":""}