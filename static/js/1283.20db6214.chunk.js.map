{"version":3,"file":"static/js/1283.20db6214.chunk.js","mappings":"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","sources":["../../packages/generate-password/src/utils.ts","../../packages/generate-password/src/index.tsx"],"sourcesContent":["export function validatePassword(password: string) {\n  // Create an array and push all possible values that you want in password\n  var matchedCase = new Array();\n  matchedCase.push('[$@$!%*#?&]'); // Special Charector\n  matchedCase.push('[A-Z]'); // Uppercase Alpabates\n  matchedCase.push('[0-9]'); // Numbers\n  matchedCase.push('[a-z]'); // Lowercase Alphabates\n\n  // Check the conditions\n  let ctr = 0;\n  for (let i = 0; i < matchedCase.length; i++) {\n    if (new RegExp(matchedCase[i]).test(password)) {\n      ctr++;\n    }\n  }\n  // Display it\n  let color = '';\n  let strength = '';\n  switch (ctr) {\n    case 0:\n    case 1:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = \"It's easy to crack!\";\n      color = 'gray';\n      break;\n    case 2:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = \"Very Weak! It's easy to crack!\";\n      color = 'red';\n      break;\n    case 3:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = 'Medium level. Enter more symbols!';\n      color = 'orange';\n      break;\n    case 4:\n      strength = \"Strong :) Now it's safe!\";\n      color = 'green';\n      break;\n  }\n  return {\n    strength,\n    color,\n  };\n}\n\nconst LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\nconst UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst NUMERIC = '0123456789';\nconst SPECIAL_CHARACTER = '!@#$%^&*()_+~`|}{[]:;?><,./-=';\n\nexport function generatePassword(\n  len: number = 8,\n  lowerCase: boolean = true,\n  upperCase: boolean = true,\n  numeric: boolean = true,\n  special: boolean = true,\n) {\n  let password = '';\n  if (!lowerCase && !upperCase && !numeric && !special) {\n    return password;\n  }\n  while (password.length < len) {\n    const entity1 = Math.ceil(LOWERCASE.length * Math.random() * Math.random()) - 1;\n    const entity2 = Math.ceil(NUMERIC.length * Math.random() * Math.random()) - 1;\n    const entity3 = Math.ceil(SPECIAL_CHARACTER.length * Math.random() * Math.random()) - 1;\n    const entity4 = Math.ceil(UPPERCASE.length * Math.random() * Math.random()) - 1;\n    if (lowerCase && password.length < len) {\n      password += LOWERCASE.charAt(entity1);\n    }\n    if (upperCase && password.length < len) {\n      password += UPPERCASE.charAt(entity4);\n    }\n    if (numeric && password.length < len) {\n      password += NUMERIC.charAt(entity2);\n    }\n    if (special && password.length < len) {\n      password += SPECIAL_CHARACTER.charAt(entity3);\n    }\n  }\n  return password.trim();\n}\n","import { useEffect, useState } from 'react';\nimport { Wrapper, StyledLayout, CodeLineCopy, Button, Spacing } from '@wcj/tools-react-components';\nimport styled from 'styled-components';\nimport { generatePassword, validatePassword } from './utils';\n\nconst Input = styled.input`\n  border-radius: 6px;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  user-select: none;\n  gap: 10px;\n`;\n\nexport interface InputRangeProps\n  extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n  ref?: any;\n  range?: number;\n  extra?: React.ReactNode;\n}\n\nconst InputRange: React.FC<React.PropsWithChildren<InputRangeProps>> = (props) => {\n  return (\n    <Label>\n      <Input type=\"range\" min={8} max={50} style={{ flex: 1 }} {...props} value={props.range} />\n      <span>{props.range}</span>\n      {props.extra}\n    </Label>\n  );\n};\n\nconst PasswordInfo = styled.span`\n  border-radius: 3px;\n  color: #fff;\n  font-size: 12px;\n  margin-right: 5px;\n  margin-left: 6px;\n  width: 12px;\n  height: 12px;\n  display: inline-block;\n`;\n\nexport default function GeneratePassword() {\n  const [range, setRange] = useState<number>(12);\n  const [lowerCase, setLowerCase] = useState<boolean>(true);\n  const [history, setHistory] = useState<string[]>([]);\n  const [upperCase, setUpperCase] = useState<boolean>(true);\n  const [numeric, setNumeric] = useState<boolean>(true);\n  const [special, setSpecial] = useState<boolean>(true);\n  const addHistory = (str: string) => {\n    const data = [...history];\n    data.unshift(str);\n    setHistory(data.slice(0, 20));\n  };\n  useEffect(() => {\n    const password = generatePassword(range, lowerCase, upperCase, numeric, special);\n    addHistory(password);\n  }, [range, lowerCase, upperCase, numeric, special]);\n\n  useEffect(() => {\n    const data = [...history];\n    {\n      [...Array(5)].map(() => {\n        const password = generatePassword(range, lowerCase, upperCase, numeric, special);\n        data.unshift(password);\n      });\n    }\n    setHistory(data.slice(0, 20));\n  }, []);\n\n  return (\n    <Wrapper>\n      <StyledLayout overflow=\"initial\" title=\"Generate Password - Setting\">\n        <InputRange\n          style={{ maxWidth: 630 }}\n          range={range}\n          value={range}\n          onChange={(evn) => setRange(Number((evn.target as HTMLInputElement).value))}\n          extra={\n            <select value={range} onChange={(evn) => setRange(Number(evn.target.value))}>\n              {[...Array(43)].map((_, idx) => (\n                <option value={idx + 8} key={idx}>\n                  {idx + 8}\n                </option>\n              ))}\n            </select>\n          }\n        />\n        <Spacing style={{ paddingTop: 10 }}>\n          <Label>\n            <Input type=\"checkbox\" checked={lowerCase} onChange={(evn) => setLowerCase(evn.target.checked)} />\n            Lower Case Letter(a..z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={upperCase} onChange={(evn) => setUpperCase(evn.target.checked)} />\n            Upper Case Letter(A..Z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={numeric} onChange={(evn) => setNumeric(evn.target.checked)} />\n            Number (0..9)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={special} onChange={(evn) => setSpecial(evn.target.checked)} />\n            Special characters\n          </Label>\n        </Spacing>\n        <Button\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            const password = generatePassword(range, lowerCase, upperCase, numeric, special);\n            addHistory(password);\n          }}\n        >\n          Generate Password\n        </Button>\n        <Spacing direction=\"row\" items=\"center\" gutter={0.1} style={{ marginTop: 10 }}>\n          <PasswordInfo style={{ backgroundColor: 'gray' }} /> <span>It's easy to crack!</span>\n          <PasswordInfo style={{ backgroundColor: 'red' }} /> <span>Very Weak! It's easy to crack!</span>\n          <PasswordInfo style={{ backgroundColor: 'orange' }} /> <span>Medium level. Enter more symbols!</span>\n          <PasswordInfo style={{ backgroundColor: 'green' }} /> <span>Strong :) Now it's safe!</span>\n        </Spacing>\n        <Spacing style={{ paddingTop: 10 }}>\n          {history.map((password, key) => {\n            const valida = validatePassword(password);\n            return (\n              <CodeLineCopy copyText={password} label={`${key + 1}`} key={key}>\n                <PasswordInfo style={{ backgroundColor: valida.color }}></PasswordInfo> {password}\n              </CodeLineCopy>\n            );\n          })}\n        </Spacing>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["LOWERCASE","UPPERCASE","NUMERIC","SPECIAL_CHARACTER","generatePassword","len","lowerCase","upperCase","numeric","special","password","length","entity1","Math","ceil","random","entity2","entity3","entity4","charAt","trim","Input","styled","_templateObject","Label","_templateObject2","InputRange","props","_jsxs","children","_jsx","type","min","max","style","flex","value","range","extra","PasswordInfo","_templateObject3","GeneratePassword","useState","setRange","setLowerCase","history","setHistory","setUpperCase","setNumeric","setSpecial","addHistory","str","data","unshift","slice","useEffect","Array","map","Wrapper","StyledLayout","overflow","title","maxWidth","onChange","evn","Number","target","_","idx","Spacing","paddingTop","checked","Button","marginTop","onClick","direction","items","gutter","backgroundColor","key","valida","matchedCase","push","ctr","i","RegExp","test","color","strength","validatePassword","CodeLineCopy","copyText","label"],"sourceRoot":""}