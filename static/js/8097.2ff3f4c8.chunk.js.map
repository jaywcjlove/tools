{"version":3,"file":"static/js/8097.2ff3f4c8.chunk.js","mappings":"iSASMA,EAAS,mHAMTC,EAASC,EAAAA,GAAAA,IAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,iMAWNC,EAAgBF,EAAAA,GAAAA,IAAHG,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,4KAUbC,EAAcJ,EAAAA,GAAAA,IAAHK,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,kCAIF,SAASC,IACtB,IAAMC,GAAOC,EAAAA,EAAAA,QAAuB,MACpC,GAAgCC,EAAAA,EAAAA,UAAiBX,GAAjD,eAAOY,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,UAAuB,cAArD,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAA8B,cAAxD,eAAOK,EAAP,KAAcC,EAAd,KAoCMC,EAAa,CAjCEC,EAAAA,GAAAA,MAAiB,CACpC,kBAAmB,CACjBC,aAAc,OAEhB,gBAAiB,CACfC,YAAa,QAgCjB,OAHIC,EAAAA,GAAMR,IACRI,EAAWK,KAAKD,EAAAA,GAAMR,OAGtBU,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CACEC,MAAM,gBACNC,OACEH,EAAAA,EAAAA,MAACI,EAAAA,SAAD,CAAAL,SAAAA,EACEF,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CAAQC,QA7CE,kBAAMpB,EAAYb,EAAlB,EA6CV0B,SAAAA,YACAF,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CAAQC,QA7BK,WACrB,IACMC,EAAMzB,EAAK0B,QACjBC,IAAAA,MACS3B,EAAK0B,QAAS,CACnBE,OAJU,EAIFH,EAAKI,aACbC,MAAO,CACLC,UAAW,sBAA6BN,EAAKO,YAAc,EANnD,EAMC,OAAkEP,EAAKI,aAAe,EANvF,EAMC,OAEXI,MARU,EAQHR,EAAKO,cAEbE,MAAMC,SAAAA,GACL,IAAMC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,SAAW,YAChBH,EAAKI,KAAOL,EACZC,EAAKK,OAZT,GAHF,EA6BUxB,SAAAA,gBALNA,SAAAA,EASEC,EAAAA,EAAAA,MAACrB,EAAD,CAAAoB,SAAAA,EACEF,EAAAA,EAAAA,KAAAA,SAAAA,CAAQ2B,MAAOrC,EAASsC,SAzCNC,SAAAA,GACxBtC,EAAWsC,EAAGC,OAAOH,MADvB,EAyCQzB,SACG6B,EAAAA,GAAAA,OAAiBC,KAAI,SAACC,EAASC,GAC9B,OACElC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQ2B,MAAOM,EAAf/B,SACG+B,GAD0BC,EAFhC,OAQHlC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQ2B,MAAOnC,EAAOoC,SA/CHC,SAAAA,GACzBM,QAAQC,IAAI,qBAAsBP,EAAGC,OAAOH,OAC5ClC,EAASoC,EAAGC,OAAOH,MAFrB,EA+CQzB,SACGmC,OAAOC,KAAKC,GAAQP,KAAI,SAACC,EAASC,GACjC,OACE/B,EAAAA,EAAAA,MAAAA,SAAAA,CAAQwB,MAAOM,EAAf/B,SAAAA,CAAAA,UACU+B,IADmBC,EAFhC,UASLlC,EAAAA,EAAAA,KAACvB,EAAD,CAAAyB,UACEF,EAAAA,EAAAA,KAACpB,EAAD,CAAe4D,IAAKvD,EAApBiB,UACEF,EAAAA,EAAAA,KAACyC,EAAAA,GAAD,CAAYjD,MAAO+C,EAAO/C,GAAQmC,MAAOvC,EAAUM,WAAYA,EAAYkC,SAvE/DD,SAAAA,GAAD,OAAmBtC,EAAYsC,EAA/B,YA6EtB,C","sources":["../../packages/code-to-image/src/index.tsx"],"sourcesContent":["import React, { useState, Fragment, useRef } from 'react';\nimport { Wrapper, StyledLayout, Button } from '@wcj/tools-react-components';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { langs, langNames, LanguageName } from '@uiw/codemirror-extensions-langs';\nimport * as themes from '@uiw/codemirror-themes-all';\nimport styled from 'styled-components';\nimport { EditorView } from '@codemirror/view';\nimport domToImage from 'dom-to-image-more';\n\nconst sample = `<h2>Web tool</h2>\n<p>Hello World</p>\n<pre><code class=\"language-css\">body { color: 'red'; }\n</code></pre>\n`;\n\nconst Canvas = styled.div`\n  border: 3px dashed #e3ebf6;\n  display: inline-block;\n  &::before {\n    content: 'CANVAS';\n    top: -21px;\n    left: -4px;\n    position: absolute;\n    font-size: 0.8rem;\n  }\n`;\nconst EditorWarpper = styled.div`\n  padding: 50px;\n  & > * {\n    box-shadow: rgb(0 0 0 / 55%) 0px 10px 30px 0px;\n    border-radius: 5px;\n    display: inline-block;\n    overflow: hidden;\n  }\n`;\n\nconst HeaderTools = styled.div`\n  padding-bottom: 10px;\n`;\n\nexport default function Html2Markdown() {\n  const $dom = useRef<HTMLDivElement>(null);\n  const [markdown, setMarkdown] = useState<string>(sample);\n  const [languge, setLanguge] = useState<LanguageName>('javascript');\n  const [theme, setTheme] = useState<keyof typeof themes>('githubDark');\n  const handleInput = () => setMarkdown(sample);\n  const handleChange = (value: string) => setMarkdown(value);\n  const borderRadius = EditorView.theme({\n    '.cm-scroller, &': {\n      borderRadius: '6px',\n    },\n    '& .cm-gutters': {\n      borderRight: '0',\n    },\n  });\n  const selectLangChange = (ev: React.ChangeEvent<HTMLSelectElement>) => {\n    setLanguge(ev.target.value as LanguageName);\n  };\n  const selectThemeChange = (ev: React.ChangeEvent<HTMLSelectElement>) => {\n    console.log('ev.target.value:::', ev.target.value);\n    setTheme(ev.target.value as keyof typeof themes);\n  };\n  const downloadHandel = () => {\n    const scale = 2;\n    const elm = $dom.current;\n    domToImage\n      .toPng($dom.current, {\n        height: elm!.offsetHeight * scale,\n        style: {\n          transform: `scale(${scale}) translate(${elm!.offsetWidth / 2 / scale}px, ${elm!.offsetHeight / 2 / scale}px)`,\n        },\n        width: elm!.offsetWidth * scale,\n      })\n      .then((dataUrl) => {\n        const link = document.createElement('a');\n        link.download = 'image.png';\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n  const extensions = [borderRadius];\n  if (langs[languge]) {\n    extensions.push(langs[languge]());\n  }\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"Code To Image\"\n        extra={\n          <Fragment>\n            <Button onClick={handleInput}>Sample</Button>\n            <Button onClick={downloadHandel}>DownLoad</Button>\n          </Fragment>\n        }\n      >\n        <HeaderTools>\n          <select value={languge} onChange={selectLangChange}>\n            {langNames.sort().map((keyname, index) => {\n              return (\n                <option value={keyname} key={index}>\n                  {keyname}\n                </option>\n              );\n            })}\n          </select>\n          <select value={theme} onChange={selectThemeChange}>\n            {Object.keys(themes).map((keyname, index) => {\n              return (\n                <option value={keyname} key={index}>\n                  Theme: {keyname}\n                </option>\n              );\n            })}\n          </select>\n        </HeaderTools>\n        <Canvas>\n          <EditorWarpper ref={$dom}>\n            <CodeMirror theme={themes[theme]} value={markdown} extensions={extensions} onChange={handleChange} />\n          </EditorWarpper>\n        </Canvas>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["sample","Canvas","styled","_templateObject","EditorWarpper","_templateObject2","HeaderTools","_templateObject3","Html2Markdown","$dom","useRef","useState","markdown","setMarkdown","languge","setLanguge","theme","setTheme","extensions","EditorView","borderRadius","borderRight","langs","push","_jsx","Wrapper","children","_jsxs","StyledLayout","title","extra","Fragment","Button","onClick","elm","current","domToImage","height","offsetHeight","style","transform","offsetWidth","width","then","dataUrl","link","document","createElement","download","href","click","value","onChange","ev","target","langNames","map","keyname","index","console","log","Object","keys","themes","ref","CodeMirror"],"sourceRoot":""}