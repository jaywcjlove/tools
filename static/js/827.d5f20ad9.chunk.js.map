{"version":3,"file":"static/js/827.d5f20ad9.chunk.js","mappings":"wNASMA,GAAcC,EAAAA,EAAAA,IAAH,kPASHC,EAAAA,GAAAA,IAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,mDAKOD,EAAAA,GAAAA,MAAHE,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,4CAKA,SAASC,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAgBMC,EAAgBF,GAASF,EAC/B,OACEK,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACjB,EAAD,KACAiB,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAcC,MAAM,oBAAoBC,MAAOb,IAASU,EAAAA,EAAAA,KAACI,EAAAA,GAAD,CAAYd,MAAOA,IAA3ES,UACEC,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAUC,YAAY,EAAOC,SApBbC,SAAAA,GACpB,IAAMC,EAAOD,EAAIE,OAA+BpB,OAAS,GACzD,GAAImB,EACF,IACElB,EAASkB,GACT,IAAME,EAAMC,KAAKC,MAAMJ,GACvBhB,EAAUmB,KAAKE,UAAUH,EAAK,KAAM,IACpChB,EAAS,IACT,MAAOD,GACP,IAAIqB,EAAU,gBACVrB,aAAiBsB,QAAOD,EAAUrB,EAAMqB,SAC5CpB,EAASoB,UAWXf,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAcC,MAAM,SAASC,MAAOP,IAAiBI,EAAAA,EAAAA,KAACI,EAAAA,GAAD,CAAYd,MAAOM,IAAxEG,UACEC,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAUY,MAAOvB,EAAQ,CAAEwB,MAAO,OAAU,GAAIC,aAAcvB,EAAewB,UAAQ","sources":["../../packages/json-format/src/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton } from '@wcj/tools-react-components';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nexport interface ResultProps {\n  title?: string;\n  className?: string;\n}\n\nconst GlobalStyle = createGlobalStyle`\n  [data-color-mode*='dark'], [data-color-mode*='dark'] body {\n    --color-border-text-case: #30363d;\n  }\n  [data-color-mode*='light'], [data-color-mode*='light'] body {\n    --color-border-text-case: #d0d7de;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  padding-top: 16px;\n`;\n\nconst InputFile = styled.input`\n  width: 100%;\n  display: block;\n`;\n\nexport default function ImageToBase64() {\n  const [value, setValue] = useState('');\n  const [result, setResult] = useState('');\n  const [error, setError] = useState('');\n  const handleChange = (evn: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const str = (evn.target as HTMLTextAreaElement).value || '';\n    if (str) {\n      try {\n        setValue(str);\n        const obj = JSON.parse(str);\n        setResult(JSON.stringify(obj, null, 3));\n        setError('');\n      } catch (error) {\n        let message = 'Unknown Error';\n        if (error instanceof Error) message = error.message;\n        setError(message);\n      }\n    }\n  };\n  const resultOrError = error || result;\n  return (\n    <Wrapper>\n      <GlobalStyle />\n      <StyledLayout title=\"Input JSON String\" extra={value && <CopyButton value={value} />}>\n        <Textarea spellCheck={false} onChange={handleChange} />\n      </StyledLayout>\n      <StyledLayout title=\"Result\" extra={resultOrError && <CopyButton value={resultOrError} />}>\n        <Textarea style={error ? { color: 'red' } : {}} defaultValue={resultOrError} readOnly />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["GlobalStyle","createGlobalStyle","styled","_templateObject2","_templateObject3","ImageToBase64","useState","value","setValue","result","setResult","error","setError","resultOrError","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","CopyButton","Textarea","spellCheck","onChange","evn","str","target","obj","JSON","parse","stringify","message","Error","style","color","defaultValue","readOnly"],"sourceRoot":""}