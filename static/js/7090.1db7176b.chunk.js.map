{"version":3,"file":"static/js/7090.1db7176b.chunk.js","mappings":"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","sources":["../../node_modules/@codemirror/legacy-modes/mode/pug.js","../../node_modules/@codemirror/legacy-modes/mode/javascript.js"],"sourcesContent":["import {javascript} from \"./javascript.js\"\n\nvar ATTRS_NEST = {\n  '{': '}',\n  '(': ')',\n  '[': ']'\n}\n\nfunction defaultCopyState(state) {\n  if (typeof state != \"object\") return state\n  let newState = {}\n  for (let prop in state) {\n    let val = state[prop]\n    newState[prop] = val instanceof Array ? val.slice() : val\n  }\n  return newState\n}\n\nclass State {\n  constructor(indentUnit) {\n    this.indentUnit = indentUnit\n\n    this.javaScriptLine = false\n    this.javaScriptLineExcludesColon = false\n\n    this.javaScriptArguments = false\n    this.javaScriptArgumentsDepth = 0\n\n    this.isInterpolating = false\n    this.interpolationNesting = 0\n\n    this.jsState = javascript.startState(indentUnit)\n\n    this.restOfLine = ''\n\n    this.isIncludeFiltered = false\n    this.isEach = false\n\n    this.lastTag = ''\n\n    // Attributes Mode\n    this.isAttrs = false\n    this.attrsNest = []\n    this.inAttributeName = true\n    this.attributeIsType = false\n    this.attrValue = ''\n\n    // Indented Mode\n    this.indentOf = Infinity\n    this.indentToken = ''\n  }\n\n  copy() {\n    var res = new State(this.indentUnit)\n    res.javaScriptLine = this.javaScriptLine\n    res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon\n    res.javaScriptArguments = this.javaScriptArguments\n    res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth\n    res.isInterpolating = this.isInterpolating\n    res.interpolationNesting = this.interpolationNesting\n\n    res.jsState = (javascript.copyState || defaultCopyState)(this.jsState)\n\n    res.restOfLine = this.restOfLine\n\n    res.isIncludeFiltered = this.isIncludeFiltered\n    res.isEach = this.isEach\n    res.lastTag = this.lastTag\n    res.isAttrs = this.isAttrs\n    res.attrsNest = this.attrsNest.slice()\n    res.inAttributeName = this.inAttributeName\n    res.attributeIsType = this.attributeIsType\n    res.attrValue = this.attrValue\n    res.indentOf = this.indentOf\n    res.indentToken = this.indentToken\n\n    return res\n  }\n}\n\nfunction javaScript(stream, state) {\n  if (stream.sol()) {\n    // if javaScriptLine was set at end of line, ignore it\n    state.javaScriptLine = false\n    state.javaScriptLineExcludesColon = false\n  }\n  if (state.javaScriptLine) {\n    if (state.javaScriptLineExcludesColon && stream.peek() === ':') {\n      state.javaScriptLine = false\n      state.javaScriptLineExcludesColon = false\n      return\n    }\n    var tok = javascript.token(stream, state.jsState)\n    if (stream.eol()) state.javaScriptLine = false\n    return tok || true\n  }\n}\nfunction javaScriptArguments(stream, state) {\n  if (state.javaScriptArguments) {\n    if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== '(') {\n      state.javaScriptArguments = false\n      return\n    }\n    if (stream.peek() === '(') {\n      state.javaScriptArgumentsDepth++\n    } else if (stream.peek() === ')') {\n      state.javaScriptArgumentsDepth--\n    }\n    if (state.javaScriptArgumentsDepth === 0) {\n      state.javaScriptArguments = false\n      return\n    }\n\n    var tok = javascript.token(stream, state.jsState)\n    return tok || true\n  }\n}\n\nfunction yieldStatement(stream) {\n  if (stream.match(/^yield\\b/)) {\n    return 'keyword'\n  }\n}\n\nfunction doctype(stream) {\n  if (stream.match(/^(?:doctype) *([^\\n]+)?/)) return 'meta'\n}\n\nfunction interpolation(stream, state) {\n  if (stream.match('#{')) {\n    state.isInterpolating = true\n    state.interpolationNesting = 0\n    return 'punctuation'\n  }\n}\n\nfunction interpolationContinued(stream, state) {\n  if (state.isInterpolating) {\n    if (stream.peek() === '}') {\n      state.interpolationNesting--\n      if (state.interpolationNesting < 0) {\n        stream.next()\n        state.isInterpolating = false\n        return 'punctuation'\n      }\n    } else if (stream.peek() === '{') {\n      state.interpolationNesting++\n    }\n    return javascript.token(stream, state.jsState) || true\n  }\n}\n\nfunction caseStatement(stream, state) {\n  if (stream.match(/^case\\b/)) {\n    state.javaScriptLine = true\n    return 'keyword'\n  }\n}\n\nfunction when(stream, state) {\n  if (stream.match(/^when\\b/)) {\n    state.javaScriptLine = true\n    state.javaScriptLineExcludesColon = true\n    return 'keyword'\n  }\n}\n\nfunction defaultStatement(stream) {\n  if (stream.match(/^default\\b/)) {\n    return 'keyword'\n  }\n}\n\nfunction extendsStatement(stream, state) {\n  if (stream.match(/^extends?\\b/)) {\n    state.restOfLine = 'string'\n    return 'keyword'\n  }\n}\n\nfunction append(stream, state) {\n  if (stream.match(/^append\\b/)) {\n    state.restOfLine = 'variable'\n    return 'keyword'\n  }\n}\nfunction prepend(stream, state) {\n  if (stream.match(/^prepend\\b/)) {\n    state.restOfLine = 'variable'\n    return 'keyword'\n  }\n}\nfunction block(stream, state) {\n  if (stream.match(/^block\\b *(?:(prepend|append)\\b)?/)) {\n    state.restOfLine = 'variable'\n    return 'keyword'\n  }\n}\n\nfunction include(stream, state) {\n  if (stream.match(/^include\\b/)) {\n    state.restOfLine = 'string'\n    return 'keyword'\n  }\n}\n\nfunction includeFiltered(stream, state) {\n  if (stream.match(/^include:([a-zA-Z0-9\\-]+)/, false) && stream.match('include')) {\n    state.isIncludeFiltered = true\n    return 'keyword'\n  }\n}\n\nfunction includeFilteredContinued(stream, state) {\n  if (state.isIncludeFiltered) {\n    var tok = filter(stream, state)\n    state.isIncludeFiltered = false\n    state.restOfLine = 'string'\n    return tok\n  }\n}\n\nfunction mixin(stream, state) {\n  if (stream.match(/^mixin\\b/)) {\n    state.javaScriptLine = true\n    return 'keyword'\n  }\n}\n\nfunction call(stream, state) {\n  if (stream.match(/^\\+([-\\w]+)/)) {\n    if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n      state.javaScriptArguments = true\n      state.javaScriptArgumentsDepth = 0\n    }\n    return 'variable'\n  }\n  if (stream.match('+#{', false)) {\n    stream.next()\n    state.mixinCallAfter = true\n    return interpolation(stream, state)\n  }\n}\nfunction callArguments(stream, state) {\n  if (state.mixinCallAfter) {\n    state.mixinCallAfter = false\n    if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n      state.javaScriptArguments = true\n      state.javaScriptArgumentsDepth = 0\n    }\n    return true\n  }\n}\n\nfunction conditional(stream, state) {\n  if (stream.match(/^(if|unless|else if|else)\\b/)) {\n    state.javaScriptLine = true\n    return 'keyword'\n  }\n}\n\nfunction each(stream, state) {\n  if (stream.match(/^(- *)?(each|for)\\b/)) {\n    state.isEach = true\n    return 'keyword'\n  }\n}\nfunction eachContinued(stream, state) {\n  if (state.isEach) {\n    if (stream.match(/^ in\\b/)) {\n      state.javaScriptLine = true\n      state.isEach = false\n      return 'keyword'\n    } else if (stream.sol() || stream.eol()) {\n      state.isEach = false\n    } else if (stream.next()) {\n      while (!stream.match(/^ in\\b/, false) && stream.next()) {}\n      return 'variable'\n    }\n  }\n}\n\nfunction whileStatement(stream, state) {\n  if (stream.match(/^while\\b/)) {\n    state.javaScriptLine = true\n    return 'keyword'\n  }\n}\n\nfunction tag(stream, state) {\n  var captures\n  if (captures = stream.match(/^(\\w(?:[-:\\w]*\\w)?)\\/?/)) {\n    state.lastTag = captures[1].toLowerCase()\n    return 'tag'\n  }\n}\n\nfunction filter(stream, state) {\n  if (stream.match(/^:([\\w\\-]+)/)) {\n    setStringMode(stream, state)\n    return 'atom'\n  }\n}\n\nfunction code(stream, state) {\n  if (stream.match(/^(!?=|-)/)) {\n    state.javaScriptLine = true\n    return 'punctuation'\n  }\n}\n\nfunction id(stream) {\n  if (stream.match(/^#([\\w-]+)/)) {\n    return 'builtin'\n  }\n}\n\nfunction className(stream) {\n  if (stream.match(/^\\.([\\w-]+)/)) {\n    return 'className'\n  }\n}\n\nfunction attrs(stream, state) {\n  if (stream.peek() == '(') {\n    stream.next()\n    state.isAttrs = true\n    state.attrsNest = []\n    state.inAttributeName = true\n    state.attrValue = ''\n    state.attributeIsType = false\n    return 'punctuation'\n  }\n}\n\nfunction attrsContinued(stream, state) {\n  if (state.isAttrs) {\n    if (ATTRS_NEST[stream.peek()]) {\n      state.attrsNest.push(ATTRS_NEST[stream.peek()])\n    }\n    if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {\n      state.attrsNest.pop()\n    } else if (stream.eat(')')) {\n      state.isAttrs = false\n      return 'punctuation'\n    }\n    if (state.inAttributeName && stream.match(/^[^=,\\)!]+/)) {\n      if (stream.peek() === '=' || stream.peek() === '!') {\n        state.inAttributeName = false\n        state.jsState = javascript.startState(2)\n        if (state.lastTag === 'script' && stream.current().trim().toLowerCase() === 'type') {\n          state.attributeIsType = true\n        } else {\n          state.attributeIsType = false\n        }\n      }\n      return 'attribute'\n    }\n\n    var tok = javascript.token(stream, state.jsState)\n    if (state.attrsNest.length === 0 && (tok === 'string' || tok === 'variable' || tok === 'keyword')) {\n      try {\n        Function('', 'var x ' + state.attrValue.replace(/,\\s*$/, '').replace(/^!/, ''))\n        state.inAttributeName = true\n        state.attrValue = ''\n        stream.backUp(stream.current().length)\n        return attrsContinued(stream, state)\n      } catch (ex) {\n        //not the end of an attribute\n      }\n    }\n    state.attrValue += stream.current()\n    return tok || true\n  }\n}\n\nfunction attributesBlock(stream, state) {\n  if (stream.match(/^&attributes\\b/)) {\n    state.javaScriptArguments = true\n    state.javaScriptArgumentsDepth = 0\n    return 'keyword'\n  }\n}\n\nfunction indent(stream) {\n  if (stream.sol() && stream.eatSpace()) {\n    return 'indent'\n  }\n}\n\nfunction comment(stream, state) {\n  if (stream.match(/^ *\\/\\/(-)?([^\\n]*)/)) {\n    state.indentOf = stream.indentation()\n    state.indentToken = 'comment'\n    return 'comment'\n  }\n}\n\nfunction colon(stream) {\n  if (stream.match(/^: */)) {\n    return 'colon'\n  }\n}\n\nfunction text(stream, state) {\n  if (stream.match(/^(?:\\| ?| )([^\\n]+)/)) {\n    return 'string'\n  }\n  if (stream.match(/^(<[^\\n]*)/, false)) {\n    // html string\n    setStringMode(stream, state)\n    stream.skipToEnd()\n    return state.indentToken\n  }\n}\n\nfunction dot(stream, state) {\n  if (stream.eat('.')) {\n    setStringMode(stream, state)\n    return 'dot'\n  }\n}\n\nfunction fail(stream) {\n  stream.next()\n  return null\n}\n\n\nfunction setStringMode(stream, state) {\n  state.indentOf = stream.indentation()\n  state.indentToken = 'string'\n}\nfunction restOfLine(stream, state) {\n  if (stream.sol()) {\n    // if restOfLine was set at end of line, ignore it\n    state.restOfLine = ''\n  }\n  if (state.restOfLine) {\n    stream.skipToEnd()\n    var tok = state.restOfLine\n    state.restOfLine = ''\n    return tok\n  }\n}\n\n\nfunction startState(indentUnit) {\n  return new State(indentUnit)\n}\nfunction copyState(state) {\n  return state.copy()\n}\nfunction nextToken(stream, state) {\n  var tok = restOfLine(stream, state)\n      || interpolationContinued(stream, state)\n      || includeFilteredContinued(stream, state)\n      || eachContinued(stream, state)\n      || attrsContinued(stream, state)\n      || javaScript(stream, state)\n      || javaScriptArguments(stream, state)\n      || callArguments(stream, state)\n\n      || yieldStatement(stream)\n      || doctype(stream)\n      || interpolation(stream, state)\n      || caseStatement(stream, state)\n      || when(stream, state)\n      || defaultStatement(stream)\n      || extendsStatement(stream, state)\n      || append(stream, state)\n      || prepend(stream, state)\n      || block(stream, state)\n      || include(stream, state)\n      || includeFiltered(stream, state)\n      || mixin(stream, state)\n      || call(stream, state)\n      || conditional(stream, state)\n      || each(stream, state)\n      || whileStatement(stream, state)\n      || tag(stream, state)\n      || filter(stream, state)\n      || code(stream, state)\n      || id(stream)\n      || className(stream)\n      || attrs(stream, state)\n      || attributesBlock(stream, state)\n      || indent(stream)\n      || text(stream, state)\n      || comment(stream, state)\n      || colon(stream)\n      || dot(stream, state)\n      || fail(stream)\n\n  return tok === true ? null : tok\n}\n\nexport const pug = {\n  startState: startState,\n  copyState: copyState,\n  token: nextToken\n}\n","function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+#?[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({name: \"javascript\"})\nexport const json = mkJavaScript({name: \"json\", json: true})\nexport const jsonld = mkJavaScript({name: \"json\", jsonld: true})\nexport const typescript = mkJavaScript({name: \"typescript\", typescript: true})\n"],"names":["ATTRS_NEST","defaultCopyState","state","newState","prop","val","Array","slice","State","constructor","indentUnit","this","javaScriptLine","javaScriptLineExcludesColon","javaScriptArguments","javaScriptArgumentsDepth","isInterpolating","interpolationNesting","jsState","javascript","startState","restOfLine","isIncludeFiltered","isEach","lastTag","isAttrs","attrsNest","inAttributeName","attributeIsType","attrValue","indentOf","Infinity","indentToken","copy","res","copyState","interpolation","stream","match","filter","setStringMode","attrsContinued","peek","push","length","pop","eat","current","trim","toLowerCase","tok","token","Function","replace","backUp","ex","indentation","pug","sol","skipToEnd","next","interpolationContinued","includeFilteredContinued","eol","eachContinued","javaScript","mixinCallAfter","callArguments","yieldStatement","doctype","caseStatement","when","defaultStatement","extendsStatement","append","prepend","block","include","includeFiltered","mixin","call","conditional","each","whileStatement","captures","tag","code","id","className","attrs","attributesBlock","eatSpace","indent","text","comment","colon","dot","fail","mkJavaScript","parserConfig","type","content","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","quote","ch","tokenize","escaped","test","tokenComment","lastType","string","pos","expressionAllowed","inSet","readRegexp","tokenQuasi","eatWhile","start","lexical","word","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","apply","inList","list","register","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","parseJS","textAfter","top","firstChar","c","closing","unit","isContinuedStatement","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","brackets","wordChars"],"sourceRoot":""}