{"version":3,"file":"static/js/902.04ea1b9d.chunk.js","mappings":"yMAyBe,SAASA,EAAUC,GAChC,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAmCF,EAAAA,EAAAA,YAAnC,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAAc,SAACC,EAAkBC,QAA4B,IAA9CD,IAAAA,EAAc,IACjC,IACe,QAATC,GACFL,EAASI,GACTF,GAAaI,EAAAA,EAAAA,IAAUC,KAAKC,MAAMJ,MAChB,YAATC,IACTL,EAASO,KAAKD,WAAUE,EAAAA,EAAAA,IAAMJ,GAAM,KAAM,IAC1CF,EAAaE,IAEf,MAAOK,MAEX,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAM,OACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,CACGb,IAASc,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAYnB,MAAOA,KAC7Bc,EAAAA,EAAAA,KAACM,EAAAA,GAAD,CAAQC,QAAS,kBAAMjB,EAxChB,kOAwCwC,QAA/CS,SAAAA,cALNA,UASEC,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CACEC,YAAY,EACZvB,MAAOA,EACPwB,QAAUC,SAAAA,GAAD,OAASrB,EAAaqB,EAAIC,OAA+B1B,MAAO,aAG7Ec,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAO,OACPC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,CACGX,IAAcY,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAYnB,MAAOE,KAClCY,EAAAA,EAAAA,KAACM,EAAAA,GAAD,CAAQC,QAAS,kBAAMjB,EA5ChB,kKA4CwC,YAA/CS,SAAAA,cALNA,UASEC,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CACEC,YAAY,EACZvB,MAAOE,EACPsB,QAAUC,SAAAA,GAAD,OAASrB,EAAaqB,EAAIC,OAA+B1B,MAAO","sources":["../../packages/json-yaml/src/index.tsx"],"sourcesContent":["import { Fragment, useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, Button } from '@wcj/tools-react-components';\nimport { parse, stringify } from 'yaml';\n\nexport interface URLEncodeProps {}\n\nconst sampleJSON = `{\n  \"YAML\": [\n    \"A human-readable data serialization language\",\n    \"https://en.wikipedia.org/wiki/YAML\"\n  ],\n  \"yaml\": [\n    \"A complete JavaScript implementation\",\n    \"https://www.npmjs.com/package/yaml\"\n  ]\n}`;\n\nconst sampleYAML = `%YAML 1.2\n---\nYAML: YAML Ain't Markup Languageâ„¢\n\nWhat It Is:\n  YAML is a human-friendly data serialization\n  language for all programming languages.`;\n\nexport default function URLEncode(props: URLEncodeProps) {\n  const [value, setValue] = useState<string>();\n  const [encodedUrl, setEncodeUrl] = useState<string>();\n  const handleInput = (val: string = '', type: 'raw' | 'encoded') => {\n    try {\n      if (type === 'raw') {\n        setValue(val);\n        setEncodeUrl(stringify(JSON.parse(val)));\n      } else if (type === 'encoded') {\n        setValue(JSON.stringify(parse(val), null, 2));\n        setEncodeUrl(val);\n      }\n    } catch (error) {}\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"JSON\"\n        extra={\n          <Fragment>\n            {value && <CopyButton value={value} />}\n            <Button onClick={() => handleInput(sampleJSON, 'raw')}>Sample</Button>\n          </Fragment>\n        }\n      >\n        <Textarea\n          spellCheck={false}\n          value={value}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value, 'raw')}\n        />\n      </StyledLayout>\n      <StyledLayout\n        title={'YAML'}\n        extra={\n          <Fragment>\n            {encodedUrl && <CopyButton value={encodedUrl} />}\n            <Button onClick={() => handleInput(sampleYAML, 'encoded')}>Sample</Button>\n          </Fragment>\n        }\n      >\n        <Textarea\n          spellCheck={false}\n          value={encodedUrl}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value, 'encoded')}\n        />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["URLEncode","props","useState","value","setValue","encodedUrl","setEncodeUrl","handleInput","val","type","stringify","JSON","parse","error","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","Textarea","spellCheck","onInput","evn","target"],"sourceRoot":""}