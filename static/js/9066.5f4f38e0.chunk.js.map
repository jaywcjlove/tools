{"version":3,"file":"static/js/9066.5f4f38e0.chunk.js","mappings":"sMAGMA,EAAS,qCAMA,SAASC,EAAUC,GAChC,IAAQC,EAAkBD,EAAlBC,cACR,GAAsBC,EAAAA,EAAAA,YAAkB,eAAjCC,EAAG,KAAEC,EAAM,KAClB,GAAmCF,EAAAA,EAAAA,YAAkB,eAA9CG,EAAU,KAAEC,EAAY,KAC/B,GAAwBJ,EAAAA,EAAAA,UAA4B,OAAM,eAAnDK,EAAI,KAAEC,EAAO,KACdC,EAAc,SAACC,QAAa,IAAbA,IAAAA,EAAgB,IACtB,QAATH,GACFH,EAAOM,GACPJ,EAAaK,mBAAmBD,KACd,YAATH,IACTH,EAAOQ,mBAAmBF,IAC1BJ,EAAaI,GAEjB,EACA,OACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAM,MACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,CACNZ,IAAOa,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACX,MAAOP,KAC3Ba,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CACLC,QAAS,WACPnB,EAAON,GACPW,EAAYX,EACd,EAAEiB,SAAAA,cAKPA,UAEDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAQ,CACPC,YAAY,EACZf,MAAOP,EACPuB,QAAS,kBAAMlB,EAAQ,MAAO,EAC9BmB,QAAUC,SAAAA,GAAG,OAAKnB,EAAamB,EAAIC,OAA+BnB,MAAK,OAG3EM,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACC,MAAOjB,GAAiB,cAAekB,MAAOd,IAAcW,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACX,MAAOL,IAAeU,UAC1GC,EAAAA,EAAAA,KAACQ,EAAAA,GAAQ,CACPC,YAAY,EACZf,MAAOL,EACPqB,QAAS,kBAAMlB,EAAQ,UAAW,EAClCmB,QAAUC,SAAAA,GAAG,OAAKnB,EAAamB,EAAIC,OAA+BnB,MAAK,QAKjF,C","sources":["../../packages/url-encode/src/index.tsx"],"sourcesContent":["import { useState, Fragment } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, Button } from '@wcj/tools-react-components';\n\nconst sample = `https://jaywcjlove.github.io/tools`;\n\nexport interface URLEncodeProps {\n  locEncodedURL?: string;\n}\n\nexport default function URLEncode(props: URLEncodeProps) {\n  const { locEncodedURL } = props;\n  const [url, setUrl] = useState<string>();\n  const [encodedUrl, setEncodeUrl] = useState<string>();\n  const [type, setType] = useState<'raw' | 'encoded'>('raw');\n  const handleInput = (value: string = '') => {\n    if (type === 'raw') {\n      setUrl(value);\n      setEncodeUrl(encodeURIComponent(value));\n    } else if (type === 'encoded') {\n      setUrl(decodeURIComponent(value));\n      setEncodeUrl(value);\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"URL\"\n        extra={\n          <Fragment>\n            {url && <CopyButton value={url} />}\n            <Button\n              onClick={() => {\n                setUrl(sample);\n                handleInput(sample);\n              }}\n            >\n              Sample\n            </Button>\n          </Fragment>\n        }\n      >\n        <Textarea\n          spellCheck={false}\n          value={url}\n          onFocus={() => setType('raw')}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n      <StyledLayout title={locEncodedURL || 'Encoded URL'} extra={encodedUrl && <CopyButton value={encodedUrl} />}>\n        <Textarea\n          spellCheck={false}\n          value={encodedUrl}\n          onFocus={() => setType('encoded')}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["sample","URLEncode","props","locEncodedURL","useState","url","setUrl","encodedUrl","setEncodeUrl","type","setType","handleInput","value","encodeURIComponent","decodeURIComponent","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","Textarea","spellCheck","onFocus","onInput","evn","target"],"sourceRoot":""}