{"version":3,"file":"static/js/3808.1f94c46a.chunk.js","mappings":"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","sources":["../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/strnum/strnum.js"],"sourcesContent":["'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n"],"names":["validator","require","XMLParser","XMLBuilder","module","exports","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","msg","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","Builder","this","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","replaceEntitiesValue","buildAttrPairStr","object","level","j2x","tagEndExp","piClosingChar","textValue","entity","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","Date","attr","newval","arrLen","j","item","Ks","L","arrToStr","arr","jPath","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","newIdentation","attStr","attr_to_str","tagStart","tagValue","endsWith","includes","tempInd","piTextNodeName","tagText","isStopNode","attrMap","attrVal","lastIndexOf","jArray","entityRegex","parseEntityExp","exp","regx","Error","hasBody","comment","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","buildOptions","xmlNode","readDocType","toNumber","OrderedObjParser","currentNode","tagsNodeStack","docTypeEntities","lastEntities","ampEntity","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","readStopNodeData","saveTextToParentTag","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","prefix","charAt","attrsRegx","attrs","oldVal","aName","newVal","attrCollection","xmlObj","textData","closeIndex","findClosingIndex","colonIndex","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","lastTag","tagContent","child","entityName","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","attrBoundary","closingChar","ch","data","str","errMsg","closingIndex","separatorIndex","search","openTagCount","shouldParse","prettify","validationOption","toString","orderedObjParser","orderedResult","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","XmlNode","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","eNotation","trimZeros","numStr","trimmedStr","skipLike","test","sign","numTrimmedByZeros","num"],"sourceRoot":""}