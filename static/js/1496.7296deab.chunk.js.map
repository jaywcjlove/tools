{"version":3,"file":"static/js/1496.7296deab.chunk.js","mappings":"sVAWO,MAAMA,EAAU,CACrBC,SAOF,SAA2BC,GACzB,MAAMC,EAAeD,EAAQE,QAC3BC,KAAKC,OAAOC,WAAWC,gBASzB,SAAoCC,GAClC,GAAa,OAATA,EAEF,YADAP,EAAQQ,QAAQD,GAMlB,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAASC,EAAc,aAC7C,IAGA,SAA0BM,GAExB,OADAP,EAAQS,MAAM,aACPG,EAAUL,EACnB,IAnBA,IAAIM,EACJ,OAAOZ,EAqBP,SAASW,EAAUL,GACjB,MAAMO,EAAQd,EAAQS,MAAM,YAAa,CACvCM,YAAa,OACbF,aAMF,OAJIA,IACFA,EAASG,KAAOF,GAElBD,EAAWC,EACJG,EAAKV,EACd,CAGA,SAASU,EAAKV,GACZ,OAAa,OAATA,GACFP,EAAQU,KAAK,aACbV,EAAQU,KAAK,kBACbV,EAAQQ,QAAQD,KAGdW,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,aACNE,IAITZ,EAAQQ,QAAQD,GACTU,EACT,CACF,G,eC1DO,MAAME,EAAW,CACtBpB,SAYF,SAA4BC,GAC1B,MAAMoB,EAAOjB,KAEPkB,EAAQ,GACd,IAEIC,EAEAC,EAEAC,EANAC,EAAY,EAOhB,OAAOC,EAGP,SAASA,EAAMnB,GAWb,GAAIkB,EAAYJ,EAAMM,OAAQ,CAC5B,MAAMC,EAAOP,EAAMI,GAEnB,OADAL,EAAKS,eAAiBD,EAAK,GACpB5B,EAAQE,QACb0B,EAAK,GAAGE,aACRC,EACAC,EAHKhC,CAILO,EACJ,CAGA,OAAOyB,EAAmBzB,EAC5B,CAGA,SAASwB,EAAiBxB,GAMxB,GALAkB,IAKIL,EAAKS,eAAeI,WAAY,CAClCb,EAAKS,eAAeI,gBAAaC,EAC7BZ,GACFa,IAKF,MAAMC,EAAmBhB,EAAKiB,OAAOV,OACrC,IAEIW,EAFAC,EAAkBH,EAKtB,KAAOG,KACL,GACsC,SAApCnB,EAAKiB,OAAOE,GAAiB,IACY,cAAzCnB,EAAKiB,OAAOE,GAAiB,GAAGC,KAChC,CACAF,EAAQlB,EAAKiB,OAAOE,GAAiB,GAAGE,IACxC,KACF,CAEFC,EAAejB,GAGf,IAAIkB,EAAQP,EACZ,KAAOO,EAAQvB,EAAKiB,OAAOV,QACzBP,EAAKiB,OAAOM,GAAO,GAAGF,IAAMG,OAAOC,OAAO,CAAC,EAAGP,GAC9CK,IAaF,OATAG,EAAAA,EAAAA,GACE1B,EAAKiB,OACLE,EAAkB,EAClB,EACAnB,EAAKiB,OAAOU,MAAMX,IAIpBhB,EAAKiB,OAAOV,OAASgB,EACdX,EAAmBzB,EAC5B,CACA,OAAOmB,EAAMnB,EACf,CAGA,SAASyB,EAAmBzB,GAM1B,GAAIkB,IAAcJ,EAAMM,OAAQ,CAI9B,IAAKL,EACH,OAAO0B,EAAkBzC,GAM3B,GAAIe,EAAU2B,kBAAoB3B,EAAU2B,iBAAiBC,SAC3D,OAAOC,EAAU5C,GAQnBa,EAAKgC,UAAYC,QACf/B,EAAU2B,mBAAqB3B,EAAUgC,8BAE7C,CAIA,OADAlC,EAAKS,eAAiB,CAAC,EAChB7B,EAAQuD,MACbC,EACAC,EACAC,EAHK1D,CAILO,EACJ,CAGA,SAASkD,EAAqBlD,GAG5B,OAFIe,GAAWa,IACfO,EAAejB,GACRuB,EAAkBzC,EAC3B,CAGA,SAASmD,EAAsBnD,GAG7B,OAFAa,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,MAAQpC,IAAcJ,EAAMM,OACxDH,EAAkBJ,EAAKwC,MAAME,OACtBX,EAAU5C,EACnB,CAGA,SAASyC,EAAkBzC,GAGzB,OADAa,EAAKS,eAAiB,CAAC,EAChB7B,EAAQE,QACbsD,EACAO,EACAZ,EAHKnD,CAILO,EACJ,CAGA,SAASwD,EAAkBxD,GAIzB,OAHAkB,IACAJ,EAAM2C,KAAK,CAAC5C,EAAK6B,iBAAkB7B,EAAKS,iBAEjCmB,EAAkBzC,EAC3B,CAGA,SAAS4C,EAAU5C,GACjB,OAAa,OAATA,GACEe,GAAWa,IACfO,EAAe,QACf1C,EAAQQ,QAAQD,KAGlBe,EAAYA,GAAaF,EAAKhB,OAAO6D,KAAK7C,EAAKwC,OAC/C5D,EAAQS,MAAM,YAAa,CACzBM,YAAa,OACbF,SAAUU,EACV2C,WAAY5C,IAEP6C,EAAa5D,GACtB,CAGA,SAAS4D,EAAa5D,GACpB,OAAa,OAATA,GACF6D,EAAapE,EAAQU,KAAK,cAAc,GACxCgC,EAAe,QACf1C,EAAQQ,QAAQD,KAGdW,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQQ,QAAQD,GAChB6D,EAAapE,EAAQU,KAAK,cAE1Be,EAAY,EACZL,EAAKgC,eAAYlB,EACVR,IAET1B,EAAQQ,QAAQD,GACT4D,EACT,CAOA,SAASC,EAAatD,EAAOuD,GAC3B,MAAMC,EAASlD,EAAKmD,YAAYzD,GAyChC,GAxCIuD,GAAKC,EAAON,KAAK,MACrBlD,EAAMD,SAAWU,EACbA,IAAYA,EAAWP,KAAOF,GAClCS,EAAaT,EACbQ,EAAUkD,WAAW1D,EAAMY,OAC3BJ,EAAUmD,MAAMH,GAmCZlD,EAAKhB,OAAOuD,KAAK7C,EAAMY,MAAMmC,MAAO,CACtC,IAAIlB,EAAQrB,EAAUe,OAAOV,OAC7B,KAAOgB,KACL,GAEErB,EAAUe,OAAOM,GAAO,GAAGjB,MAAMoC,OAAStC,KAExCF,EAAUe,OAAOM,GAAO,GAAGF,KAE3BnB,EAAUe,OAAOM,GAAO,GAAGF,IAAIqB,OAAStC,GAI1C,OAMJ,MAAMY,EAAmBhB,EAAKiB,OAAOV,OACrC,IAEI+C,EAEApC,EAJAC,EAAkBH,EAOtB,KAAOG,KACL,GACsC,SAApCnB,EAAKiB,OAAOE,GAAiB,IACY,cAAzCnB,EAAKiB,OAAOE,GAAiB,GAAGC,KAChC,CACA,GAAIkC,EAAM,CACRpC,EAAQlB,EAAKiB,OAAOE,GAAiB,GAAGE,IACxC,KACF,CACAiC,GAAO,CACT,CAMF,IAJAhC,EAAejB,GAGfkB,EAAQP,EACDO,EAAQvB,EAAKiB,OAAOV,QACzBP,EAAKiB,OAAOM,GAAO,GAAGF,IAAMG,OAAOC,OAAO,CAAC,EAAGP,GAC9CK,KAIFG,EAAAA,EAAAA,GACE1B,EAAKiB,OACLE,EAAkB,EAClB,EACAnB,EAAKiB,OAAOU,MAAMX,IAIpBhB,EAAKiB,OAAOV,OAASgB,CACvB,CACF,CAMA,SAASD,EAAeiC,GACtB,IAAIhC,EAAQtB,EAAMM,OAGlB,KAAOgB,KAAUgC,GAAM,CACrB,MAAMC,EAAQvD,EAAMsB,GACpBvB,EAAKS,eAAiB+C,EAAM,GAC5BA,EAAM,GAAGlE,KAAKmE,KAAKzD,EAAMpB,EAC3B,CACAqB,EAAMM,OAASgD,CACjB,CACA,SAASxC,IACPb,EAAUmD,MAAM,CAAC,OACjBlD,OAAaW,EACbZ,OAAYY,EACZd,EAAKS,eAAeI,gBAAaC,CACnC,CACF,GArVMsB,EAAqB,CACzBzD,SA0VF,SAA2BC,EAAS8E,EAAIC,GAGtC,OAAOpE,EAAAA,EAAAA,GACLX,EACAA,EAAQE,QAAQC,KAAKC,OAAOC,WAAWc,SAAU2D,EAAIC,GACrD,aACA5E,KAAKC,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBAAkBhD,EAAY,EAE/E,G,eC9WO,SAASiD,EAAY9C,GAE1B,MAAM+C,EAAQ,CAAC,EACf,IAEIC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAdAhD,GAAS,EAeb,OAASA,EAAQN,EAAOV,QAAQ,CAC9B,KAAOgB,KAASyC,GACdzC,EAAQyC,EAAMzC,GAMhB,GAJA0C,EAAQhD,EAAOM,GAKbA,GACkB,cAAlB0C,EAAM,GAAG7C,MACqB,mBAA9BH,EAAOM,EAAQ,GAAG,GAAGH,OAErBkD,EAAYL,EAAM,GAAGnB,WAAW7B,OAChCkD,EAAa,EAEXA,EAAaG,EAAU/D,QACW,oBAAlC+D,EAAUH,GAAY,GAAG/C,OAEzB+C,GAAc,GAGdA,EAAaG,EAAU/D,QACW,YAAlC+D,EAAUH,GAAY,GAAG/C,MAEzB,OAAS+C,EAAaG,EAAU/D,QACQ,YAAlC+D,EAAUH,GAAY,GAAG/C,MAGS,cAAlCkD,EAAUH,GAAY,GAAG/C,OAC3BkD,EAAUH,GAAY,GAAGK,6BAA8B,EACvDL,KAOR,GAAiB,UAAbF,EAAM,GACJA,EAAM,GAAGtE,cACX6B,OAAOC,OAAOuC,EAAOS,EAAWxD,EAAQM,IACxCA,EAAQyC,EAAMzC,GACdgD,GAAO,QAIN,GAAIN,EAAM,GAAGS,WAAY,CAG5B,IAFAP,EAAa5C,EACb2C,OAAYpD,EACLqD,MACLC,EAAanD,EAAOkD,GAEK,eAAvBC,EAAW,GAAGhD,MACS,oBAAvBgD,EAAW,GAAGhD,OAEQ,UAAlBgD,EAAW,KACTF,IACFjD,EAAOiD,GAAW,GAAG9C,KAAO,mBAE9BgD,EAAW,GAAGhD,KAAO,aACrB8C,EAAYC,GAMdD,IAEFD,EAAM,GAAG5C,IAAMG,OAAOC,OAAO,CAAC,EAAGR,EAAOiD,GAAW,GAAG5D,OAGtD+D,EAAapD,EAAOU,MAAMuC,EAAW3C,GACrC8C,EAAWM,QAAQV,IACnBvC,EAAAA,EAAAA,GAAOT,EAAQiD,EAAW3C,EAAQ2C,EAAY,EAAGG,GAErD,CACF,CACA,OAAQE,CACV,CASA,SAASE,EAAWxD,EAAQ2D,GAC1B,MAAMlF,EAAQuB,EAAO2D,GAAY,GAC3BC,EAAU5D,EAAO2D,GAAY,GACnC,IAAIE,EAAgBF,EAAa,EAEjC,MAAMG,EAAiB,GACjBC,EACJtF,EAAMoD,YAAc+B,EAAQ7F,OAAOU,EAAMC,aAAaD,EAAMY,OACxD2E,EAAcD,EAAU/D,OAExB+C,EAAQ,GAERkB,EAAO,CAAC,EAEd,IAAIhC,EAEAzD,EACA8B,GAAS,EAET4D,EAAUzF,EACV0F,EAAS,EACT9E,EAAQ,EACZ,MAAM+E,EAAS,CAAC/E,GAIhB,KAAO6E,GAAS,CAEd,KAAOlE,IAAS6D,GAAe,KAAOK,IAGtCJ,EAAenC,KAAKkC,GACfK,EAAQrC,aACXI,EAAS2B,EAAQ1B,YAAYgC,GACxBA,EAAQvF,MACXsD,EAAON,KAAK,MAEVnD,GACFuF,EAAU5B,WAAW+B,EAAQ7E,OAE3B6E,EAAQX,8BACVQ,EAAUM,oCAAqC,GAEjDN,EAAU3B,MAAMH,GACZiC,EAAQX,8BACVQ,EAAUM,wCAAqCxE,IAKnDrB,EAAW0F,EACXA,EAAUA,EAAQvF,IACpB,CAKA,IADAuF,EAAUzF,IACD6B,EAAQ0D,EAAY1E,QAGC,SAA1B0E,EAAY1D,GAAO,IACW,UAA9B0D,EAAY1D,EAAQ,GAAG,IACvB0D,EAAY1D,GAAO,GAAGH,OAAS6D,EAAY1D,EAAQ,GAAG,GAAGH,MACzD6D,EAAY1D,GAAO,GAAGjB,MAAMmC,OAASwC,EAAY1D,GAAO,GAAGF,IAAIoB,OAE/DnC,EAAQiB,EAAQ,EAChB8D,EAAOzC,KAAKtC,GAEZ6E,EAAQrC,gBAAahC,EACrBqE,EAAQ1F,cAAWqB,EACnBqE,EAAUA,EAAQvF,MAqBtB,IAhBAoF,EAAU/D,OAAS,GAKfkE,GAEFA,EAAQrC,gBAAahC,EACrBqE,EAAQ1F,cAAWqB,GAEnBuE,EAAOE,MAKThE,EAAQ8D,EAAO9E,OACRgB,KAAS,CACd,MAAMI,EAAQsD,EAAYtD,MAAM0D,EAAO9D,GAAQ8D,EAAO9D,EAAQ,IACxDjB,EAAQyE,EAAeQ,MAC7BvB,EAAMW,QAAQ,CAACrE,EAAOA,EAAQqB,EAAMpB,OAAS,KAC7CmB,EAAAA,EAAAA,GAAOT,EAAQX,EAAO,EAAGqB,EAC3B,CAEA,IADAJ,GAAS,IACAA,EAAQyC,EAAMzD,QACrB2E,EAAKE,EAASpB,EAAMzC,GAAO,IAAM6D,EAASpB,EAAMzC,GAAO,GACvD6D,GAAUpB,EAAMzC,GAAO,GAAKyC,EAAMzC,GAAO,GAAK,EAEhD,OAAO2D,CACT,CC/MO,MAAMxG,EAAU,CACrBC,SAyBF,SAAyBC,EAAS8E,GAEhC,IAAIjE,EACJ,OAYA,SAAoBN,GAKlB,OAJAP,EAAQS,MAAM,WACdI,EAAWb,EAAQS,MAAM,eAAgB,CACvCM,YAAa,YAER6F,EAAYrG,EACrB,EAYA,SAASqG,EAAYrG,GACnB,OAAa,OAATA,EACKsG,EAAWtG,IAKhBW,EAAAA,EAAAA,IAAmBX,GACdP,EAAQuD,MACbuD,EACAC,EACAF,EAHK7G,CAILO,IAIJP,EAAQQ,QAAQD,GACTqG,EACT,CAOA,SAASC,EAAWtG,GAGlB,OAFAP,EAAQU,KAAK,gBACbV,EAAQU,KAAK,WACNoE,EAAGvE,EACZ,CAOA,SAASwG,EAAgBxG,GAQvB,OAPAP,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,gBACbG,EAASG,KAAOhB,EAAQS,MAAM,eAAgB,CAC5CM,YAAa,UACbF,aAEFA,EAAWA,EAASG,KACb4F,CACT,CACF,EAvGEI,QAeF,SAAwB3E,GAEtB,OADA8C,EAAY9C,GACLA,CACT,GAdMyE,EAAwB,CAC5B/G,SAwGF,SAA8BC,EAAS8E,EAAIC,GACzC,MAAM3D,EAAOjB,KACb,OAOA,SAAwBI,GAKtB,OAJAP,EAAQU,KAAK,gBACbV,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAASiH,EAAU,aACzC,EAOA,SAASA,EAAS1G,GAChB,GAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GACtC,OAAOwE,EAAIxE,GAKb,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,OACGP,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,iBAC9CgC,GACiB,eAAjBA,EAAK,GAAG1E,MACR0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,QAAU,EAEzCmD,EAAGvE,GAELP,EAAQoD,UAAUhC,EAAKhB,OAAOC,WAAW4D,KAAMc,EAAKD,EAApD9E,CAAwDO,EACjE,CACF,EA/IE6G,SAAS,GCbJ,MAAMnD,EAAO,CAClBlE,SAOF,SAAwBC,GACtB,MAAMoB,EAAOjB,KACPkH,EAAUrH,EAAQE,QAEtBoH,EAAAA,GAoBF,SAAuB/G,GACrB,GAAa,OAATA,EAEF,YADAP,EAAQQ,QAAQD,GAOlB,OAJAP,EAAQS,MAAM,mBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,mBACbU,EAAK6B,sBAAmBf,EACjBmF,CACT,GA3BErH,EAAQE,QACNC,KAAKC,OAAOC,WAAWkH,YACvBC,GACA7G,EAAAA,EAAAA,GACEX,EACAA,EAAQE,QACNC,KAAKC,OAAOC,WAAW4D,KACvBuD,EACAxH,EAAQE,QAAQJ,EAAS0H,IAE3B,gBAIN,OAAOH,EAgBP,SAASG,EAAejH,GACtB,GAAa,OAATA,EAQJ,OAJAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACbU,EAAK6B,sBAAmBf,EACjBmF,EAPLrH,EAAQQ,QAAQD,EAQpB,CACF,GC1DO,MAAMkH,EAAW,CACtBC,WAAYC,KAEDC,EAASC,EAAkB,UAC3BC,EAAOD,EAAkB,QAMtC,SAASA,EAAkBE,GACzB,MAAO,CACLhI,SAUF,SAAwBC,GACtB,MAAMoB,EAAOjB,KACPE,EAAaF,KAAKC,OAAOC,WAAW0H,GACpCD,EAAO9H,EAAQE,QAAQG,EAAYqB,EAAOsG,GAChD,OAAOtG,EAGP,SAASA,EAAMnB,GACb,OAAO0H,EAAQ1H,GAAQuH,EAAKvH,GAAQyH,EAAQzH,EAC9C,CAGA,SAASyH,EAAQzH,GACf,GAAa,OAATA,EAMJ,OAFAP,EAAQS,MAAM,QACdT,EAAQQ,QAAQD,GACTU,EALLjB,EAAQQ,QAAQD,EAMpB,CAGA,SAASU,EAAKV,GACZ,OAAI0H,EAAQ1H,IACVP,EAAQU,KAAK,QACNoH,EAAKvH,KAIdP,EAAQQ,QAAQD,GACTU,EACT,CAMA,SAASgH,EAAQ1H,GACf,GAAa,OAATA,EACF,OAAO,EAET,MAAM2H,EAAO7H,EAAWE,GACxB,IAAIoC,GAAS,EACb,GAAIuF,EAGF,OAASvF,EAAQuF,EAAKvG,QAAQ,CAC5B,MAAMC,EAAOsG,EAAKvF,GAClB,IAAKf,EAAKf,UAAYe,EAAKf,SAASgE,KAAKzD,EAAMA,EAAKP,UAClD,OAAO,CAEX,CAEF,OAAO,CACT,CACF,EAjEE6G,WAAYC,EACA,SAAVI,EAAmBI,OAAyBjG,GAiElD,CAMA,SAASyF,EAAeS,GACtB,OAGA,SAAwB/F,EAAQ4D,GAC9B,IAEIxF,EAFAkC,GAAS,EAMb,OAASA,GAASN,EAAOV,aACTO,IAAVzB,EACE4B,EAAOM,IAAoC,SAA1BN,EAAOM,GAAO,GAAGH,OACpC/B,EAAQkC,EACRA,KAEQN,EAAOM,IAAoC,SAA1BN,EAAOM,GAAO,GAAGH,OAExCG,IAAUlC,EAAQ,IACpB4B,EAAO5B,GAAO,GAAGgC,IAAMJ,EAAOM,EAAQ,GAAG,GAAGF,IAC5CJ,EAAOS,OAAOrC,EAAQ,EAAGkC,EAAQlC,EAAQ,GACzCkC,EAAQlC,EAAQ,GAElBA,OAAQyB,GAGZ,OAAOkG,EAAgBA,EAAc/F,EAAQ4D,GAAW5D,CAC1D,CACF,CAaA,SAAS8F,EAAuB9F,EAAQ4D,GACtC,IAAID,EAAa,EAEjB,OAASA,GAAc3D,EAAOV,QAC5B,IACGqE,IAAe3D,EAAOV,QACU,eAA/BU,EAAO2D,GAAY,GAAGxD,OACW,SAAnCH,EAAO2D,EAAa,GAAG,GAAGxD,KAC1B,CACA,MAAMvB,EAAOoB,EAAO2D,EAAa,GAAG,GAC9BqC,EAASpC,EAAQ1B,YAAYtD,GACnC,IAIIqH,EAJA3F,EAAQ0F,EAAO1G,OACf4G,GAAe,EACf5D,EAAO,EAGX,KAAOhC,KAAS,CACd,MAAM6F,EAAQH,EAAO1F,GACrB,GAAqB,kBAAV6F,EAAoB,CAE7B,IADAD,EAAcC,EAAM7G,OACyB,KAAtC6G,EAAMC,WAAWF,EAAc,IACpC5D,IACA4D,IAEF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MAEK,IAAe,IAAXC,EACPF,GAAO,EACP3D,SACK,IAAe,IAAX6D,EAEJ,CAEL7F,IACA,KACF,CACF,CACA,GAAIgC,EAAM,CACR,MAAM7D,EAAQ,CACZ0B,KACEwD,IAAe3D,EAAOV,QAAU2G,GAAQ3D,EAAO,EAC3C,aACA,oBACNjD,MAAO,CACLmC,KAAM5C,EAAKwB,IAAIoB,KACf6E,OAAQzH,EAAKwB,IAAIiG,OAAS/D,EAC1Bb,OAAQ7C,EAAKwB,IAAIqB,OAASa,EAC1BgE,OAAQ1H,EAAKS,MAAMiH,OAAShG,EAC5BiG,aAAcjG,EACV4F,EACAtH,EAAKS,MAAMkH,aAAeL,GAEhC9F,IAAKG,OAAOC,OAAO,CAAC,EAAG5B,EAAKwB,MAE9BxB,EAAKwB,IAAMG,OAAOC,OAAO,CAAC,EAAG/B,EAAMY,OAC/BT,EAAKS,MAAMoC,SAAW7C,EAAKwB,IAAIqB,OACjClB,OAAOC,OAAO5B,EAAMH,IAEpBuB,EAAOS,OACLkD,EACA,EACA,CAAC,QAASlF,EAAOmF,GACjB,CAAC,OAAQnF,EAAOmF,IAElBD,GAAc,EAElB,CACAA,GACF,CAEF,OAAO3D,CACT,C,eClKO,SAASwG,EAAgBzI,EAAQ0I,EAAYC,GAElD,IAAIzG,EAAQM,OAAOC,OACjBkG,EACInG,OAAOC,OAAO,CAAC,EAAGkG,GAClB,CACElF,KAAM,EACN6E,OAAQ,EACR5E,OAAQ,GAEd,CACE6E,OAAQ,EACRC,cAAe,IAInB,MAAMI,EAAc,CAAC,EAEfC,EAAuB,GAE7B,IAAIZ,EAAS,GAEThH,EAAQ,GAER6H,GAAW,EAOf,MAAMlJ,EAAU,CACdQ,QAkJF,SAAiBD,IACXW,EAAAA,EAAAA,IAAmBX,IACrB+B,EAAMuB,OACNvB,EAAMoG,OAAS,EACfpG,EAAMwB,SAAoB,IAAVvD,EAAc,EAAI,EAClC4I,MACmB,IAAV5I,IACT+B,EAAMoG,SACNpG,EAAMwB,UAIJxB,EAAMsG,aAAe,EACvBtG,EAAMqG,UAENrG,EAAMsG,eAKFtG,EAAMsG,eAAiBP,EAAO/F,EAAMqG,QAAQhH,SAC9CW,EAAMsG,cAAgB,EACtBtG,EAAMqG,WAKV1C,EAAQpF,SAAWN,EAGnB2I,GAAW,CACb,EAhLEzI,MAmLF,SAAe+B,EAAM4G,GAGnB,MAAMtI,EAAQsI,GAAU,CAAC,EAKzB,OAJAtI,EAAM0B,KAAOA,EACb1B,EAAMY,MAAQkC,IACdqC,EAAQ5D,OAAO2B,KAAK,CAAC,QAASlD,EAAOmF,IACrC5E,EAAM2C,KAAKlD,GACJA,CACT,EA3LEJ,KA8LF,SAAc8B,GACZ,MAAM1B,EAAQO,EAAMsF,MAGpB,OAFA7F,EAAM2B,IAAMmB,IACZqC,EAAQ5D,OAAO2B,KAAK,CAAC,OAAQlD,EAAOmF,IAC7BnF,CACT,EAlMEZ,QAASmJ,GAyMX,SAA+BC,EAAWC,GACxCC,EAAUF,EAAWC,EAAKR,KAC5B,IA1MExF,MAAO8F,EAAiBI,GACxBrG,UAAWiG,EAAiBI,EAAmB,CAC7CrG,WAAW,KAST6C,EAAU,CACdpF,SAAU,KACVN,KAAM,KACNsB,eAAgB,CAAC,EACjBQ,OAAQ,GACRjC,SACAmE,cACA4C,eA6CF,SAAwBrG,EAAO4I,GAC7B,OAsYJ,SAAyBrB,EAAQqB,GAC/B,IAAI/G,GAAS,EAEb,MAAMgH,EAAS,GAEf,IAAIC,EACJ,OAASjH,EAAQ0F,EAAO1G,QAAQ,CAC9B,MAAM6G,EAAQH,EAAO1F,GAErB,IAAIkH,EACJ,GAAqB,kBAAVrB,EACTqB,EAAQrB,OAER,OAAQA,GACN,KAAM,EACJqB,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQH,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcE,EAAO,SAC1BC,EAAQ,IACR,MAEF,QAEEA,EAAQC,OAAOC,aAAavB,GAGlCoB,GAAmB,IAAXpB,EACRmB,EAAO3F,KAAK6F,EACd,CACA,OAAOF,EAAOK,KAAK,GACrB,CAlbWC,CAAgB1F,EAAYzD,GAAQ4I,EAC7C,EA9CE9F,MACAY,WAkEF,SAAoBqF,GAClBb,EAAYa,EAAMhG,MAAQgG,EAAMnB,OAChCS,GACF,EApEE1E,MAsBF,SAAe1B,GAKb,GAJAsF,GAASrE,EAAAA,EAAAA,GAAKqE,EAAQtF,GACtBmH,IAGkC,OAA9B7B,EAAOA,EAAO1G,OAAS,GACzB,MAAO,GAMT,OAJA6H,EAAUV,EAAY,GAGtB7C,EAAQ5D,QAASqF,EAAAA,EAAAA,GAAWuB,EAAsBhD,EAAQ5D,OAAQ4D,GAC3DA,EAAQ5D,MACjB,GA3BA,IAOI8H,EAPAC,EAAQtB,EAAW/I,SAAS8E,KAAKoB,EAASjG,GAW9C,OAHI8I,EAAWpB,YACbuB,EAAqBjF,KAAK8E,GAErB7C,EA4BP,SAAS1B,EAAYzD,GACnB,OA8VJ,SAAqBuH,EAAQvH,GAC3B,MAAMuJ,EAAavJ,EAAMY,MAAMiH,OACzB2B,EAAmBxJ,EAAMY,MAAMkH,aAC/B2B,EAAWzJ,EAAM2B,IAAIkG,OACrB6B,EAAiB1J,EAAM2B,IAAImG,aAEjC,IAAI6B,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACpC,EAAOgC,GAAYtH,MAAMuH,EAAkBE,QAC9C,CAEL,GADAC,EAAOpC,EAAOtF,MAAMsH,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,MAAMI,EAAOD,EAAK,GACE,kBAATC,EACTD,EAAK,GAAKC,EAAK3H,MAAMuH,GAErBG,EAAKE,OAET,CACIH,EAAiB,GAEnBC,EAAKzG,KAAKqE,EAAOkC,GAAUxH,MAAM,EAAGyH,GAExC,CACA,OAAOC,CACT,CAxXWG,CAAYvC,EAAQvH,EAC7B,CAGA,SAAS8C,IAEP,MAAM,KAACC,EAAI,OAAE6E,EAAM,OAAE5E,EAAM,OAAE6E,EAAM,aAAEC,GAAgBtG,EACrD,MAAO,CACLuB,OACA6E,SACA5E,SACA6E,SACAC,eAEJ,CAsBA,SAASsB,IAEP,IAAIW,EACJ,KAAOvI,EAAMqG,OAASN,EAAO1G,QAAQ,CACnC,MAAM6G,EAAQH,EAAO/F,EAAMqG,QAG3B,GAAqB,kBAAVH,EAKT,IAJAqC,EAAavI,EAAMqG,OACfrG,EAAMsG,aAAe,IACvBtG,EAAMsG,aAAe,GAGrBtG,EAAMqG,SAAWkC,GACjBvI,EAAMsG,aAAeJ,EAAM7G,QAE3BmJ,EAAGtC,EAAMC,WAAWnG,EAAMsG,oBAG5BkC,EAAGtC,EAEP,CACF,CAQA,SAASsC,EAAGvK,GACV2I,OAAWhH,EACXiI,EAAe5J,EACf6J,EAAQA,EAAM7J,EAChB,CAsEA,SAASkJ,EAAkBsB,EAAGxB,GAC5BA,EAAKyB,SACP,CAQA,SAAS3B,EAAiB4B,EAAU7B,GAClC,OAWA,SAAc/I,EAAY6K,EAAaC,GAErC,IAAIC,EAEAC,EAEApI,EAEAsG,EACJ,OAAO+B,MAAMC,QAAQlL,GACjBmL,EAAuBnL,GACvB,aAAcA,EAEdmL,EAAuB,CAACnL,IAS5B,SAA+BoL,GAC7B,OAAO/J,EAGP,SAASA,EAAMnB,GACb,MAAMmL,EAAe,OAATnL,GAAiBkL,EAAIlL,GAC3BoL,EAAe,OAATpL,GAAiBkL,EAAIxG,KAOjC,OAAOuG,EANM,IAGPF,MAAMC,QAAQG,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzCJ,MAAMC,QAAQI,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExCH,CAA6BjL,EACtC,CACF,CAvBIqL,CAAsBvL,GA+B1B,SAASmL,EAAuBtD,GAG9B,OAFAkD,EAAmBlD,EACnBmD,EAAiB,EACG,IAAhBnD,EAAKvG,OACAwJ,EAEFU,EAAgB3D,EAAKmD,GAC9B,CAQA,SAASQ,EAAgBvC,GACvB,OAGA,SAAe/I,GAKbgJ,EAwER,WACE,MAAMuC,EAAalI,IACbmI,EAAgB9F,EAAQpF,SACxBmL,EAAwB/F,EAAQhD,iBAChCgJ,EAAmBhG,EAAQ5D,OAAOV,OAClCuK,EAAaZ,MAAMvC,KAAK1H,GAC9B,MAAO,CACL2J,UACAjC,KAAMkD,GAQR,SAASjB,IACP1I,EAAQwJ,EACR7F,EAAQpF,SAAWkL,EACnB9F,EAAQhD,iBAAmB+I,EAC3B/F,EAAQ5D,OAAOV,OAASsK,EACxB5K,EAAQ6K,EACR/C,GACF,CACF,CAhGegD,GACPlJ,EAAmBqG,EACdA,EAAUlC,UACbnB,EAAQhD,iBAAmBqG,GAK7B,GACEA,EAAU8C,MACVnG,EAAQ7F,OAAOC,WAAW2E,QAAQC,KAAKC,SAASoE,EAAU8C,MAE1D,OAAOrH,EAAIxE,GAEb,OAAO+I,EAAUvJ,SAAS8E,KAIxBuE,EAASxG,OAAOC,OAAOD,OAAOyJ,OAAOpG,GAAUmD,GAAUnD,EACzDjG,EACA8E,EACAC,EAPKuE,CAQL/I,EACJ,CACF,CAGA,SAASuE,EAAGvE,GAGV,OAFA2I,GAAW,EACX+B,EAAShI,EAAkBsG,GACpB2B,CACT,CAGA,SAASnG,EAAIxE,GAGX,OAFA2I,GAAW,EACXK,EAAKyB,YACCK,EAAiBD,EAAiBzJ,OAC/BkK,EAAgBT,EAAiBC,IAEnCF,CACT,CACF,CACF,CAOA,SAAS3B,EAAUF,EAAWP,GACxBO,EAAU5B,aAAeuB,EAAqB/D,SAASoE,IACzDL,EAAqBjF,KAAKsF,GAExBA,EAAUtC,UACZlE,EAAAA,EAAAA,GACEmD,EAAQ5D,OACR0G,EACA9C,EAAQ5D,OAAOV,OAASoH,EACxBO,EAAUtC,QAAQf,EAAQ5D,OAAOU,MAAMgG,GAAO9C,IAG9CqD,EAAUgD,YACZrG,EAAQ5D,OAASiH,EAAUgD,UAAUrG,EAAQ5D,OAAQ4D,GAEzD,CAuCA,SAASkD,IACH7G,EAAMuB,QAAQmF,GAAe1G,EAAMoG,OAAS,IAC9CpG,EAAMoG,OAASM,EAAY1G,EAAMuB,MACjCvB,EAAMwB,QAAUkF,EAAY1G,EAAMuB,MAAQ,EAE9C,CACF,CCleO,MAAM0I,EAAgB,CAC3BH,KAAM,gBACNrM,SAOF,SAA+BC,EAAS8E,EAAIC,GAC1C,IAEIyH,EAFA7H,EAAO,EAGX,OAYA,SAAepE,GAGb,OAFAP,EAAQS,MAAM,iBAehB,SAAgBF,GAEd,OADAiM,EAASjM,EACF0H,EAAQ1H,EACjB,CAhBSkM,CAAOlM,EAChB,EA2BA,SAAS0H,EAAQ1H,GACf,OAAIA,IAASiM,GACXxM,EAAQS,MAAM,yBACPiM,EAASnM,IAEdoE,GAAQ,IAAe,OAATpE,IAAiBW,EAAAA,EAAAA,IAAmBX,KACpDP,EAAQU,KAAK,iBACNoE,EAAGvE,IAELwE,EAAIxE,EACb,CAYA,SAASmM,EAASnM,GAChB,OAAIA,IAASiM,GACXxM,EAAQQ,QAAQD,GAChBoE,IACO+H,IAET1M,EAAQU,KAAK,0BACNiM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAASiI,EAAS,aAA/BtH,CAA6CJ,GAC7C0H,EAAQ1H,GACd,CACF,GCpFO,MAAM2H,EAAO,CAClBkE,KAAM,OACNrM,SA0BF,SAA2BC,EAAS8E,EAAIC,GACtC,MAAM3D,EAAOjB,KACP+G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,IAAIiL,EACF1F,GAAyB,eAAjBA,EAAK,GAAG1E,KACZ0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,OACtC,EACFgD,EAAO,EACX,OAGA,SAAepE,GACb,MAAMsM,EACJzL,EAAKS,eAAeW,OACV,KAATjC,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eACN,GACW,kBAATsM,GACKzL,EAAKS,eAAe2K,QAAUjM,IAASa,EAAKS,eAAe2K,QAC5DM,EAAAA,EAAAA,IAAWvM,GACf,CAOA,GANKa,EAAKS,eAAeW,OACvBpB,EAAKS,eAAeW,KAAOqK,EAC3B7M,EAAQS,MAAMoM,EAAM,CAClB/G,YAAY,KAGH,kBAAT+G,EAEF,OADA7M,EAAQS,MAAM,kBACE,KAATF,GAAwB,KAATA,EAClBP,EAAQuD,MAAMgJ,EAAexH,EAAKgI,EAAlC/M,CAA4CO,GAC5CwM,EAASxM,GAEf,IAAKa,EAAKgC,WAAsB,KAAT7C,EAGrB,OAFAP,EAAQS,MAAM,kBACdT,EAAQS,MAAM,iBACPuM,EAAOzM,EAElB,CACA,OAAOwE,EAAIxE,EACb,EAGA,SAASyM,EAAOzM,GACd,OAAIuM,EAAAA,EAAAA,IAAWvM,MAAWoE,EAAO,IAC/B3E,EAAQQ,QAAQD,GACTyM,KAGL5L,EAAKgC,WAAauB,EAAO,KAC1BvD,EAAKS,eAAe2K,OACjBjM,IAASa,EAAKS,eAAe2K,OACpB,KAATjM,GAAwB,KAATA,IAEnBP,EAAQU,KAAK,iBACNqM,EAASxM,IAEXwE,EAAIxE,EACb,CAKA,SAASwM,EAASxM,GAKhB,OAJAP,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACbU,EAAKS,eAAe2K,OAASpL,EAAKS,eAAe2K,QAAUjM,EACpDP,EAAQuD,MACb+D,EAAAA,EAEAlG,EAAKgC,UAAY2B,EAAMkI,EACvBjN,EAAQE,QACNgN,EACAC,EACAC,GAGN,CAGA,SAASH,EAAQ1M,GAGf,OAFAa,EAAKS,eAAewL,kBAAmB,EACvCT,IACOO,EAAY5M,EACrB,CAGA,SAAS6M,EAAY7M,GACnB,OAAIoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQS,MAAM,4BACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,4BACNyM,GAEFpI,EAAIxE,EACb,CAGA,SAAS4M,EAAY5M,GAInB,OAHAa,EAAKS,eAAe8C,KAClBiI,EACAxL,EAAK+F,eAAenH,EAAQU,KAAK,mBAAmB,GAAMiB,OACrDmD,EAAGvE,EACZ,CACF,EAnIEuB,aAAc,CACZ/B,SAwIJ,SAAkCC,EAAS8E,EAAIC,GAC7C,MAAM3D,EAAOjB,KAEb,OADAiB,EAAKS,eAAeI,gBAAaC,EAC1BlC,EAAQuD,MAAM+D,EAAAA,GAGrB,SAAiB/G,GAOf,OANAa,EAAKS,eAAeyL,kBAClBlM,EAAKS,eAAeyL,mBACpBlM,EAAKS,eAAewL,kBAIf1M,EAAAA,EAAAA,GACLX,EACA8E,EACA,iBACA1D,EAAKS,eAAe8C,KAAO,EAJtBhE,CAKLJ,EACJ,IAGA,SAAkBA,GAChB,GAAIa,EAAKS,eAAeyL,qBAAsBX,EAAAA,EAAAA,IAAcpM,GAG1D,OAFAa,EAAKS,eAAeyL,uBAAoBpL,EACxCd,EAAKS,eAAewL,sBAAmBnL,EAChCqL,EAAiBhN,GAI1B,OAFAa,EAAKS,eAAeyL,uBAAoBpL,EACxCd,EAAKS,eAAewL,sBAAmBnL,EAChClC,EAAQE,QAAQsN,EAAiB1I,EAAIyI,EAArCvN,CAAuDO,EAChE,IAGA,SAASgN,EAAiBhN,GAOxB,OALAa,EAAKS,eAAeI,YAAa,EAEjCb,EAAKgC,eAAYlB,GAGVvB,EAAAA,EAAAA,GACLX,EACAA,EAAQE,QAAQgI,EAAMpD,EAAIC,GAC1B,aACA3D,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBACzChD,EACA,EANCvB,CAOLJ,EACJ,CACF,GAxLEG,KAsNF,SAAyBV,GACvBA,EAAQU,KAAKP,KAAK0B,eAAeW,KACnC,GApNM0K,EAAoC,CACxCnN,SAyNF,SAA0CC,EAAS8E,EAAIC,GACrD,MAAM3D,EAAOjB,KAIb,OAAOQ,EAAAA,EAAAA,GACLX,GASF,SAAqBO,GACnB,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,QAAQgL,EAAAA,EAAAA,IAAcpM,IACpB2G,GACiB,6BAAjBA,EAAK,GAAG1E,KACNsC,EAAGvE,GACHwE,EAAIxE,EACV,GAdE,2BACAa,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBACzChD,EACA,EAYR,EA/OEkF,SAAS,GAILoG,EAAkB,CACtBzN,SAmLF,SAAwBC,EAAS8E,EAAIC,GACnC,MAAM3D,EAAOjB,KACb,OAAOQ,EAAAA,EAAAA,GACLX,GAOF,SAAqBO,GACnB,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,OAAOuF,GACY,mBAAjBA,EAAK,GAAG1E,MACR0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,SAAWP,EAAKS,eAAe8C,KACnEG,EAAGvE,GACHwE,EAAIxE,EACV,GAZE,iBACAa,EAAKS,eAAe8C,KAAO,EAY/B,EApMEyC,SAAS,GCvBJ,MAAMqG,EAAa,CACxBrB,KAAM,aACNrM,SAWF,SAAiCC,EAAS8E,EAAIC,GAC5C,MAAM3D,EAAOjB,KACb,OAYA,SAAeI,GACb,GAAa,KAATA,EAAa,CACf,MAAM6J,EAAQhJ,EAAKS,eAWnB,OAVKuI,EAAMsD,OACT1N,EAAQS,MAAM,aAAc,CAC1BqF,YAAY,IAEdsE,EAAMsD,MAAO,GAEf1N,EAAQS,MAAM,oBACdT,EAAQS,MAAM,oBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,oBACNiN,CACT,CACA,OAAO5I,EAAIxE,EACb,EAYA,SAASoN,EAAMpN,GACb,OAAIoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQS,MAAM,8BACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,8BACbV,EAAQU,KAAK,oBACNoE,IAET9E,EAAQU,KAAK,oBACNoE,EAAGvE,GACZ,CACF,EA/DEuB,aAAc,CACZ/B,SA4EJ,SAAwCC,EAAS8E,EAAIC,GACnD,MAAM3D,EAAOjB,KACb,OAeA,SAAmBI,GACjB,IAAIoM,EAAAA,EAAAA,IAAcpM,GAGhB,OAAOI,EAAAA,EAAAA,GACLX,EACA4N,EACA,aACAxM,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBACzChD,EACA,EANCvB,CAOLJ,GAEJ,OAAOqN,EAAWrN,EACpB,EAeA,SAASqN,EAAWrN,GAClB,OAAOP,EAAQE,QAAQuN,EAAY3I,EAAIC,EAAhC/E,CAAqCO,EAC9C,CACF,GA3HEG,KA8HF,SAAcV,GACZA,EAAQU,KAAK,aACf,GCjGO,SAASmN,EACd7N,EACA8E,EACAC,EACAvC,EACAsL,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAQD,GAAOE,OAAOC,kBAC5B,IAAIC,EAAU,EACd,OAcA,SAAe/N,GACb,GAAa,KAATA,EAMF,OALAP,EAAQS,MAAM+B,GACdxC,EAAQS,MAAMqN,GACd9N,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqN,GACNQ,EAIT,GAAa,OAAThO,GAA0B,KAATA,GAAwB,KAATA,IAAeiO,EAAAA,EAAAA,IAAajO,GAC9D,OAAOwE,EAAIxE,GAQb,OANAP,EAAQS,MAAM+B,GACdxC,EAAQS,MAAMuN,GACdhO,EAAQS,MAAMwN,GACdjO,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAER0N,EAAIlO,EACb,EAYA,SAASgO,EAAehO,GACtB,OAAa,KAATA,GACFP,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqN,GACb/N,EAAQU,KAAKoN,GACb9N,EAAQU,KAAK8B,GACNsC,IAET9E,EAAQS,MAAMwN,GACdjO,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAER2N,EAASnO,GAClB,CAYA,SAASmO,EAASnO,GAChB,OAAa,KAATA,GACFP,EAAQU,KAAK,eACbV,EAAQU,KAAKuN,GACNM,EAAehO,IAEX,OAATA,GAA0B,KAATA,IAAeW,EAAAA,EAAAA,IAAmBX,GAC9CwE,EAAIxE,IAEbP,EAAQQ,QAAQD,GACA,KAATA,EAAcoO,EAAiBD,EACxC,CAYA,SAASC,EAAepO,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCP,EAAQQ,QAAQD,GACTmO,GAEFA,EAASnO,EAClB,CAYA,SAASkO,EAAIlO,GACX,OACG+N,GACS,OAAT/N,GAA0B,KAATA,KAAeqO,EAAAA,EAAAA,IAA0BrO,GAQzD+N,EAAUH,GAAkB,KAAT5N,GACrBP,EAAQQ,QAAQD,GAChB+N,IACOG,GAEI,KAATlO,GACFP,EAAQQ,QAAQD,GAChB+N,IACOG,GAMI,OAATlO,GAA0B,KAATA,GAAwB,KAATA,IAAeiO,EAAAA,EAAAA,IAAajO,GACvDwE,EAAIxE,IAEbP,EAAQQ,QAAQD,GACA,KAATA,EAAcsO,EAAYJ,IAxB/BzO,EAAQU,KAAK,eACbV,EAAQU,KAAKuN,GACbjO,EAAQU,KAAKsN,GACbhO,EAAQU,KAAK8B,GACNsC,EAAGvE,GAqBd,CAYA,SAASsO,EAAUtO,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCP,EAAQQ,QAAQD,GACTkO,GAEFA,EAAIlO,EACb,CACF,CCzLO,SAASuO,EAAa9O,EAAS8E,EAAIC,EAAKvC,EAAMuM,EAAYd,GAC/D,MAAM7M,EAAOjB,KACb,IAEIuE,EAFAC,EAAO,EAGX,OAYA,SAAepE,GAMb,OALAP,EAAQS,MAAM+B,GACdxC,EAAQS,MAAMsO,GACd/O,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqO,GACb/O,EAAQS,MAAMwN,GACPhG,CACT,EAYA,SAASA,EAAQ1H,GACf,OACEoE,EAAO,KACE,OAATpE,GACS,KAATA,GACU,KAATA,IAAgBmE,GAMP,KAATnE,IACEoE,GACD,2BAA4BvD,EAAKhB,OAAOC,WAEnC0E,EAAIxE,GAEA,KAATA,GACFP,EAAQU,KAAKuN,GACbjO,EAAQS,MAAMsO,GACd/O,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqO,GACb/O,EAAQU,KAAK8B,GACNsC,IAIL5D,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNuH,IAETjI,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAERiO,EAAYzO,GACrB,CAYA,SAASyO,EAAYzO,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAW,EAAAA,EAAAA,IAAmBX,IACnBoE,IAAS,KAET3E,EAAQU,KAAK,eACNuH,EAAQ1H,KAEjBP,EAAQQ,QAAQD,GACXmE,IAAMA,IAAQiI,EAAAA,EAAAA,IAAcpM,IACjB,KAATA,EAAc0O,EAAcD,EACrC,CAYA,SAASC,EAAY1O,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCP,EAAQQ,QAAQD,GAChBoE,IACOqK,GAEFA,EAAYzO,EACrB,CACF,CCtHO,SAAS2O,EAAalP,EAAS8E,EAAIC,EAAKvC,EAAMuM,EAAYd,GAE/D,IAAIzB,EACJ,OAYA,SAAejM,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALAP,EAAQS,MAAM+B,GACdxC,EAAQS,MAAMsO,GACd/O,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqO,GACbvC,EAAkB,KAATjM,EAAc,GAAKA,EACrB4O,EAET,OAAOpK,EAAIxE,EACb,EAcA,SAAS4O,EAAM5O,GACb,OAAIA,IAASiM,GACXxM,EAAQS,MAAMsO,GACd/O,EAAQQ,QAAQD,GAChBP,EAAQU,KAAKqO,GACb/O,EAAQU,KAAK8B,GACNsC,IAET9E,EAAQS,MAAMwN,GACPhG,EAAQ1H,GACjB,CAYA,SAAS0H,EAAQ1H,GACf,OAAIA,IAASiM,GACXxM,EAAQU,KAAKuN,GACNkB,EAAM3C,IAEF,OAATjM,EACKwE,EAAIxE,IAITW,EAAAA,EAAAA,IAAmBX,IAErBP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAASiI,EAAS,gBAExCjI,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAERiM,EAAOzM,GAChB,CAOA,SAASyM,EAAOzM,GACd,OAAIA,IAASiM,GAAmB,OAATjM,IAAiBW,EAAAA,EAAAA,IAAmBX,IACzDP,EAAQU,KAAK,eACNuH,EAAQ1H,KAEjBP,EAAQQ,QAAQD,GACA,KAATA,EAAc6O,EAASpC,EAChC,CAYA,SAASoC,EAAO7O,GACd,OAAIA,IAASiM,GAAmB,KAATjM,GACrBP,EAAQQ,QAAQD,GACTyM,GAEFA,EAAOzM,EAChB,CACF,CClIO,SAAS8O,EAAkBrP,EAAS8E,GAEzC,IAAIJ,EACJ,OAGA,SAAShD,EAAMnB,GACb,IAAIW,EAAAA,EAAAA,IAAmBX,GAKrB,OAJAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACbgE,GAAO,EACAhD,EAET,IAAIiL,EAAAA,EAAAA,IAAcpM,GAChB,OAAOI,EAAAA,EAAAA,GACLX,EACA0B,EACAgD,EAAO,aAAe,aAHjB/D,CAILJ,GAEJ,OAAOuE,EAAGvE,EACZ,CACF,C,eC7BO,MAAM+O,EAAa,CACxBlD,KAAM,aACNrM,SAaF,SAA4BC,EAAS8E,EAAIC,GACvC,MAAM3D,EAAOjB,KAEb,IAAIoP,EACJ,OAYA,SAAehP,GAKb,OADAP,EAAQS,MAAM,cAchB,SAAgBF,GAGd,OAAOuO,EAAajK,KAClBzD,EACApB,EACAwP,EAEAzK,EACA,kBACA,wBACA,wBARK+J,CASLvO,EACJ,CA1BSkM,CAAOlM,EAChB,EAqCA,SAASiP,EAAWjP,GAIlB,OAHAgP,GAAaE,EAAAA,EAAAA,GACXrO,EAAK+F,eAAe/F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAAG,IAAIoB,MAAM,GAAI,IAE3D,KAATxC,GACFP,EAAQS,MAAM,oBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,oBACNgP,GAEF3K,EAAIxE,EACb,CAYA,SAASmP,EAAYnP,GAEnB,OAAOqO,EAAAA,EAAAA,IAA0BrO,GAC7B8O,EAAkBrP,EAAS2P,EAA3BN,CAA8C9O,GAC9CoP,EAAkBpP,EACxB,CAYA,SAASoP,EAAkBpP,GACzB,OAAOsN,EACL7N,EACA4P,EAEA7K,EACA,wBACA,+BACA,qCACA,2BACA,8BATK8I,CAULtN,EACJ,CAYA,SAASqP,EAAiBrP,GACxB,OAAOP,EAAQE,QAAQ2P,EAAalC,EAAOA,EAApC3N,CAA2CO,EACpD,CAcA,SAASoN,EAAMpN,GACb,OAAOoM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAAS8P,EAAiB,aAAvCnP,CAAqDJ,GACrDuP,EAAgBvP,EACtB,CAcA,SAASuP,EAAgBvP,GACvB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,cAKbU,EAAKhB,OAAO2P,QAAQ/L,KAAKuL,GAKlBzK,EAAGvE,IAELwE,EAAIxE,EACb,CACF,GAtLMsP,EAAc,CAClB9P,SA2LF,SAA6BC,EAAS8E,EAAIC,GACxC,OAcA,SAAqBxE,GACnB,OAAOqO,EAAAA,EAAAA,IAA0BrO,GAC7B8O,EAAkBrP,EAASgQ,EAA3BX,CAAyC9O,GACzCwE,EAAIxE,EACV,EAaA,SAASyP,EAAazP,GACpB,OAAO2O,EACLlP,EACAiQ,EACAlL,EACA,kBACA,wBACA,wBANKmK,CAOL3O,EACJ,CAYA,SAAS0P,EAAW1P,GAClB,OAAOoM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAASkQ,EAA8B,aAApDvP,CAAkEJ,GAClE2P,EAA6B3P,EACnC,CAYA,SAAS2P,EAA6B3P,GACpC,OAAgB,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GAAQuE,EAAGvE,GAAQwE,EAAIxE,EACpE,CACF,EAlQE6G,SAAS,GCjBJ,MAAM+I,EAAe,CAC1B/D,KAAM,eACNrM,SAaF,SAA8BC,EAAS8E,EAAIC,GACzC,MAAM3D,EAAOjB,KACb,OAgBA,SAAeI,GAMb,OAHAP,EAAQS,MAAM,iBAGPE,EAAAA,EAAAA,GAAaX,EAASoQ,EAAa,aAAc,EAAjDzP,CAAwDJ,EACjE,EAYA,SAAS6P,EAAY7P,GACnB,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,OAAOuF,GACY,eAAjBA,EAAK,GAAG1E,MACR0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,QAAU,EAC9CsG,EAAQ1H,GACRwE,EAAIxE,EACV,CAYA,SAAS0H,EAAQ1H,GACf,OAAa,OAATA,EACKoN,EAAMpN,IAEXW,EAAAA,EAAAA,IAAmBX,GACdP,EAAQE,QAAQmQ,EAAcpI,EAAS0F,EAAvC3N,CAA8CO,IAEvDP,EAAQS,MAAM,iBACPuM,EAAOzM,GAChB,CAYA,SAASyM,EAAOzM,GACd,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,iBACNuH,EAAQ1H,KAEjBP,EAAQQ,QAAQD,GACTyM,EACT,CAGA,SAASW,EAAMpN,GAKb,OAJAP,EAAQU,KAAK,gBAINoE,EAAGvE,EACZ,CACF,GAvGM8P,EAAe,CACnBtQ,SA4GF,SAA8BC,EAAS8E,EAAIC,GACzC,MAAM3D,EAAOjB,KACb,OAAOkQ,EAaP,SAASA,EAAa9P,GAGpB,OAAIa,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,MACvBkB,EAAIxE,IAETW,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACN2P,IASF1P,EAAAA,EAAAA,GAAaX,EAASoQ,EAAa,aAAc,EAAjDzP,CAAwDJ,EACjE,CAYA,SAAS6P,EAAY7P,GACnB,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAC9C,OAAOuF,GACY,eAAjBA,EAAK,GAAG1E,MACR0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,QAAU,EAC9CmD,EAAGvE,IACHW,EAAAA,EAAAA,IAAmBX,GACnB8P,EAAa9P,GACbwE,EAAIxE,EACV,CACF,EApKE6G,SAAS,GCDJ,MAAMkJ,EAAa,CACxBlE,KAAM,aACNrM,SA2DF,SAA4BC,EAAS8E,EAAIC,GACvC,IAAIJ,EAAO,EACX,OAYA,SAAepE,GAGb,OADAP,EAAQS,MAAM,cAchB,SAAgBF,GAEd,OADAP,EAAQS,MAAM,sBACP8P,EAAahQ,EACtB,CAhBSkM,CAAOlM,EAChB,EA2BA,SAASgQ,EAAahQ,GACpB,OAAa,KAATA,GAAeoE,IAAS,GAC1B3E,EAAQQ,QAAQD,GACTgQ,GAII,OAAThQ,IAAiBqO,EAAAA,EAAAA,IAA0BrO,IAC7CP,EAAQU,KAAK,sBACNuH,EAAQ1H,IAEVwE,EAAIxE,EACb,CAYA,SAAS0H,EAAQ1H,GACf,OAAa,KAATA,GACFP,EAAQS,MAAM,sBACP+P,EAAgBjQ,IAEZ,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,cAINoE,EAAGvE,KAERoM,EAAAA,EAAAA,IAAcpM,IACTI,EAAAA,EAAAA,GAAaX,EAASiI,EAAS,aAA/BtH,CAA6CJ,IAKtDP,EAAQS,MAAM,kBACPQ,EAAKV,GACd,CAcA,SAASiQ,EAAgBjQ,GACvB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTiQ,IAETxQ,EAAQU,KAAK,sBACNuH,EAAQ1H,GACjB,CAYA,SAASU,EAAKV,GACZ,OAAa,OAATA,GAA0B,KAATA,IAAeqO,EAAAA,EAAAA,IAA0BrO,IAC5DP,EAAQU,KAAK,kBACNuH,EAAQ1H,KAEjBP,EAAQQ,QAAQD,GACTU,EACT,CACF,EA5LE+F,QAIF,SAA2B3E,EAAQ4D,GACjC,IAGInG,EAEAgI,EALAjB,EAAaxE,EAAOV,OAAS,EAC7B1B,EAAe,EAOkB,eAAjCoC,EAAOpC,GAAc,GAAGuC,OAC1BvC,GAAgB,GAKhB4G,EAAa,EAAI5G,GACc,eAA/BoC,EAAOwE,GAAY,GAAGrE,OAEtBqE,GAAc,GAGiB,uBAA/BxE,EAAOwE,GAAY,GAAGrE,OACrBvC,IAAiB4G,EAAa,GAC5BA,EAAa,EAAI5G,GACmB,eAAnCoC,EAAOwE,EAAa,GAAG,GAAGrE,QAE9BqE,GAAc5G,EAAe,IAAM4G,EAAa,EAAI,GAElDA,EAAa5G,IACfH,EAAU,CACR0C,KAAM,iBACNd,MAAOW,EAAOpC,GAAc,GAAGyB,MAC/Be,IAAKJ,EAAOwE,GAAY,GAAGpE,KAE7BqF,EAAO,CACLtF,KAAM,YACNd,MAAOW,EAAOpC,GAAc,GAAGyB,MAC/Be,IAAKJ,EAAOwE,GAAY,GAAGpE,IAC3B1B,YAAa,SAEf+B,EAAAA,EAAAA,GAAOT,EAAQpC,EAAc4G,EAAa5G,EAAe,EAAG,CAC1D,CAAC,QAASH,EAASmG,GACnB,CAAC,QAAS6B,EAAM7B,GAChB,CAAC,OAAQ6B,EAAM7B,GACf,CAAC,OAAQnG,EAASmG,MAGtB,OAAO5D,CACT,GC5DO,MAAMoO,EAAkB,CAC7BrE,KAAM,kBACNrM,SAkEF,SAAiCC,EAAS8E,EAAIC,GAC5C,MAAM3D,EAAOjB,KAEb,IAAIqM,EACJ,OAaA,SAAejM,GACb,IAEImQ,EAFA/N,EAAQvB,EAAKiB,OAAOV,OAIxB,KAAOgB,KAGL,GACiC,eAA/BvB,EAAKiB,OAAOM,GAAO,GAAGH,MACS,eAA/BpB,EAAKiB,OAAOM,GAAO,GAAGH,MACS,YAA/BpB,EAAKiB,OAAOM,GAAO,GAAGH,KACtB,CACAkO,EAA2C,cAA/BtP,EAAKiB,OAAOM,GAAO,GAAGH,KAClC,KACF,CAKF,IAAKpB,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,QAAUzC,EAAKgC,WAAasN,GAG3D,OAFA1Q,EAAQS,MAAM,qBACd+L,EAASjM,EAiBb,SAAgBA,GAEd,OADAP,EAAQS,MAAM,6BACPuM,EAAOzM,EAChB,CAnBWkM,CAAOlM,GAEhB,OAAOwE,EAAIxE,EACb,EA6BA,SAASyM,EAAOzM,GACd,OAAIA,IAASiM,GACXxM,EAAQQ,QAAQD,GACTyM,IAEThN,EAAQU,KAAK,8BACNiM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAAS2N,EAAO,aAA7BhN,CAA2CJ,GAC3CoN,EAAMpN,GACZ,CAaA,SAASoN,EAAMpN,GACb,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,qBACNoE,EAAGvE,IAELwE,EAAIxE,EACb,CACF,EAtKE+L,UAIF,SAAkCjK,EAAQ4D,GAExC,IAEInG,EAEAgI,EAEAwH,EANA3M,EAAQN,EAAOV,OAUnB,KAAOgB,KACL,GAAyB,UAArBN,EAAOM,GAAO,GAAgB,CAChC,GAA8B,YAA1BN,EAAOM,GAAO,GAAGH,KAAoB,CACvC1C,EAAU6C,EACV,KACF,CAC8B,cAA1BN,EAAOM,GAAO,GAAGH,OACnBsF,EAAOnF,EAEX,KAGgC,YAA1BN,EAAOM,GAAO,GAAGH,MAEnBH,EAAOS,OAAOH,EAAO,GAElB2M,GAAwC,eAA1BjN,EAAOM,GAAO,GAAGH,OAClC8M,EAAa3M,GAInB,MAAMgO,EAAU,CACdnO,KAAM,gBACNd,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOyF,GAAM,GAAGpG,OACzCe,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOA,EAAOV,OAAS,GAAG,GAAGc,MAItDJ,EAAOyF,GAAM,GAAGtF,KAAO,oBAInB8M,GACFjN,EAAOS,OAAOgF,EAAM,EAAG,CAAC,QAAS6I,EAAS1K,IAC1C5D,EAAOS,OAAOwM,EAAa,EAAG,EAAG,CAAC,OAAQjN,EAAOvC,GAAS,GAAImG,IAC9D5D,EAAOvC,GAAS,GAAG2C,IAAMG,OAAOC,OAAO,CAAC,EAAGR,EAAOiN,GAAY,GAAG7M,MAEjEJ,EAAOvC,GAAS,GAAK6Q,EAKvB,OADAtO,EAAO2B,KAAK,CAAC,OAAQ2M,EAAS1K,IACvB5D,CACT,GC3DO,MAAMuO,EAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,EAAe,CAAC,MAAO,SAAU,QAAS,YCxE1CC,EAAW,CACtB1E,KAAM,WACNrM,SAsCF,SAA0BC,EAAS8E,EAAIC,GACrC,MAAM3D,EAAOjB,KAEb,IAAIqM,EAEAuE,EAEAC,EAEArO,EAEAsO,EACJ,OAYA,SAAe1Q,GAEb,OAaF,SAAgBA,GAId,OAHAP,EAAQS,MAAM,YACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQD,GACTmN,CACT,CAlBSjB,CAAOlM,EAChB,EAiCA,SAASmN,EAAKnN,GACZ,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT2Q,GAEI,KAAT3Q,GACFP,EAAQQ,QAAQD,GAChBwQ,GAAa,EACNI,GAEI,KAAT5Q,GACFP,EAAQQ,QAAQD,GAChBiM,EAAS,EAMFpL,EAAKgC,UAAY0B,EAAKsM,IAI3BC,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GAEhByQ,EAASlH,OAAOC,aAAaxJ,GACtB+Q,GAEFvM,EAAIxE,EACb,CAgBA,SAAS2Q,EAAgB3Q,GACvB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBiM,EAAS,EACF+E,GAEI,KAAThR,GACFP,EAAQQ,QAAQD,GAChBiM,EAAS,EACT7J,EAAQ,EACD6O,IAILH,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GAChBiM,EAAS,EAGFpL,EAAKgC,UAAY0B,EAAKsM,GAExBrM,EAAIxE,EACb,CAYA,SAASgR,EAAkBhR,GACzB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAGTa,EAAKgC,UAAY0B,EAAKsM,GAExBrM,EAAIxE,EACb,CAYA,SAASiR,EAAgBjR,GACvB,MAAMsJ,EAAQ,SACd,OAAItJ,IAASsJ,EAAMpB,WAAW9F,MAC5B3C,EAAQQ,QAAQD,GACFsJ,IAAVlH,EAGKvB,EAAKgC,UAAY0B,EAAKhD,EAExB0P,GAEFzM,EAAIxE,EACb,CAYA,SAAS4Q,EAAc5Q,GACrB,OAAI8Q,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GAEhByQ,EAASlH,OAAOC,aAAaxJ,GACtB+Q,GAEFvM,EAAIxE,EACb,CAcA,SAAS+Q,EAAQ/Q,GACf,GACW,OAATA,GACS,KAATA,GACS,KAATA,IACAqO,EAAAA,EAAAA,IAA0BrO,GAC1B,CACA,MAAMkR,EAAiB,KAATlR,EACR6L,EAAO4E,EAAOU,cACpB,OAAKD,GAAUV,IAAcF,EAAa3L,SAASkH,GAM/CwE,EAAe1L,SAAS8L,EAAOU,gBACjClF,EAAS,EACLiF,GACFzR,EAAQQ,QAAQD,GACToR,GAKFvQ,EAAKgC,UAAY0B,EAAGvE,GAAQuB,EAAavB,KAElDiM,EAAS,EAEFpL,EAAKgC,YAAchC,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,MAClDkB,EAAIxE,GACJwQ,EACAa,EAAwBrR,GACxBsR,EAA4BtR,KAtB9BiM,EAAS,EAGFpL,EAAKgC,UAAY0B,EAAGvE,GAAQuB,EAAavB,GAoBpD,CAGA,OAAa,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,IACnCP,EAAQQ,QAAQD,GAChByQ,GAAUlH,OAAOC,aAAaxJ,GACvB+Q,GAEFvM,EAAIxE,EACb,CAYA,SAASoR,EAAiBpR,GACxB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAGTa,EAAKgC,UAAY0B,EAAKhD,GAExBiD,EAAIxE,EACb,CAYA,SAASqR,EAAwBrR,GAC/B,OAAIoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACTqR,GAEFG,EAAYxR,EACrB,CAyBA,SAASsR,EAA4BtR,GACnC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTwR,GAII,KAATxR,GAAwB,KAATA,IAAe8Q,EAAAA,EAAAA,IAAW9Q,IAC3CP,EAAQQ,QAAQD,GACTyR,IAELrF,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACTsR,GAEFE,EAAYxR,EACrB,CAgBA,SAASyR,EAAsBzR,GAE7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAuR,EAAAA,EAAAA,IAAkBvR,IAElBP,EAAQQ,QAAQD,GACTyR,GAEFC,EAA2B1R,EACpC,CAeA,SAAS0R,EAA2B1R,GAClC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT2R,IAELvF,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACT0R,GAEFJ,EAA4BtR,EACrC,CAeA,SAAS2R,EAA6B3R,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOwE,EAAIxE,GAEA,KAATA,GAAwB,KAATA,GACjBP,EAAQQ,QAAQD,GAChB0Q,EAAU1Q,EACH4R,IAELxF,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACT2R,GAEFE,EAA+B7R,EACxC,CAcA,SAAS4R,EAA6B5R,GACpC,OAAIA,IAAS0Q,GACXjR,EAAQQ,QAAQD,GAChB0Q,EAAU,KACHoB,GAEI,OAAT9R,IAAiBW,EAAAA,EAAAA,IAAmBX,GAC/BwE,EAAIxE,IAEbP,EAAQQ,QAAQD,GACT4R,EACT,CAYA,SAASC,EAA+B7R,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAqO,EAAAA,EAAAA,IAA0BrO,GAEnB0R,EAA2B1R,IAEpCP,EAAQQ,QAAQD,GACT6R,EACT,CAaA,SAASC,EAAkC9R,GACzC,OAAa,KAATA,GAAwB,KAATA,IAAeoM,EAAAA,EAAAA,IAAcpM,GACvCsR,EAA4BtR,GAE9BwE,EAAIxE,EACb,CAYA,SAASwR,EAAYxR,GACnB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT+R,GAEFvN,EAAIxE,EACb,CAYA,SAAS+R,EAAc/R,GACrB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GAG/BuB,EAAavB,IAElBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACT+R,GAEFvN,EAAIxE,EACb,CAYA,SAASuB,EAAavB,GACpB,OAAa,KAATA,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACTgS,GAEI,KAAThS,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACTiS,GAEI,KAATjS,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACTkS,GAEI,KAATlS,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACT6Q,GAEI,KAAT7Q,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACTmS,KAELxR,EAAAA,EAAAA,IAAmBX,IAAqB,IAAXiM,GAA2B,IAAXA,EAQpC,OAATjM,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,gBACNiS,EAAkBpS,KAE3BP,EAAQQ,QAAQD,GACTuB,IAZL9B,EAAQU,KAAK,gBACNV,EAAQuD,MACbqP,EACAC,EACAF,EAHK3S,CAILO,GAQN,CAaA,SAASoS,EAAkBpS,GACzB,OAAOP,EAAQuD,MACbuP,EACAC,EACAF,EAHK7S,CAILO,EACJ,CAaA,SAASwS,EAAyBxS,GAIhC,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNsS,CACT,CAaA,SAASA,EAAmBzS,GAC1B,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GAC/BoS,EAAkBpS,IAE3BP,EAAQS,MAAM,gBACPqB,EAAavB,GACtB,CAYA,SAASgS,EAA0BhS,GACjC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT6Q,GAEFtP,EAAavB,EACtB,CAYA,SAASiS,EAAuBjS,GAC9B,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChByQ,EAAS,GACFiC,GAEFnR,EAAavB,EACtB,CAYA,SAAS0S,EAAsB1S,GAC7B,GAAa,KAATA,EAAa,CACf,MAAM6L,EAAO4E,EAAOU,cACpB,OAAIb,EAAa3L,SAASkH,IACxBpM,EAAQQ,QAAQD,GACTkS,GAEF3Q,EAAavB,EACtB,CACA,OAAI8Q,EAAAA,EAAAA,IAAW9Q,IAASyQ,EAAOrP,OAAS,GACtC3B,EAAQQ,QAAQD,GAEhByQ,GAAUlH,OAAOC,aAAaxJ,GACvB0S,GAEFnR,EAAavB,EACtB,CAYA,SAASmS,EAAwBnS,GAC/B,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT6Q,GAEFtP,EAAavB,EACtB,CAoBA,SAAS6Q,EAA8B7Q,GACrC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTkS,GAII,KAATlS,GAA0B,IAAXiM,GACjBxM,EAAQQ,QAAQD,GACT6Q,GAEFtP,EAAavB,EACtB,CAYA,SAASkS,EAAkBlS,GACzB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,gBACNmS,EAAkBtS,KAE3BP,EAAQQ,QAAQD,GACTkS,EACT,CAYA,SAASI,EAAkBtS,GAMzB,OALAP,EAAQU,KAAK,YAKNoE,EAAGvE,EACZ,CACF,EArzBE+L,UAeF,SAA2BjK,GACzB,IAAIM,EAAQN,EAAOV,OACnB,KAAOgB,MACoB,UAArBN,EAAOM,GAAO,IAA4C,aAA1BN,EAAOM,GAAO,GAAGH,QAInDG,EAAQ,GAAmC,eAA9BN,EAAOM,EAAQ,GAAG,GAAGH,OAEpCH,EAAOM,GAAO,GAAGjB,MAAQW,EAAOM,EAAQ,GAAG,GAAGjB,MAE9CW,EAAOM,EAAQ,GAAG,GAAGjB,MAAQW,EAAOM,EAAQ,GAAG,GAAGjB,MAElDW,EAAOS,OAAOH,EAAQ,EAAG,IAE3B,OAAON,CACT,EA9BEa,UAAU,GAIN0P,EAAkB,CACtB7S,SAk2BF,SAAiCC,EAAS8E,EAAIC,GAC5C,OAaA,SAAexE,GAIb,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNV,EAAQE,QAAQoH,EAAAA,EAAWxC,EAAIC,EACxC,CACF,EAr3BEqC,SAAS,GAEL0L,EAA2B,CAC/B/S,SAizBF,SAA0CC,EAAS8E,EAAIC,GACrD,MAAM3D,EAAOjB,KACb,OAaA,SAAeI,GACb,IAAIW,EAAAA,EAAAA,IAAmBX,GAIrB,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNiN,EAET,OAAO5I,EAAIxE,EACb,EAaA,SAASoN,EAAMpN,GACb,OAAOa,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,MAAQkB,EAAIxE,GAAQuE,EAAGvE,EAC5D,CACF,EAv1BE6G,SAAS,GCvBX,MAAM8L,EAAsB,CAC1BnT,SAwbF,SAAqCC,EAAS8E,EAAIC,GAChD,MAAM3D,EAAOjB,KACb,OAOA,SAAeI,GACb,GAAa,OAATA,EACF,OAAOwE,EAAIxE,GAKb,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNE,CACT,EAOA,SAASA,EAAUL,GACjB,OAAOa,EAAKhB,OAAOuD,KAAKvC,EAAKwC,MAAMC,MAAQkB,EAAIxE,GAAQuE,EAAGvE,EAC5D,CACF,EAldE6G,SAAS,GAIE+L,EAAa,CACxB/G,KAAM,aACNrM,SAQF,SAA4BC,EAAS8E,EAAIC,GACvC,MAAM3D,EAAOjB,KAEPiT,EAAa,CACjBrT,SA+SF,SAA4BC,EAAS8E,EAAIC,GACvC,IAAIJ,EAAO,EACX,OAAO0O,EAOP,SAASA,EAAY9S,GAInB,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNgB,CACT,CAcA,SAASA,EAAMnB,GAKb,OADAP,EAAQS,MAAM,oBACPkM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GACEX,EACAsT,EACA,aACAlS,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBACzChD,EACA,EANNvB,CAOEJ,GACF+S,EAAoB/S,EAC1B,CAcA,SAAS+S,EAAoB/S,GAC3B,OAAIA,IAASiM,GACXxM,EAAQS,MAAM,2BACP8S,EAAchT,IAEhBwE,EAAIxE,EACb,CAcA,SAASgT,EAAchT,GACrB,OAAIA,IAASiM,GACX7H,IACA3E,EAAQQ,QAAQD,GACTgT,GAEL5O,GAAQ6O,GACVxT,EAAQU,KAAK,4BACNiM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAASyT,EAAoB,aAA1C9S,CAAwDJ,GACxDkT,EAAmBlT,IAElBwE,EAAIxE,EACb,CAcA,SAASkT,EAAmBlT,GAC1B,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,mBACNoE,EAAGvE,IAELwE,EAAIxE,EACb,CACF,EA7ZE6G,SAAS,GAEX,IAGIoF,EAHAkH,EAAgB,EAChBF,EAAW,EAGf,OAcA,SAAejT,GAEb,OAeF,SAA4BA,GAC1B,MAAM2G,EAAO9F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAS9C,OARA+R,EACExM,GAAyB,eAAjBA,EAAK,GAAG1E,KACZ0E,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMvF,OACtC,EACN6K,EAASjM,EACTP,EAAQS,MAAM,cACdT,EAAQS,MAAM,mBACdT,EAAQS,MAAM,2BACP8P,EAAahQ,EACtB,CA1BSoT,CAAmBpT,EAC5B,EAuCA,SAASgQ,EAAahQ,GACpB,OAAIA,IAASiM,GACXgH,IACAxT,EAAQQ,QAAQD,GACTgQ,GAELiD,EAAW,EACNzO,EAAIxE,IAEbP,EAAQU,KAAK,4BACNiM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GAAaX,EAAS4T,EAAY,aAAlCjT,CAAgDJ,GAChDqT,EAAWrT,GACjB,CAcA,SAASqT,EAAWrT,GAClB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,mBACNU,EAAKgC,UACR0B,EAAGvE,GACHP,EAAQuD,MAAM2P,EAAqBW,EAAgBlG,EAAnD3N,CAA0DO,KAEhEP,EAAQS,MAAM,uBACdT,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAERwI,EAAKhJ,GACd,CAcA,SAASgJ,EAAKhJ,GACZ,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,eACbV,EAAQU,KAAK,uBACNkT,EAAWrT,KAEhBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQU,KAAK,eACbV,EAAQU,KAAK,wBACNC,EAAAA,EAAAA,GAAaX,EAAS8T,EAAY,aAAlCnT,CAAgDJ,IAE5C,KAATA,GAAeA,IAASiM,EACnBzH,EAAIxE,IAEbP,EAAQQ,QAAQD,GACTgJ,EACT,CAcA,SAASuK,EAAWvT,GAClB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GAC/BqT,EAAWrT,IAEpBP,EAAQS,MAAM,uBACdT,EAAQS,MAAM,cAAe,CAC3BM,YAAa,WAERgT,EAAKxT,GACd,CAcA,SAASwT,EAAKxT,GACZ,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,eACbV,EAAQU,KAAK,uBACNkT,EAAWrT,IAEP,KAATA,GAAeA,IAASiM,EACnBzH,EAAIxE,IAEbP,EAAQQ,QAAQD,GACTwT,EACT,CAeA,SAASF,EAAetT,GACtB,OAAOP,EAAQE,QAAQkT,EAAYzF,EAAOqG,EAAnChU,CAAkDO,EAC3D,CAcA,SAASyT,EAAczT,GAIrB,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNT,CACT,CAcA,SAASA,EAAaM,GACpB,OAAOmT,EAAgB,IAAK/G,EAAAA,EAAAA,IAAcpM,IACtCI,EAAAA,EAAAA,GACEX,EACAiU,EACA,aACAP,EAAgB,EAJlB/S,CAKEJ,GACF0T,EAAmB1T,EACzB,CAcA,SAAS0T,EAAmB1T,GAC1B,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,GAC/BP,EAAQuD,MAAM2P,EAAqBW,EAAgBlG,EAAnD3N,CAA0DO,IAEnEP,EAAQS,MAAM,iBACPyT,EAAa3T,GACtB,CAcA,SAAS2T,EAAa3T,GACpB,OAAa,OAATA,IAAiBW,EAAAA,EAAAA,IAAmBX,IACtCP,EAAQU,KAAK,iBACNuT,EAAmB1T,KAE5BP,EAAQQ,QAAQD,GACT2T,EACT,CAcA,SAASvG,EAAMpN,GAEb,OADAP,EAAQU,KAAK,cACNoE,EAAGvE,EACZ,CAsHF,EA1aE2C,UAAU,G,eCLL,MAAMiR,EAAqB,CAChC/H,KAAM,qBACNrM,SAOF,SAAoCC,EAAS8E,EAAIC,GAC/C,MAAM3D,EAAOjB,KACb,IAEI+N,EAEAkG,EAJAzP,EAAO,EAKX,OAgBA,SAAepE,GAKb,OAJAP,EAAQS,MAAM,sBACdT,EAAQS,MAAM,4BACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,4BACNgN,CACT,EAiBA,SAASA,EAAKnN,GACZ,OAAa,KAATA,GACFP,EAAQS,MAAM,mCACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,mCACN2T,IAETrU,EAAQS,MAAM,2BACdyN,EAAM,GACNkG,EAAOtC,EAAAA,GACAjI,EAAMtJ,GACf,CAcA,SAAS8T,EAAQ9T,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBP,EAAQS,MAAM,uCACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,uCACbV,EAAQS,MAAM,2BACdyN,EAAM,EACNkG,EAAOE,EAAAA,GACAzK,IAET7J,EAAQS,MAAM,2BACdyN,EAAM,EACNkG,EAAOtH,EAAAA,GACAjD,EAAMtJ,GACf,CAmBA,SAASsJ,EAAMtJ,GACb,GAAa,KAATA,GAAeoE,EAAM,CACvB,MAAM7D,EAAQd,EAAQU,KAAK,2BAC3B,OACE0T,IAAStC,EAAAA,KACRyC,EAAAA,EAAAA,GAA8BnT,EAAK+F,eAAerG,KAOrDd,EAAQS,MAAM,4BACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,4BACbV,EAAQU,KAAK,sBACNoE,GATEC,EAAIxE,EAUf,CACA,OAAI6T,EAAK7T,IAASoE,IAASuJ,GACzBlO,EAAQQ,QAAQD,GACTsJ,GAEF9E,EAAIxE,EACb,CACF,GC/IO,MAAMiU,EAAkB,CAC7BpI,KAAM,kBACNrM,SAOF,SAAiCC,EAAS8E,EAAIC,GAC5C,OAYA,SAAexE,GAKb,OAJAP,EAAQS,MAAM,mBACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,gBACNsM,CACT,EAYA,SAASA,EAAOzM,GAEd,OAAIkU,EAAAA,EAAAA,IAAiBlU,IACnBP,EAAQS,MAAM,wBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,wBACbV,EAAQU,KAAK,mBACNoE,GAEFC,EAAIxE,EACb,CACF,GClDO,MAAMmU,EAAa,CACxBtI,KAAM,aACNrM,SAOF,SAA4BC,EAAS8E,GACnC,OAGA,SAAevE,GAIb,OAHAP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAAS8E,EAAI,aACnC,CACF,GCVO,MAAM6P,EAAW,CACtBvI,KAAM,WACNrM,SA8IF,SAA0BC,EAAS8E,EAAIC,GACrC,MAAM3D,EAAOjB,KACb,IAEIyU,EAEA7E,EAJApN,EAAQvB,EAAKiB,OAAOV,OAOxB,KAAOgB,KACL,IACkC,eAA/BvB,EAAKiB,OAAOM,GAAO,GAAGH,MACU,cAA/BpB,EAAKiB,OAAOM,GAAO,GAAGH,QACvBpB,EAAKiB,OAAOM,GAAO,GAAGkS,UACvB,CACAD,EAAaxT,EAAKiB,OAAOM,GAAO,GAChC,KACF,CAEF,OAiBA,SAAepC,GAEb,IAAKqU,EACH,OAAO7P,EAAIxE,GAYb,GAAIqU,EAAWE,UACb,OAAOC,EAAYxU,GAerB,OAbAwP,EAAU3O,EAAKhB,OAAO2P,QAAQ7K,UAC5BuK,EAAAA,EAAAA,GACErO,EAAK+F,eAAe,CAClBzF,MAAOkT,EAAWnS,IAClBA,IAAKrB,EAAKwC,UAIhB5D,EAAQS,MAAM,YACdT,EAAQS,MAAM,eACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACbV,EAAQU,KAAK,YACNiN,CACT,EAkBA,SAASA,EAAMpN,GAKb,OAAa,KAATA,EACKP,EAAQE,QACb8U,GACAC,EACAlF,EAAUkF,EAAaF,EAHlB/U,CAILO,GAIS,KAATA,EACKP,EAAQE,QACbgV,GACAD,EACAlF,EAAUoF,EAAmBJ,EAHxB/U,CAILO,GAIGwP,EAAUkF,EAAW1U,GAAQwU,EAAYxU,EAClD,CAgBA,SAAS4U,EAAiB5U,GACxB,OAAOP,EAAQE,QACbkV,GACAH,EACAF,EAHK/U,CAILO,EACJ,CAkBA,SAAS0U,EAAW1U,GAElB,OAAOuE,EAAGvE,EACZ,CAkBA,SAASwU,EAAYxU,GAEnB,OADAqU,EAAWC,WAAY,EAChB9P,EAAIxE,EACb,CACF,EA5TE+L,UAqCF,SAA2BjK,EAAQ4D,GACjC,IAGInF,EAEA4M,EAEA2H,EAEAC,EATA3S,EAAQN,EAAOV,OACfmC,EAAS,EAWb,KAAOnB,KAEL,GADA7B,EAAQuB,EAAOM,GAAO,GAClB+K,EAAM,CAER,GACiB,SAAf5M,EAAM0B,MACU,cAAf1B,EAAM0B,MAAwB1B,EAAMgU,UAErC,MAKuB,UAArBzS,EAAOM,GAAO,IAAiC,cAAf7B,EAAM0B,OACxC1B,EAAMgU,WAAY,EAEtB,MAAO,GAAIO,GACT,GACuB,UAArBhT,EAAOM,GAAO,KACE,eAAf7B,EAAM0B,MAAwC,cAAf1B,EAAM0B,QACrC1B,EAAM+T,YAEPnH,EAAO/K,EACY,cAAf7B,EAAM0B,MAAsB,CAC9BsB,EAAS,EACT,KACF,MAEsB,aAAfhD,EAAM0B,OACf6S,EAAQ1S,GAGZ,MAAM4S,EAAQ,CACZ/S,KAA+B,cAAzBH,EAAOqL,GAAM,GAAGlL,KAAuB,OAAS,QACtDd,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,GAAM,GAAGhM,OACzCe,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOA,EAAOV,OAAS,GAAG,GAAGc,MAEhD+S,EAAQ,CACZhT,KAAM,QACNd,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,GAAM,GAAGhM,OACzCe,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOgT,GAAO,GAAG5S,MAEpCqF,EAAO,CACXtF,KAAM,YACNd,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,EAAO5J,EAAS,GAAG,GAAGrB,KACtDA,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOgT,EAAQ,GAAG,GAAG3T,QAuC9C,OArCA4T,EAAQ,CACN,CAAC,QAASC,EAAOtP,GACjB,CAAC,QAASuP,EAAOvP,IAInBqP,GAAQtR,EAAAA,EAAAA,GAAKsR,EAAOjT,EAAOU,MAAM2K,EAAO,EAAGA,EAAO5J,EAAS,IAG3DwR,GAAQtR,EAAAA,EAAAA,GAAKsR,EAAO,CAAC,CAAC,QAASxN,EAAM7B,KAKrCqP,GAAQtR,EAAAA,EAAAA,GACNsR,GACA5N,EAAAA,EAAAA,GACEzB,EAAQ7F,OAAOC,WAAWoV,WAAWxQ,KACrC5C,EAAOU,MAAM2K,EAAO5J,EAAS,EAAGuR,EAAQ,GACxCpP,IAKJqP,GAAQtR,EAAAA,EAAAA,GAAKsR,EAAO,CAClB,CAAC,OAAQxN,EAAM7B,GACf5D,EAAOgT,EAAQ,GACfhT,EAAOgT,EAAQ,GACf,CAAC,OAAQG,EAAOvP,KAIlBqP,GAAQtR,EAAAA,EAAAA,GAAKsR,EAAOjT,EAAOU,MAAMsS,EAAQ,IAGzCC,GAAQtR,EAAAA,EAAAA,GAAKsR,EAAO,CAAC,CAAC,OAAQC,EAAOtP,MACrCnD,EAAAA,EAAAA,GAAOT,EAAQqL,EAAMrL,EAAOV,OAAQ2T,GAC7BjT,CACT,EAtIEqF,WAiBF,SAA4BrF,GAC1B,IAAIM,GAAS,EACb,OAASA,EAAQN,EAAOV,QAAQ,CAC9B,MAAMb,EAAQuB,EAAOM,GAAO,GAEX,eAAf7B,EAAM0B,MACS,cAAf1B,EAAM0B,MACS,aAAf1B,EAAM0B,OAGNH,EAAOS,OAAOH,EAAQ,EAAkB,eAAf7B,EAAM0B,KAAwB,EAAI,GAC3D1B,EAAM0B,KAAO,OACbG,IAEJ,CACA,OAAON,CACT,GA7BM2S,GAAoB,CACxBjV,SA4TF,SAA0BC,EAAS8E,EAAIC,GACrC,OAYA,SAAuBxE,GAKrB,OAJAP,EAAQS,MAAM,YACdT,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACNgV,CACT,EAYA,SAASA,EAAenV,GACtB,OAAOqO,EAAAA,EAAAA,IAA0BrO,GAC7B8O,EAAkBrP,EAAS2V,EAA3BtG,CAAyC9O,GACzCoV,EAAapV,EACnB,CAYA,SAASoV,EAAapV,GACpB,OAAa,KAATA,EACKqV,EAAYrV,GAEdsN,EACL7N,EACA6V,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATKjI,CAULtN,EACJ,CAYA,SAASsV,EAAyBtV,GAChC,OAAOqO,EAAAA,EAAAA,IAA0BrO,GAC7B8O,EAAkBrP,EAAS+V,EAA3B1G,CAA4C9O,GAC5CqV,EAAYrV,EAClB,CAYA,SAASuV,EAA2BvV,GAClC,OAAOwE,EAAIxE,EACb,CAYA,SAASwV,EAAgBxV,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB2O,EACLlP,EACAgW,EACAjR,EACA,gBACA,sBACA,sBANKmK,CAOL3O,GAEGqV,EAAYrV,EACrB,CAYA,SAASyV,EAAmBzV,GAC1B,OAAOqO,EAAAA,EAAAA,IAA0BrO,GAC7B8O,EAAkBrP,EAAS4V,EAA3BvG,CAAwC9O,GACxCqV,EAAYrV,EAClB,CAYA,SAASqV,EAAYrV,GACnB,OAAa,KAATA,GACFP,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNoE,GAEFC,EAAIxE,EACb,CACF,GAndM2U,GAAyB,CAC7BnV,SAwdF,SAA+BC,EAAS8E,EAAIC,GAC1C,MAAM3D,EAAOjB,KACb,OAYA,SAAuBI,GACrB,OAAOuO,EAAajK,KAClBzD,EACApB,EACAiW,EACAC,EACA,YACA,kBACA,kBAPKpH,CAQLvO,EACJ,EAYA,SAAS0V,EAAmB1V,GAC1B,OAAOa,EAAKhB,OAAO2P,QAAQ7K,UACzBuK,EAAAA,EAAAA,GACErO,EAAK+F,eAAe/F,EAAKiB,OAAOjB,EAAKiB,OAAOV,OAAS,GAAG,IAAIoB,MAAM,GAAI,KAGtE+B,EAAGvE,GACHwE,EAAIxE,EACV,CAYA,SAAS2V,EAAqB3V,GAC5B,OAAOwE,EAAIxE,EACb,CACF,GAhhBM6U,GAA8B,CAClCrV,SAqhBF,SAAoCC,EAAS8E,EAAIC,GAC/C,OAcA,SAAiCxE,GAO/B,OAJAP,EAAQS,MAAM,aACdT,EAAQS,MAAM,mBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,mBACNyV,CACT,EAcA,SAASA,EAAuB5V,GAC9B,OAAa,KAATA,GACFP,EAAQS,MAAM,mBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,mBACbV,EAAQU,KAAK,aACNoE,GAEFC,EAAIxE,EACb,CACF,GC9lBO,MAAM6V,GAAkB,CAC7BhK,KAAM,kBACNrM,SAQF,SAAiCC,EAAS8E,EAAIC,GAC5C,MAAM3D,EAAOjB,KACb,OAYA,SAAeI,GAKb,OAJAP,EAAQS,MAAM,cACdT,EAAQS,MAAM,oBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,oBACNgN,CACT,EAYA,SAASA,EAAKnN,GACZ,OAAa,KAATA,GACFP,EAAQS,MAAM,eACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACbV,EAAQU,KAAK,cACNiN,GAEF5I,EAAIxE,EACb,CA6BA,SAASoN,EAAMpN,GAMb,OAAgB,KAATA,GAAe,2BAA4Ba,EAAKhB,OAAOC,WAC1D0E,EAAIxE,GACJuE,EAAGvE,EACT,CACF,EAvFEmH,WAAYiN,EAASjN,Y,eCGhB,MAAM2O,GAAY,CACvBjK,KAAM,YACNrM,SA4KF,SAA2BC,EAAS8E,GAClC,MAAMwR,EAAmBnW,KAAKC,OAAOC,WAAWiW,iBAAiBrR,KAC3DpE,EAAWV,KAAKU,SAChB4L,GAAS8J,EAAAA,GAAAA,GAAkB1V,GAGjC,IAAI2L,EACJ,OAYA,SAAejM,GAGb,OAFAiM,EAASjM,EACTP,EAAQS,MAAM,qBACPuM,EAAOzM,EAChB,EAYA,SAASyM,EAAOzM,GACd,GAAIA,IAASiM,EAEX,OADAxM,EAAQQ,QAAQD,GACTyM,EAET,MAAMlM,EAAQd,EAAQU,KAAK,qBAGrBiN,GAAQ4I,EAAAA,GAAAA,GAAkBhW,GAI1BmN,GACHC,GAAoB,IAAVA,GAAelB,GAAW6J,EAAiBpR,SAAS3E,GAC3D8U,GACH5I,GAAsB,IAAXA,GAAgBkB,GAAU2I,EAAiBpR,SAASrE,GAGlE,OAFAC,EAAM0V,MAAQnT,QAAmB,KAAXmJ,EAAgBkB,EAAOA,IAASjB,IAAW4I,IACjEvU,EAAM2V,OAASpT,QAAmB,KAAXmJ,EAAgB6I,EAAQA,IAAU1H,IAAUD,IAC5D5I,EAAGvE,EACZ,CACF,EAlOEmH,WAQF,SAA6BrF,EAAQ4D,GACnC,IAEIyH,EAEA6H,EAEAzN,EAEA4O,EAEAC,EAEAC,EAEAC,EAEA/S,EAhBAnB,GAAS,EAsBb,OAASA,EAAQN,EAAOV,QAEtB,GACuB,UAArBU,EAAOM,GAAO,IACY,sBAA1BN,EAAOM,GAAO,GAAGH,MACjBH,EAAOM,GAAO,GAAG8T,OAKjB,IAHA/I,EAAO/K,EAGA+K,KAEL,GACsB,SAApBrL,EAAOqL,GAAM,IACY,sBAAzBrL,EAAOqL,GAAM,GAAGlL,MAChBH,EAAOqL,GAAM,GAAG8I,OAEhBvQ,EAAQkB,eAAe9E,EAAOqL,GAAM,IAAIjF,WAAW,KACjDxC,EAAQkB,eAAe9E,EAAOM,GAAO,IAAI8F,WAAW,GACtD,CAKA,IACGpG,EAAOqL,GAAM,GAAG+I,QAAUpU,EAAOM,GAAO,GAAG6T,SAC3CnU,EAAOM,GAAO,GAAGF,IAAIqB,OAASzB,EAAOM,GAAO,GAAGjB,MAAMoC,QAAU,MAE7DzB,EAAOqL,GAAM,GAAGjL,IAAIqB,OACnBzB,EAAOqL,GAAM,GAAGhM,MAAMoC,OACtBzB,EAAOM,GAAO,GAAGF,IAAIqB,OACrBzB,EAAOM,GAAO,GAAGjB,MAAMoC,QACzB,GAGF,SAIF8S,EACEvU,EAAOqL,GAAM,GAAGjL,IAAIqB,OAASzB,EAAOqL,GAAM,GAAGhM,MAAMoC,OAAS,GAC5DzB,EAAOM,GAAO,GAAGF,IAAIqB,OAASzB,EAAOM,GAAO,GAAGjB,MAAMoC,OAAS,EAC1D,EACA,EACN,MAAMpC,EAAQkB,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,GAAM,GAAGjL,KAC1CA,EAAMG,OAAOC,OAAO,CAAC,EAAGR,EAAOM,GAAO,GAAGjB,OAC/CoV,GAAUpV,GAAQkV,GAClBE,GAAUrU,EAAKmU,GACfF,EAAkB,CAChBlU,KAAMoU,EAAM,EAAI,iBAAmB,mBACnClV,QACAe,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,GAAM,GAAGjL,MAEzCkU,EAAkB,CAChBnU,KAAMoU,EAAM,EAAI,iBAAmB,mBACnClV,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOM,GAAO,GAAGjB,OAC1Ce,OAEFqF,EAAO,CACLtF,KAAMoU,EAAM,EAAI,aAAe,eAC/BlV,MAAOkB,OAAOC,OAAO,CAAC,EAAGR,EAAOqL,GAAM,GAAGjL,KACzCA,IAAKG,OAAOC,OAAO,CAAC,EAAGR,EAAOM,GAAO,GAAGjB,QAE1C6T,EAAQ,CACN/S,KAAMoU,EAAM,EAAI,SAAW,WAC3BlV,MAAOkB,OAAOC,OAAO,CAAC,EAAG6T,EAAgBhV,OACzCe,IAAKG,OAAOC,OAAO,CAAC,EAAG8T,EAAgBlU,MAEzCJ,EAAOqL,GAAM,GAAGjL,IAAMG,OAAOC,OAAO,CAAC,EAAG6T,EAAgBhV,OACxDW,EAAOM,GAAO,GAAGjB,MAAQkB,OAAOC,OAAO,CAAC,EAAG8T,EAAgBlU,KAC3DoU,EAAa,GAGTxU,EAAOqL,GAAM,GAAGjL,IAAIqB,OAASzB,EAAOqL,GAAM,GAAGhM,MAAMoC,SACrD+S,GAAa7S,EAAAA,EAAAA,GAAK6S,EAAY,CAC5B,CAAC,QAASxU,EAAOqL,GAAM,GAAIzH,GAC3B,CAAC,OAAQ5D,EAAOqL,GAAM,GAAIzH,MAK9B4Q,GAAa7S,EAAAA,EAAAA,GAAK6S,EAAY,CAC5B,CAAC,QAAStB,EAAOtP,GACjB,CAAC,QAASyQ,EAAiBzQ,GAC3B,CAAC,OAAQyQ,EAAiBzQ,GAC1B,CAAC,QAAS6B,EAAM7B,KAMlB4Q,GAAa7S,EAAAA,EAAAA,GACX6S,GACAnP,EAAAA,EAAAA,GACEzB,EAAQ7F,OAAOC,WAAWoV,WAAWxQ,KACrC5C,EAAOU,MAAM2K,EAAO,EAAG/K,GACvBsD,IAKJ4Q,GAAa7S,EAAAA,EAAAA,GAAK6S,EAAY,CAC5B,CAAC,OAAQ/O,EAAM7B,GACf,CAAC,QAAS0Q,EAAiB1Q,GAC3B,CAAC,OAAQ0Q,EAAiB1Q,GAC1B,CAAC,OAAQsP,EAAOtP,KAId5D,EAAOM,GAAO,GAAGF,IAAIqB,OAASzB,EAAOM,GAAO,GAAGjB,MAAMoC,QACvDA,EAAS,EACT+S,GAAa7S,EAAAA,EAAAA,GAAK6S,EAAY,CAC5B,CAAC,QAASxU,EAAOM,GAAO,GAAIsD,GAC5B,CAAC,OAAQ5D,EAAOM,GAAO,GAAIsD,MAG7BnC,EAAS,GAEXhB,EAAAA,EAAAA,GAAOT,EAAQqL,EAAO,EAAG/K,EAAQ+K,EAAO,EAAGmJ,GAC3ClU,EAAQ+K,EAAOmJ,EAAWlV,OAASmC,EAAS,EAC5C,KACF,CAMNnB,GAAS,EACT,OAASA,EAAQN,EAAOV,QACQ,sBAA1BU,EAAOM,GAAO,GAAGH,OACnBH,EAAOM,GAAO,GAAGH,KAAO,QAG5B,OAAOH,CACT,GAyEA,SAASyU,GAAUxU,EAAOwB,GACxBxB,EAAMoG,QAAU5E,EAChBxB,EAAMwB,QAAUA,EAChBxB,EAAMsG,cAAgB9E,CACxB,CCvPO,MAAMiT,GAAW,CACtB3K,KAAM,WACNrM,SAOF,SAA0BC,EAAS8E,EAAIC,GACrC,IAAIJ,EAAO,EACX,OAcA,SAAepE,GAMb,OALAP,EAAQS,MAAM,YACdT,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACbV,EAAQS,MAAM,oBACPiN,CACT,EAcA,SAASA,EAAKnN,GACZ,OAAI8Q,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GACTyW,GAEFC,EAAW1W,EACpB,CAcA,SAASyW,EAAmBzW,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,IAEjEoE,EAAO,EACAuS,EAAyB3W,IAE3B0W,EAAW1W,EACpB,CAcA,SAAS2W,EAAyB3W,GAChC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBoE,EAAO,EACAwS,IAKG,KAAT5W,GAAwB,KAATA,GAAwB,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,KAChEoE,IAAS,IAET3E,EAAQQ,QAAQD,GACT2W,IAETvS,EAAO,EACAsS,EAAW1W,GACpB,CAYA,SAAS4W,EAAU5W,GACjB,OAAa,KAATA,GACFP,EAAQU,KAAK,oBACbV,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNoE,GAII,OAATvE,GAA0B,KAATA,GAAwB,KAATA,IAAeiO,EAAAA,EAAAA,IAAajO,GACvDwE,EAAIxE,IAEbP,EAAQQ,QAAQD,GACT4W,EACT,CAYA,SAASF,EAAW1W,GAClB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT6W,IAELC,EAAAA,EAAAA,IAAW9W,IACbP,EAAQQ,QAAQD,GACT0W,GAEFlS,EAAIxE,EACb,CAYA,SAAS6W,EAAiB7W,GACxB,OAAOuR,EAAAA,EAAAA,IAAkBvR,GAAQ+W,EAAW/W,GAAQwE,EAAIxE,EAC1D,CAYA,SAAS+W,EAAW/W,GAClB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBoE,EAAO,EACAyS,GAEI,KAAT7W,GAEFP,EAAQU,KAAK,oBAAoB8B,KAAO,gBACxCxC,EAAQS,MAAM,kBACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNoE,GAEFyS,EAAWhX,EACpB,CAcA,SAASgX,EAAWhX,GAElB,IAAc,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,KAAUoE,IAAS,GAAI,CAC3D,MAAM3D,EAAgB,KAATT,EAAcgX,EAAaD,EAExC,OADAtX,EAAQQ,QAAQD,GACTS,CACT,CACA,OAAO+D,EAAIxE,EACb,CACF,GCzNO,MAAMiX,GAAW,CACtBpL,KAAM,WACNrM,SAOF,SAA0BC,EAAS8E,EAAIC,GACrC,MAAM3D,EAAOjB,KAEb,IAAIqM,EAEA7J,EAEAuI,EACJ,OAYA,SAAe3K,GAIb,OAHAP,EAAQS,MAAM,YACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQD,GACTmN,CACT,EAgBA,SAASA,EAAKnN,GACZ,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT2Q,GAEI,KAAT3Q,GACFP,EAAQQ,QAAQD,GACT4Q,GAEI,KAAT5Q,GACFP,EAAQQ,QAAQD,GACTkX,IAILpG,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GACTmX,GAEF3S,EAAIxE,EACb,CAgBA,SAAS2Q,EAAgB3Q,GACvB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTgR,GAEI,KAAThR,GACFP,EAAQQ,QAAQD,GAChBoC,EAAQ,EACD6O,IAELH,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GACToX,GAEF5S,EAAIxE,EACb,CAYA,SAASgR,EAAkBhR,GACzB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTqX,GAEF7S,EAAIxE,EACb,CAYA,SAASsX,EAAQtX,GACf,OAAa,OAATA,EACKwE,EAAIxE,GAEA,KAATA,GACFP,EAAQQ,QAAQD,GACTuX,IAEL5W,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAc2M,EACPE,EAAiBxX,KAE1BP,EAAQQ,QAAQD,GACTsX,EACT,CAYA,SAASC,EAAavX,GACpB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTqX,GAEFC,EAAQtX,EACjB,CAYA,SAASqX,EAAWrX,GAClB,OAAgB,KAATA,EACHkC,EAAIlC,GACK,KAATA,EACAuX,EAAavX,GACbsX,EAAQtX,EACd,CAYA,SAASiR,EAAgBjR,GACvB,MAAMsJ,EAAQ,SACd,OAAItJ,IAASsJ,EAAMpB,WAAW9F,MAC5B3C,EAAQQ,QAAQD,GACCsJ,IAAVlH,EAAyBqV,EAAQxG,GAEnCzM,EAAIxE,EACb,CAYA,SAASyX,EAAMzX,GACb,OAAa,OAATA,EACKwE,EAAIxE,GAEA,KAATA,GACFP,EAAQQ,QAAQD,GACT0X,IAEL/W,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAc8M,EACPD,EAAiBxX,KAE1BP,EAAQQ,QAAQD,GACTyX,EACT,CAYA,SAASC,EAAW1X,GAClB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACT2X,GAEFF,EAAMzX,EACf,CAYA,SAAS2X,EAAS3X,GAChB,OAAa,KAATA,EACKkC,EAAIlC,GAEA,KAATA,GACFP,EAAQQ,QAAQD,GACT2X,GAEFF,EAAMzX,EACf,CAYA,SAASoX,EAAYpX,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZkC,EAAIlC,IAETW,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcyM,EACPI,EAAiBxX,KAE1BP,EAAQQ,QAAQD,GACToX,EACT,CAYA,SAASF,EAAYlX,GACnB,OAAa,OAATA,EACKwE,EAAIxE,GAEA,KAATA,GACFP,EAAQQ,QAAQD,GACT4X,IAELjX,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcuM,EACPM,EAAiBxX,KAE1BP,EAAQQ,QAAQD,GACTkX,EACT,CAYA,SAASU,EAAiB5X,GACxB,OAAgB,KAATA,EAAckC,EAAIlC,GAAQkX,EAAYlX,EAC/C,CAYA,SAAS4Q,EAAc5Q,GAErB,OAAI8Q,EAAAA,EAAAA,IAAW9Q,IACbP,EAAQQ,QAAQD,GACT6X,GAEFrT,EAAIxE,EACb,CAYA,SAAS6X,EAAS7X,GAEhB,OAAa,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,IACnCP,EAAQQ,QAAQD,GACT6X,GAEFC,EAAgB9X,EACzB,CAYA,SAAS8X,EAAgB9X,GACvB,OAAIW,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcmN,EACPN,EAAiBxX,KAEtBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACT8X,GAEF5V,EAAIlC,EACb,CAYA,SAASmX,EAAQnX,GAEf,OAAa,KAATA,IAAeuR,EAAAA,EAAAA,IAAkBvR,IACnCP,EAAQQ,QAAQD,GACTmX,GAEI,KAATnX,GAAwB,KAATA,IAAeqO,EAAAA,EAAAA,IAA0BrO,GACnD+X,EAAe/X,GAEjBwE,EAAIxE,EACb,CAYA,SAAS+X,EAAe/X,GACtB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTkC,GAII,KAATlC,GAAwB,KAATA,IAAe8Q,EAAAA,EAAAA,IAAW9Q,IAC3CP,EAAQQ,QAAQD,GACTgY,IAELrX,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcoN,EACPP,EAAiBxX,KAEtBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACT+X,GAEF7V,EAAIlC,EACb,CAYA,SAASgY,EAAqBhY,GAE5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAuR,EAAAA,EAAAA,IAAkBvR,IAElBP,EAAQQ,QAAQD,GACTgY,GAEFC,EAA0BjY,EACnC,CAaA,SAASiY,EAA0BjY,GACjC,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GACTkY,IAELvX,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcsN,EACPT,EAAiBxX,KAEtBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACTiY,GAEFF,EAAe/X,EACxB,CAaA,SAASkY,EAA4BlY,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOwE,EAAIxE,GAEA,KAATA,GAAwB,KAATA,GACjBP,EAAQQ,QAAQD,GAChBiM,EAASjM,EACFmY,IAELxX,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcuN,EACPV,EAAiBxX,KAEtBoM,EAAAA,EAAAA,IAAcpM,IAChBP,EAAQQ,QAAQD,GACTkY,IAETzY,EAAQQ,QAAQD,GACToY,EACT,CAYA,SAASD,EAA4BnY,GACnC,OAAIA,IAASiM,GACXxM,EAAQQ,QAAQD,GAChBiM,OAAStK,EACF0W,GAEI,OAATrY,EACKwE,EAAIxE,IAETW,EAAAA,EAAAA,IAAmBX,IACrB2K,EAAcwN,EACPX,EAAiBxX,KAE1BP,EAAQQ,QAAQD,GACTmY,EACT,CAYA,SAASC,EAA8BpY,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOwE,EAAIxE,GAEA,KAATA,GAAwB,KAATA,IAAeqO,EAAAA,EAAAA,IAA0BrO,GACnD+X,EAAe/X,IAExBP,EAAQQ,QAAQD,GACToY,EACT,CAaA,SAASC,EAAiCrY,GACxC,OAAa,KAATA,GAAwB,KAATA,IAAeqO,EAAAA,EAAAA,IAA0BrO,GACnD+X,EAAe/X,GAEjBwE,EAAIxE,EACb,CAYA,SAASkC,EAAIlC,GACX,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,gBACbV,EAAQU,KAAK,YACNoE,GAEFC,EAAIxE,EACb,CAgBA,SAASwX,EAAiBxX,GAKxB,OAJAP,EAAQU,KAAK,gBACbV,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNmY,CACT,CAgBA,SAASA,EAAgBtY,GAGvB,OAAOoM,EAAAA,EAAAA,IAAcpM,IACjBI,EAAAA,EAAAA,GACEX,EACA8Y,EACA,aACA1X,EAAKhB,OAAOC,WAAW2E,QAAQC,KAAKC,SAAS,qBACzChD,EACA,EANNvB,CAOEJ,GACFuY,EAAsBvY,EAC5B,CAgBA,SAASuY,EAAsBvY,GAE7B,OADAP,EAAQS,MAAM,gBACPyK,EAAY3K,EACrB,CACF,GC9rBO,MAAMwY,GAAiB,CAC5B3M,KAAM,iBACNrM,SAQF,SAAgCC,EAAS8E,EAAIC,GAC3C,MAAM3D,EAAOjB,KACb,OAYA,SAAeI,GAMb,OALAP,EAAQS,MAAM,aACdT,EAAQS,MAAM,eACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,eACbV,EAAQU,KAAK,aACNiN,CACT,EAGA,SAASA,EAAMpN,GAKb,OAAgB,KAATA,GAAe,2BAA4Ba,EAAKhB,OAAOC,WAC1D0E,EAAIxE,GACJuE,EAAGvE,EACT,CACF,EAxCEmH,WAAYiN,EAASjN,YCJhB,MAAMsR,GAAkB,CAC7B5M,KAAM,kBACNrM,SAOF,SAAiCC,EAAS8E,EAAIC,GAC5C,OAaA,SAAexE,GAGb,OAFAP,EAAQS,MAAM,mBACdT,EAAQQ,QAAQD,GACToN,CACT,EAaA,SAASA,EAAMpN,GACb,OAAIW,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQU,KAAK,mBACNoE,EAAGvE,IAELwE,EAAIxE,EACb,CACF,GC5CO,MAAM0Y,GAAW,CACtB7M,KAAM,WACNrM,SA8EF,SAA0BC,EAAS8E,EAAIC,GAErC,IAEIJ,EAEA7D,EAJA0S,EAAW,EAKf,OAcA,SAAejT,GAGb,OAFAP,EAAQS,MAAM,YACdT,EAAQS,MAAM,oBACP8P,EAAahQ,EACtB,EAYA,SAASgQ,EAAahQ,GACpB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBiT,IACOjD,IAETvQ,EAAQU,KAAK,oBACNwY,EAAQ3Y,GACjB,CAYA,SAAS2Y,EAAQ3Y,GAEf,OAAa,OAATA,EACKwE,EAAIxE,GAMA,KAATA,GACFP,EAAQS,MAAM,SACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,SACNwY,GAII,KAAT3Y,GACFO,EAAQd,EAAQS,MAAM,oBACtBkE,EAAO,EACA4O,EAAchT,KAEnBW,EAAAA,EAAAA,IAAmBX,IACrBP,EAAQS,MAAM,cACdT,EAAQQ,QAAQD,GAChBP,EAAQU,KAAK,cACNwY,IAITlZ,EAAQS,MAAM,gBACPQ,EAAKV,GACd,CAYA,SAASU,EAAKV,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAW,EAAAA,EAAAA,IAAmBX,IAEnBP,EAAQU,KAAK,gBACNwY,EAAQ3Y,KAEjBP,EAAQQ,QAAQD,GACTU,EACT,CAYA,SAASsS,EAAchT,GAErB,OAAa,KAATA,GACFP,EAAQQ,QAAQD,GAChBoE,IACO4O,GAIL5O,IAAS6O,GACXxT,EAAQU,KAAK,oBACbV,EAAQU,KAAK,YACNoE,EAAGvE,KAIZO,EAAM0B,KAAO,eACNvB,EAAKV,GACd,CACF,EA7NEyG,QAMF,SAAyB3E,GACvB,IAGIM,EAEAlC,EALA0Y,EAAgB9W,EAAOV,OAAS,EAChCyX,EAAiB,EAOrB,IACsC,eAAnC/W,EAAO+W,GAAgB,GAAG5W,MACU,UAAnCH,EAAO+W,GAAgB,GAAG5W,QACO,eAAlCH,EAAO8W,GAAe,GAAG3W,MACU,UAAlCH,EAAO8W,GAAe,GAAG3W,MAK3B,IAHAG,EAAQyW,IAGCzW,EAAQwW,GACf,GAA8B,iBAA1B9W,EAAOM,GAAO,GAAGH,KAAyB,CAE5CH,EAAO+W,GAAgB,GAAG5W,KAAO,kBACjCH,EAAO8W,GAAe,GAAG3W,KAAO,kBAChC4W,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAKJxW,EAAQyW,EAAiB,EACzBD,IACA,OAASxW,GAASwW,QACFjX,IAAVzB,EACEkC,IAAUwW,GAA2C,eAA1B9W,EAAOM,GAAO,GAAGH,OAC9C/B,EAAQkC,GAGVA,IAAUwW,GACgB,eAA1B9W,EAAOM,GAAO,GAAGH,OAEjBH,EAAO5B,GAAO,GAAG+B,KAAO,eACpBG,IAAUlC,EAAQ,IACpB4B,EAAO5B,GAAO,GAAGgC,IAAMJ,EAAOM,EAAQ,GAAG,GAAGF,IAC5CJ,EAAOS,OAAOrC,EAAQ,EAAGkC,EAAQlC,EAAQ,GACzC0Y,GAAiBxW,EAAQlC,EAAQ,EACjCkC,EAAQlC,EAAQ,GAElBA,OAAQyB,GAGZ,OAAOG,CACT,EA1DExB,SAgEF,SAAkBN,GAEhB,OACW,KAATA,GACgD,oBAAhDJ,KAAKkC,OAAOlC,KAAKkC,OAAOV,OAAS,GAAG,GAAGa,IAE3C,GCzDO,MAAMrB,GAAW,CACtB,GAAM+G,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMA,EACN,GAAMuF,GAIKnN,GAAiB,CAC5B,GAAMgP,GAIK/H,GAAc,CACzB,EAAE,GAAI4I,EACN,EAAE,GAAIA,EACN,GAAMA,GAIKlM,GAAO,CAClB,GAAMqM,EACN,GAAM/D,EACN,GAAM,CAACkE,EAAiBlE,GACxB,GAAMuE,EACN,GAAML,EACN,GAAMlE,EACN,GAAM4G,EACN,IAAOA,GAIIvL,GAAS,CACpB,GAAMuM,EACN,GAAMK,GAIK1M,GAAO,CAClB,EAAE,GAAI4M,EACN,EAAE,GAAIA,EACN,EAAE,GAAIA,EACN,GAAM0B,GACN,GAAMjC,EACN,GAAMkC,GACN,GAAM,CAACU,GAAUS,IACjB,GAAMuB,GACN,GAAM,CAACC,GAAiBxE,GACxB,GAAMG,EACN,GAAM0B,GACN,GAAM4C,IAIKxD,GAAa,CACxBxQ,KAAM,CAACoR,GAAWgD,IAIP/C,GAAmB,CAC9BrR,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICzFR,MAAMqU,GAAS,c,wCC4If,MAAMC,GAAM,CAAC,EAAEC,eAYFC,GAcX,SAAU5P,EAAO6P,EAAUC,GAKzB,MAJwB,kBAAbD,IACTC,EAAUD,EACVA,OAAWxX,GAcjB,SAAkByX,GAEhB,MAAMC,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjErZ,MAAO,CACLsW,SAAUgD,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAOpJ,IACnBlD,WAAYsM,EAAOtM,GACnB+G,gBAAiB0F,EACjB/F,mBAAoB+F,EACpB/G,WAAY4G,EAAOM,GACnBC,oBAAqBtJ,EACrBuJ,oBAAqBvJ,EACrBb,aAAc4J,EAAOM,EAAUrJ,GAC/BiI,SAAUc,EAAOd,EAAUjI,GAC3BwJ,aAAcN,EACdjZ,KAAMiZ,EACNO,cAAeP,EACf5K,WAAYyK,EAAOzK,GACnBoL,4BAA6B1J,EAC7B2J,sBAAuB3J,EACvB4J,sBAAuB5J,EACvB6J,SAAUd,EAAOc,IACjB7B,gBAAiBe,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1BhK,SAAUiJ,EAAOiB,GAAMhK,GACvBiK,aAAcf,EACd1C,SAAUuC,EAAOiB,GAAMhK,GACvBkK,aAAchB,EACdiB,MAAOpB,EAAOoB,IACd3F,MAAOxE,EACPgJ,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAO7R,GAAMsT,GAC1BC,cAAe1B,EAAO7R,IACtBwI,UAAWqJ,EAAOrJ,IAClBgL,UAAWC,EACXC,gBAAiB5K,EACjB6K,0BAA2B7K,EAC3B8K,oBAAqB9K,EACrB+K,cAAehC,EAAOpJ,IACtBqL,OAAQjC,EAAOiC,IACfzP,cAAewN,EAAOxN,KAExB7L,KAAM,CACJ0Z,WAAY6B,IACZC,mBAAoBC,EACpBpF,SAAUkF,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClB5O,WAAYwO,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBzJ,WAAY8I,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACfpM,aAAc8L,EAAOiB,GACrBjE,SAAUgD,EAAOkB,GACjB3C,aAAc+B,EACdtb,KAAMsb,EACNjN,WAAY2M,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACVjD,gBAAiBiD,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BzM,SAAUmL,EAAOuB,GACjBvC,aAAcsB,EACd/E,SAAUyE,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACdlI,MAAOmI,EACPC,UAAWC,EACXnJ,WAAYoJ,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACfvL,UAAWuL,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACR1P,cAAe0P,MAGnByC,GAAU9E,GAASD,GAAW,CAAC,GAAGgF,iBAAmB,IAGrD,MAAM1d,EAAO,CAAC,EACd,OAAO2d,EAUP,SAASA,EAAQvc,GAEf,IAAIwc,EAAO,CACTrc,KAAM,OACNsc,SAAU,IAGZ,MAAM7Y,EAAU,CACd5E,MAAO,CAACwd,GACRE,WAAY,GACZnF,SACAnZ,QACAC,OACAsQ,SACAgO,SACAC,UACAC,WAGIC,EAAY,GAClB,IAAIxc,GAAS,EACb,OAASA,EAAQN,EAAOV,QAGtB,GAC4B,gBAA1BU,EAAOM,GAAO,GAAGH,MACS,kBAA1BH,EAAOM,GAAO,GAAGH,KAEjB,GAAyB,UAArBH,EAAOM,GAAO,GAChBwc,EAAUnb,KAAKrB,OACV,CAELA,EAAQyc,EAAY/c,EADP8c,EAAUxY,MACWhE,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQN,EAAOV,QAAQ,CAC9B,MAAM0d,EAAUzF,EAAOvX,EAAOM,GAAO,IACjC4W,GAAI1U,KAAKwa,EAAShd,EAAOM,GAAO,GAAGH,OACrC6c,EAAQhd,EAAOM,GAAO,GAAGH,MAAMqC,KAC7BjC,OAAOC,OACL,CACEsE,eAAgB9E,EAAOM,GAAO,GAAGwE,gBAEnClB,GAEF5D,EAAOM,GAAO,GAGpB,CAGA,GAAIsD,EAAQ8Y,WAAWpd,OAAS,EAAG,CACjC,MAAMuF,EAAOjB,EAAQ8Y,WAAW9Y,EAAQ8Y,WAAWpd,OAAS,IAC5CuF,EAAK,IAAMoY,IACnBza,KAAKoB,OAAS/D,EAAWgF,EAAK,GACxC,CA0BA,IAvBA2X,EAAKU,SAAW,CACd7d,MAAOY,GACLD,EAAOV,OAAS,EACZU,EAAO,GAAG,GAAGX,MACb,CACEmC,KAAM,EACN6E,OAAQ,EACR5E,OAAQ,IAGhBrB,IAAKH,GACHD,EAAOV,OAAS,EACZU,EAAOA,EAAOV,OAAS,GAAG,GAAGc,IAC7B,CACEoB,KAAM,EACN6E,OAAQ,EACR5E,OAAQ,KAMlBnB,GAAS,IACAA,EAAQiX,EAAOC,WAAWlY,QACjCkd,EAAOjF,EAAOC,WAAWlX,GAAOkc,IAASA,EAE3C,OAAOA,CACT,CAQA,SAASO,EAAY/c,EAAQX,EAAOC,GAClC,IAIIyZ,EAEA9V,EAEAka,EAEAzS,EAVApK,EAAQjB,EAAQ,EAChB+d,GAAoB,EACpBC,GAAa,EASjB,OAAS/c,GAAShB,GAAQ,CACxB,MAAM0D,EAAQhD,EAAOM,GAmCrB,GAjCoB,kBAAlB0C,EAAM,GAAG7C,MACS,gBAAlB6C,EAAM,GAAG7C,MACS,eAAlB6C,EAAM,GAAG7C,MAEQ,UAAb6C,EAAM,GACRoa,IAEAA,IAEF1S,OAAW7K,GACgB,oBAAlBmD,EAAM,GAAG7C,KACD,UAAb6C,EAAM,MAEN+V,GACCrO,GACA0S,GACAD,IAEDA,EAAsB7c,GAExBoK,OAAW7K,GAGK,eAAlBmD,EAAM,GAAG7C,MACS,kBAAlB6C,EAAM,GAAG7C,MACS,mBAAlB6C,EAAM,GAAG7C,MACS,mBAAlB6C,EAAM,GAAG7C,MACS,6BAAlB6C,EAAM,GAAG7C,OAITuK,OAAW7K,IAGTud,GACa,UAAbpa,EAAM,IACY,mBAAlBA,EAAM,GAAG7C,OACY,IAAtBid,GACc,SAAbpa,EAAM,KACa,kBAAlBA,EAAM,GAAG7C,MACU,gBAAlB6C,EAAM,GAAG7C,MACb,CACA,GAAI4Y,EAAU,CACZ,IAAIuE,EAAYhd,EAEhB,IADA2C,OAAYpD,EACLyd,KAAa,CAClB,MAAMC,EAAYvd,EAAOsd,GACzB,GACwB,eAAtBC,EAAU,GAAGpd,MACS,oBAAtBod,EAAU,GAAGpd,KACb,CACA,GAAqB,SAAjBod,EAAU,GAAe,SACzBta,IACFjD,EAAOiD,GAAW,GAAG9C,KAAO,kBAC5Bkd,GAAa,GAEfE,EAAU,GAAGpd,KAAO,aACpB8C,EAAYqa,CACd,MAAO,GACiB,eAAtBC,EAAU,GAAGpd,MACS,qBAAtBod,EAAU,GAAGpd,MACS,+BAAtBod,EAAU,GAAGpd,MACS,qBAAtBod,EAAU,GAAGpd,MACS,mBAAtBod,EAAU,GAAGpd,KAIb,KAEJ,CAEEgd,KACEla,GAAaka,EAAsBla,KAErC8V,EAASyE,SAAU,GAIrBzE,EAAS3Y,IAAMG,OAAOC,OACpB,CAAC,EACDyC,EAAYjD,EAAOiD,GAAW,GAAG5D,MAAQ2D,EAAM,GAAG5C,KAEpDJ,EAAOS,OAAOwC,GAAa3C,EAAO,EAAG,CAAC,OAAQyY,EAAU/V,EAAM,KAC9D1C,IACAhB,GACF,CAGsB,mBAAlB0D,EAAM,GAAG7C,OACX4Y,EAAW,CACT5Y,KAAM,WACNqd,SAAS,EACTne,MAAOkB,OAAOC,OAAO,CAAC,EAAGwC,EAAM,GAAG3D,OAElCe,SAAKP,GAGPG,EAAOS,OAAOH,EAAO,EAAG,CAAC,QAASyY,EAAU/V,EAAM,KAClD1C,IACAhB,IACA6d,OAAsBtd,EACtB6K,GAAW,EAEf,CACF,CAEA,OADA1K,EAAOX,GAAO,GAAGme,QAAUH,EACpB/d,CACT,CAcA,SAASsd,EAAQa,EAAKjW,GACpB5I,EAAK6e,GAAOjW,CACd,CAYA,SAASqV,EAAQY,GACf,OAAO7e,EAAK6e,EACd,CAYA,SAAS/F,EAAO1N,EAAQ0T,GACtB,OAAOrS,EAOP,SAASA,EAAK5M,GACZL,EAAMoE,KAAK1E,KAAMkM,EAAOvL,GAAQA,GAC5Bif,GAAKA,EAAIlb,KAAK1E,KAAMW,EAC1B,CACF,CAMA,SAASkQ,IACP7Q,KAAKkB,MAAM2C,KAAK,CACdxB,KAAM,WACNsc,SAAU,IAEd,CAgBA,SAASre,EAAMuf,EAAMlf,EAAOmf,GAU1B,OATe9f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAEvCmd,SAAS9a,KAAKgc,GACrB7f,KAAKkB,MAAM2C,KAAKgc,GAChB7f,KAAK4e,WAAW/a,KAAK,CAAClD,EAAOmf,IAE7BD,EAAKT,SAAW,CACd7d,MAAOY,GAAMxB,EAAMY,QAEdse,CACT,CAUA,SAAS/D,EAAO8D,GACd,OAAO1K,EAOP,SAASA,EAAMvU,GACTif,GAAKA,EAAIlb,KAAK1E,KAAMW,GACxBJ,EAAKmE,KAAK1E,KAAMW,EAClB,CACF,CAYA,SAASJ,EAAKI,EAAOof,GACnB,MAAMF,EAAO7f,KAAKkB,MAAMsF,MAClB+G,EAAOvN,KAAK4e,WAAWpY,MAC7B,IAAK+G,EACH,MAAM,IAAIyS,MACR,iBACErf,EAAM0B,KACN,OACA4d,EAAAA,GAAAA,GAAkB,CAChB1e,MAAOZ,EAAMY,MACbe,IAAK3B,EAAM2B,MAEb,yBAEC,GAAIiL,EAAK,GAAGlL,OAAS1B,EAAM0B,KAChC,GAAI0d,EACFA,EAAYrb,KAAK1E,KAAMW,EAAO4M,EAAK,QAC9B,EACWA,EAAK,IAAM4R,IACnBza,KAAK1E,KAAMW,EAAO4M,EAAK,GACjC,CAGF,OADAsS,EAAKT,SAAS9c,IAAMH,GAAMxB,EAAM2B,KACzBud,CACT,CAMA,SAAShB,IACP,OAAOqB,EAAAA,EAAAA,GAASlgB,KAAKkB,MAAMsF,MAC7B,CAUA,SAAS6U,IACPyD,EAAQ,+BAA+B,EACzC,CAMA,SAAS3D,EAAqBxa,GAC5B,GAAIoe,EAAQ,+BAAgC,CACzB/e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCD,MAAQ0M,OAAOkS,SAASngB,KAAKgH,eAAerG,GAAQ,IAC7Dme,EAAQ,8BACV,CACF,CAMA,SAASjC,IACP,MAAM/b,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC4e,KAAOtf,CACd,CAMA,SAASgc,IACP,MAAMhc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCoS,KAAO9S,CACd,CAMA,SAAS8b,IAEHmC,EAAQ,oBACZ/e,KAAK6Q,SACLiO,EAAQ,kBAAkB,GAC5B,CAMA,SAASpC,IACP,MAAM5b,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCkI,MAAQ5I,EAAKuf,QAAQ,2BAA4B,IACtDvB,EAAQ,iBACV,CAMA,SAAS/B,IACP,MAAMjc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCkI,MAAQ5I,EAAKuf,QAAQ,eAAgB,GAC5C,CAMA,SAASnD,EAA4Bvc,GACnC,MAAM0U,EAAQrV,KAAK6e,SACbgB,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAC5Cqe,EAAKxK,MAAQA,EACbwK,EAAKzQ,YAAaE,EAAAA,EAAAA,GAChBtP,KAAKgH,eAAerG,IACpB4Q,aACJ,CAMA,SAAS4L,IACP,MAAMrc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC8e,MAAQxf,CACf,CAMA,SAASmc,IACP,MAAMnc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC+e,IAAMzf,CACb,CAMA,SAASkb,EAAyBrb,GAChC,MAAMkf,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAC5C,IAAKqe,EAAKW,MAAO,CACf,MAAMA,EAAQxgB,KAAKgH,eAAerG,GAAOa,OACzCqe,EAAKW,MAAQA,CACf,CACF,CAMA,SAASlC,IACPQ,EAAQ,gCAAgC,EAC1C,CAMA,SAASV,EAAgCzd,GAC1BX,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCgf,MAAqD,KAA7CxgB,KAAKgH,eAAerG,GAAO2H,WAAW,GAAY,EAAI,CACrE,CAMA,SAAS4V,IACPY,EAAQ,+BACV,CAOA,SAAS/E,EAAYpZ,GACnB,MAAMkf,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAC5C,IAAIuF,EAAO8Y,EAAKlB,SAASkB,EAAKlB,SAASnd,OAAS,GAC3CuF,GAAsB,SAAdA,EAAK1E,OAEhB0E,EAAOY,KAEPZ,EAAKqY,SAAW,CACd7d,MAAOY,GAAMxB,EAAMY,QAGrBse,EAAKlB,SAAS9a,KAAKkD,IAErB/G,KAAKkB,MAAM2C,KAAKkD,EAClB,CAOA,SAASqV,EAAWzb,GAClB,MAAMoG,EAAO/G,KAAKkB,MAAMsF,MACxBO,EAAK2C,OAAS1J,KAAKgH,eAAerG,GAClCoG,EAAKqY,SAAS9c,IAAMH,GAAMxB,EAAM2B,IAClC,CAOA,SAASqb,EAAiBhd,GACxB,MAAMmF,EAAU9F,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAE/C,GAAIud,EAAQ,eAAgB,CAI1B,OAHajZ,EAAQ6Y,SAAS7Y,EAAQ6Y,SAASnd,OAAS,GACnD4d,SAAS9c,IAAMH,GAAMxB,EAAM2B,UAChCwc,EAAQ,cAEV,EAEGC,EAAQ,iCACTtF,EAAOE,eAAe5U,SAASe,EAAQzD,QAEvC0X,EAAYrV,KAAK1E,KAAMW,GACvByb,EAAW1X,KAAK1E,KAAMW,GAE1B,CAOA,SAASyc,IACP0B,EAAQ,eAAe,EACzB,CAOA,SAASzB,IACP,MAAMvc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCkI,MAAQ5I,CACf,CAOA,SAASwc,IACP,MAAMxc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCkI,MAAQ5I,CACf,CAOA,SAASkc,IACP,MAAMlc,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvCkI,MAAQ5I,CACf,CAOA,SAAS8c,IACP,MAAMiC,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAI5C,GAAIud,EAAQ,eAAgB,CAE1B,MAAM0B,EAAgB1B,EAAQ,kBAAoB,WAClDc,EAAKxd,MAAQ,YAEbwd,EAAKY,cAAgBA,SAEdZ,EAAKU,WACLV,EAAKS,KACd,aAEST,EAAKzQ,kBAELyQ,EAAKxK,MAEdyJ,EAAQ,gBACV,CAOA,SAASvB,IACP,MAAMsC,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAI5C,GAAIud,EAAQ,eAAgB,CAE1B,MAAM0B,EAAgB1B,EAAQ,kBAAoB,WAClDc,EAAKxd,MAAQ,YAEbwd,EAAKY,cAAgBA,SAEdZ,EAAKU,WACLV,EAAKS,KACd,aAEST,EAAKzQ,kBAELyQ,EAAKxK,MAEdyJ,EAAQ,gBACV,CAOA,SAASpB,EAAgB/c,GACvB,MAAM8G,EAASzH,KAAKgH,eAAerG,GAC7B+f,EAAW1gB,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAGhDkf,EAASrL,OAAQsL,EAAAA,GAAAA,GAAalZ,GAE9BiZ,EAAStR,YAAaE,EAAAA,EAAAA,GAAoB7H,GAAQ8J,aACpD,CAOA,SAASiM,IACP,MAAMoD,EAAW5gB,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAC1CkI,EAAQ1J,KAAK6e,SACbgB,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAG5C,GADAsd,EAAQ,eAAe,GACL,SAAde,EAAKxd,KAAiB,CAGxB,MAAMsc,EAAWiC,EAASjC,SAC1BkB,EAAKlB,SAAWA,CAClB,MACEkB,EAAKgB,IAAMnX,CAEf,CAOA,SAASoU,IACP,MAAMhd,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC+e,IAAMzf,CACb,CAOA,SAASid,IACP,MAAMjd,EAAOd,KAAK6e,SACL7e,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC8e,MAAQxf,CACf,CAOA,SAASmd,IACPa,EAAQ,cACV,CAOA,SAAStD,IACPsD,EAAQ,gBAAiB,YAC3B,CAOA,SAASjB,EAAsBld,GAC7B,MAAM0U,EAAQrV,KAAK6e,SACbgB,EAAO7f,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GAG5Cqe,EAAKxK,MAAQA,EAEbwK,EAAKzQ,YAAaE,EAAAA,EAAAA,GAChBtP,KAAKgH,eAAerG,IACpB4Q,cACFuN,EAAQ,gBAAiB,OAC3B,CAOA,SAASxC,EAA+B3b,GACtCme,EAAQ,yBAA0Bne,EAAM0B,KAC1C,CAMA,SAASoa,EAA8B9b,GACrC,MAAMG,EAAOd,KAAKgH,eAAerG,GAC3B0B,EAAO0c,EAAQ,0BAErB,IAAIrV,EACJ,GAAIrH,EACFqH,GAAQoX,EAAAA,GAAAA,GACNhgB,EACS,oCAATuB,EAA6C,GAAK,IAEpDyc,EAAQ,8BACH,CAELpV,GADe0K,EAAAA,EAAAA,GAA8BtT,EAE/C,CACA,MAAMiG,EAAO/G,KAAKkB,MAAMsF,MACxBO,EAAK2C,OAASA,EACd3C,EAAKqY,SAAS9c,IAAMH,GAAMxB,EAAM2B,IAClC,CAMA,SAAS4Z,EAAuBvb,GAC9Byb,EAAW1X,KAAK1E,KAAMW,GACTX,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC+e,IAAMvgB,KAAKgH,eAAerG,EACjC,CAMA,SAASsb,EAAoBtb,GAC3Byb,EAAW1X,KAAK1E,KAAMW,GACTX,KAAKkB,MAAMlB,KAAKkB,MAAMM,OAAS,GACvC+e,IAAM,UAAYvgB,KAAKgH,eAAerG,EAC7C,CAOA,SAAS2M,IACP,MAAO,CACLjL,KAAM,aACNsc,SAAU,GAEd,CAGA,SAASzE,IACP,MAAO,CACL7X,KAAM,OACN+d,KAAM,KACNxM,KAAM,KACNlK,MAAO,GAEX,CAGA,SAASoP,IACP,MAAO,CACLzW,KAAM,aACNqH,MAAO,GAEX,CAGA,SAASyF,IACP,MAAO,CACL9M,KAAM,aACN+M,WAAY,GACZiG,MAAO,KACPiL,MAAO,KACPC,IAAK,GAET,CAGA,SAAS7F,KACP,MAAO,CACLrY,KAAM,WACNsc,SAAU,GAEd,CAGA,SAASnO,KAEP,MAAO,CACLnO,KAAM,UACNme,WAAOze,EACP4c,SAAU,GAEd,CAGA,SAAShE,KACP,MAAO,CACLtY,KAAM,QAEV,CAGA,SAASwY,KACP,MAAO,CACLxY,KAAM,OACNqH,MAAO,GAEX,CAGA,SAASsR,KACP,MAAO,CACL3Y,KAAM,QACNie,MAAO,KACPC,IAAK,GACLM,IAAK,KAET,CAGA,SAAShH,KACP,MAAO,CACLxX,KAAM,OACNie,MAAO,KACPC,IAAK,GACL5B,SAAU,GAEd,CAMA,SAAS5W,GAAKpH,GACZ,MAAO,CACL0B,KAAM,OACN0e,QAAwB,gBAAfpgB,EAAM0B,KACfd,MAAO,KACPyf,OAAQrgB,EAAM+e,QACdf,SAAU,GAEd,CAMA,SAAS1D,GAASta,GAChB,MAAO,CACL0B,KAAM,WACN2e,OAAQrgB,EAAM+e,QACduB,QAAS,KACTtC,SAAU,GAEd,CAGA,SAASpO,KACP,MAAO,CACLlO,KAAM,YACNsc,SAAU,GAEd,CAGA,SAAS9C,KACP,MAAO,CACLxZ,KAAM,SACNsc,SAAU,GAEd,CAGA,SAAShX,KACP,MAAO,CACLtF,KAAM,OACNqH,MAAO,GAEX,CAGA,SAAS0C,KACP,MAAO,CACL/J,KAAM,gBAEV,CACF,CA3kCW6e,CAAS1H,EAAT0H,CChLJ,SAAqBhf,GAC1B,MAAQ8C,EAAY9C,KAGpB,OAAOA,CACT,CD4KMif,CEvKC,SAAe3H,GACpB,MAAM4H,EAAW5H,GAAW,CAAC,EAMvBvZ,EAAS,CACb2P,QAAS,GACTpM,KAAM,CAAC,EACPtD,YANAmhB,EAAAA,EAAAA,GAAkB,CAACC,KAAuBF,EAASG,YAAc,KAOjE5hB,QAASuM,EAAOvM,GAChBqB,SAAUkL,EAAOlL,GACjB8C,KAAMoI,EAAOpI,GACb2D,OAAQyE,EAAOzE,GACfE,KAAMuE,EAAOvE,IAEf,OAAO1H,EAKP,SAASiM,EAAOhF,GACd,OAEA,SAAiB0B,GACf,OAAOF,EAAgBzI,EAAQiH,EAAS0B,EAC1C,CACF,CACF,CF2IQ4Y,CAAMhI,GAASxY,WAAWsD,MDxK3B,WACL,IAKImd,EALAlZ,EAAS,EACTsI,EAAS,GAETtP,GAAQ,EAGZ,OAGA,SAAsBmI,EAAO6P,EAAUjX,GAErC,MAAM4F,EAAS,GAEf,IAAIwZ,EAEA7gB,EAEAkF,EAEA4b,EAEAvhB,EAaJ,IAVAsJ,EAAQmH,EAASnH,EAAMwW,SAAS3G,GAChCxT,EAAgB,EAChB8K,EAAS,GACLtP,IAE0B,QAAxBmI,EAAMpB,WAAW,IACnBvC,IAEFxE,OAAQQ,GAEHgE,EAAgB2D,EAAMlI,QAAQ,CAMnC,GALA2X,GAAOyI,UAAY7b,EACnB2b,EAAQvI,GAAO0I,KAAKnY,GACpBiY,EACED,QAAyB3f,IAAhB2f,EAAMlf,MAAsBkf,EAAMlf,MAAQkH,EAAMlI,OAC3DpB,EAAOsJ,EAAMpB,WAAWqZ,IACnBD,EAAO,CACV7Q,EAASnH,EAAM9G,MAAMmD,GACrB,KACF,CACA,GAAa,KAAT3F,GAAe2F,IAAkB4b,GAAeF,EAClDvZ,EAAOrE,MAAM,GACb4d,OAAmB1f,OAUnB,OARI0f,IACFvZ,EAAOrE,MAAM,GACb4d,OAAmB1f,GAEjBgE,EAAgB4b,IAClBzZ,EAAOrE,KAAK6F,EAAM9G,MAAMmD,EAAe4b,IACvCpZ,GAAUoZ,EAAc5b,GAElB3F,GACN,KAAK,EACH8H,EAAOrE,KAAK,OACZ0E,IACA,MAEF,KAAK,EAGH,IAFA1H,EAA+B,EAAxBihB,KAAKC,KAAKxZ,EAAS,GAC1BL,EAAOrE,MAAM,GACN0E,IAAW1H,GAAMqH,EAAOrE,MAAM,GACrC,MAEF,KAAK,GACHqE,EAAOrE,MAAM,GACb0E,EAAS,EACT,MAEF,QACEkZ,GAAmB,EACnBlZ,EAAS,EAIfxC,EAAgB4b,EAAc,CAChC,CAMA,OALIrf,IACEmf,GAAkBvZ,EAAOrE,MAAM,GAC/BgN,GAAQ3I,EAAOrE,KAAKgN,GACxB3I,EAAOrE,KAAK,OAEPqE,CACT,CACF,CC+EwC8Z,GAAatY,EAAO6P,GAAU,KAGpE,EAglCF,SAASpX,GAAM8f,GACb,MAAO,CACLve,KAAMue,EAAEve,KACR6E,OAAQ0Z,EAAE1Z,OACV5E,OAAQse,EAAEte,OAEd,CAOA,SAAS4a,GAAU2D,EAAUX,GAC3B,IAAI/e,GAAS,EACb,OAASA,EAAQ+e,EAAW/f,QAAQ,CAClC,MAAMkI,EAAQ6X,EAAW/e,GACrB2I,MAAMC,QAAQ1B,GAChB6U,GAAU2D,EAAUxY,GAEpByY,GAAUD,EAAUxY,EAExB,CACF,CAOA,SAASyY,GAAUD,EAAUC,GAE3B,IAAIxC,EACJ,IAAKA,KAAOwC,EACV,GAAI/I,GAAI1U,KAAKyd,EAAWxC,GACtB,GAAY,mBAARA,EAA0B,CAC5B,MAAMyC,EAAQD,EAAUxC,GACpByC,GACFF,EAASvC,GAAK9b,QAAQue,EAE1B,MAAO,GAAY,eAARzC,EAAsB,CAC/B,MAAMyC,EAAQD,EAAUxC,GACpByC,GACFF,EAASvC,GAAK9b,QAAQue,EAE1B,MAAO,GAAY,UAARzC,GAA2B,SAARA,EAAgB,CAC5C,MAAMyC,EAAQD,EAAUxC,GACpByC,GACF3f,OAAOC,OAAOwf,EAASvC,GAAMyC,EAEjC,CAGN,CAGA,SAASjD,GAAekD,EAAMD,GAC5B,MAAIC,EACI,IAAIrC,MACR,iBACEqC,EAAKhgB,KACL,OACA4d,EAAAA,GAAAA,GAAkB,CAChB1e,MAAO8gB,EAAK9gB,MACZe,IAAK+f,EAAK/f,MAEZ,0BACA8f,EAAM/f,KACN,OACA4d,EAAAA,GAAAA,GAAkB,CAChB1e,MAAO6gB,EAAM7gB,MACbe,IAAK8f,EAAM9f,MAEb,aAGE,IAAI0d,MACR,oCACEoC,EAAM/f,KACN,OACA4d,EAAAA,GAAAA,GAAkB,CAChB1e,MAAO6gB,EAAM7gB,MACbe,IAAK8f,EAAM9f,MAEb,kBAGR,CG31Ce,SAASggB,GAAY9I,GAkBlC/W,OAAOC,OAAO1C,KAAM,CAACuiB,OAhBLC,IAEd,MAAMpB,EAAmCphB,KAAKc,KAAK,YAEnD,OAAOwY,GACLkJ,EACA/f,OAAOC,OAAO,CAAC,EAAG0e,EAAU5H,EAAS,CAInC+H,WAAYvhB,KAAKc,KAAK,wBAA0B,GAChD0d,gBAAiBxe,KAAKc,KAAK,2BAA6B,KAE3D,GAIL,C,kDC6BO,SAAS2hB,EAAa/Y,GAE3B,MAAMF,EAAS,GACf,IAAIhH,GAAS,EACTjB,EAAQ,EACRmhB,EAAO,EACX,OAASlgB,EAAQkH,EAAMlI,QAAQ,CAC7B,MAAMpB,EAAOsJ,EAAMpB,WAAW9F,GAE9B,IAAI6d,EAAU,GAGd,GACW,KAATjgB,IACAuR,EAAAA,EAAAA,IAAkBjI,EAAMpB,WAAW9F,EAAQ,MAC3CmP,EAAAA,EAAAA,IAAkBjI,EAAMpB,WAAW9F,EAAQ,IAE3CkgB,EAAO,OAGJ,GAAItiB,EAAO,IACT,oBAAoB6T,KAAKtK,OAAOC,aAAaxJ,MAChDigB,EAAU1W,OAAOC,aAAaxJ,SAI7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAMS,EAAO6I,EAAMpB,WAAW9F,EAAQ,GAGlCpC,EAAO,OAASS,EAAO,OAASA,EAAO,OACzCwf,EAAU1W,OAAOC,aAAaxJ,EAAMS,GACpC6hB,EAAO,GAIPrC,EAAU,QAEd,MAGEA,EAAU1W,OAAOC,aAAaxJ,GAE5BigB,IACF7W,EAAO3F,KAAK6F,EAAM9G,MAAMrB,EAAOiB,GAAQmgB,mBAAmBtC,IAC1D9e,EAAQiB,EAAQkgB,EAAO,EACvBrC,EAAU,IAERqC,IACFlgB,GAASkgB,EACTA,EAAO,EAEX,CACA,OAAOlZ,EAAOK,KAAK,IAAMH,EAAM9G,MAAMrB,EACvC,C,yBC9FA,MAAM6X,EAAM,CAAC,EAAEC,eA0Cf,SAASuJ,EAAMlZ,GACb,OAAOC,OAAOD,GAAS,IAAImZ,aAC7B,CC7CO,SAASC,EAAkB7Y,EAAO4V,GACvC,MAAMkD,EAAKpZ,OAAOkW,EAAKzQ,YAAYyT,cAC7BG,EAASP,EAAaM,EAAGxR,eACzB/O,EAAQyH,EAAMgZ,cAAcC,QAAQH,GAE1C,IAAII,GAEW,IAAX3gB,GACFyH,EAAMgZ,cAAcpf,KAAKkf,GACzB9Y,EAAMmZ,eAAeL,GAAM,EAC3BI,EAAUlZ,EAAMgZ,cAAczhB,SAE9ByI,EAAMmZ,eAAeL,KACrBI,EAAU3gB,EAAQ,GAGpB,MAAM6gB,EAAepZ,EAAMmZ,eAAeL,GAGpClJ,EAAO,CACXxX,KAAM,UACN8O,QAAS,IACTmS,WAAY,CACVC,KAAM,IAAMtZ,EAAMuZ,cAAgB,MAAQR,EAC1CD,GACE9Y,EAAMuZ,cACN,SACAR,GACCK,EAAe,EAAI,IAAMA,EAAe,IAC3CI,iBAAiB,EACjBC,gBAAiB,CAAC,mBAEpB/E,SAAU,CAAC,CAACtc,KAAM,OAAQqH,MAAOC,OAAOwZ,MAE1ClZ,EAAM0Z,MAAM9D,EAAMhG,GAGlB,MAAM+J,EAAM,CACVvhB,KAAM,UACN8O,QAAS,MACTmS,WAAY,CAAC,EACb3E,SAAU,CAAC9E,IAGb,OADA5P,EAAM0Z,MAAM9D,EAAM+D,GACX3Z,EAAM4Z,UAAUhE,EAAM+D,EAC/B,CCpCO,SAASE,EAAO7Z,EAAO4V,GAC5B,MAAMkE,EAAUlE,EAAKY,cACrB,IAAIuD,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAOnE,EAAKxK,OAASwK,EAAKzQ,YAAc,KAGlC,mBAAdyQ,EAAKxd,KACP,MAAO,CAACA,KAAM,OAAQqH,MAAO,KAAOmW,EAAKgB,IAAMmD,GAGjD,MAAMC,EAAWha,EAAMuB,IAAIqU,GACrBtV,EAAO0Z,EAAS,GAElB1Z,GAAsB,SAAdA,EAAKlI,KACfkI,EAAKb,MAAQ,IAAMa,EAAKb,MAExBua,EAASre,QAAQ,CAACvD,KAAM,OAAQqH,MAAO,MAGzC,MAAM3C,EAAOkd,EAASA,EAASziB,OAAS,GAQxC,OANIuF,GAAsB,SAAdA,EAAK1E,KACf0E,EAAK2C,OAASsa,EAEdC,EAASpgB,KAAK,CAACxB,KAAM,OAAQqH,MAAOsa,IAG/BC,CACT,CC+DA,SAASC,EAAcrE,GACrB,MAAMmB,EAASnB,EAAKmB,OAEpB,YAAkBjf,IAAXif,GAAmC,OAAXA,EAC3BnB,EAAKlB,SAASnd,OAAS,EACvBwf,CACN,CChIA,MAAMmD,EAAM,EACNC,EAAQ,GAWP,SAASC,EAAU3a,GACxB,MAAM4a,EAAS3a,OAAOD,GAChByP,EAAS,YACf,IAAIuI,EAAQvI,EAAO0I,KAAKyC,GACpBC,EAAO,EAEX,MAAMC,EAAQ,GAEd,KAAO9C,GACL8C,EAAM3gB,KACJ4gB,EAASH,EAAO1hB,MAAM2hB,EAAM7C,EAAMlf,OAAQ+hB,EAAO,GAAG,GACpD7C,EAAM,IAGR6C,EAAO7C,EAAMlf,MAAQkf,EAAM,GAAGlgB,OAC9BkgB,EAAQvI,EAAO0I,KAAKyC,GAKtB,OAFAE,EAAM3gB,KAAK4gB,EAASH,EAAO1hB,MAAM2hB,GAAOA,EAAO,GAAG,IAE3CC,EAAM3a,KAAK,GACpB,CAYA,SAAS4a,EAAS/a,EAAOnI,EAAOe,GAC9B,IAAI4H,EAAa,EACbE,EAAWV,EAAMlI,OAErB,GAAID,EAAO,CACT,IAAInB,EAAOsJ,EAAMgb,YAAYxa,GAE7B,KAAO9J,IAAS+jB,GAAO/jB,IAASgkB,GAC9Bla,IACA9J,EAAOsJ,EAAMgb,YAAYxa,EAE7B,CAEA,GAAI5H,EAAK,CACP,IAAIlC,EAAOsJ,EAAMgb,YAAYta,EAAW,GAExC,KAAOhK,IAAS+jB,GAAO/jB,IAASgkB,GAC9Bha,IACAhK,EAAOsJ,EAAMgb,YAAYta,EAAW,EAExC,CAEA,OAAOA,EAAWF,EAAaR,EAAM9G,MAAMsH,EAAYE,GAAY,EACrE,CCxCO,MAAMua,EAAW,CACtBC,WCbK,SAAoB3a,EAAO4V,GAEhC,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,aACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAK5a,EAAMuB,IAAIqU,IAAO,IAGxC,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EDIEsb,MEbK,SAAmB7a,EAAO4V,GAE/B,MAAMrW,EAAS,CAACnH,KAAM,UAAW8O,QAAS,KAAMmS,WAAY,CAAC,EAAG3E,SAAU,IAE1E,OADA1U,EAAM0Z,MAAM9D,EAAMrW,GACX,CAACS,EAAM4Z,UAAUhE,EAAMrW,GAAS,CAACnH,KAAM,OAAQqH,MAAO,MAC/D,EFSEtJ,KGbK,SAAc6J,EAAO4V,GAC1B,MAAMnW,EAAQmW,EAAKnW,MAAQmW,EAAKnW,MAAQ,KAAO,GAGzC0W,EAAOP,EAAKO,KAAOP,EAAKO,KAAKsB,MAAM,uBAAyB,KAE5D4B,EAAa,CAAC,EAEhBlD,IACFkD,EAAWyB,UAAY,CAAC,YAAc3E,IAKxC,IAAI5W,EAAS,CACXnH,KAAM,UACN8O,QAAS,OACTmS,aACA3E,SAAU,CAAC,CAACtc,KAAM,OAAQqH,WAa5B,OAVImW,EAAKjM,OACPpK,EAAO1I,KAAO,CAAC8S,KAAMiM,EAAKjM,OAG5B3J,EAAM0Z,MAAM9D,EAAMrW,GAClBA,EAASS,EAAM4Z,UAAUhE,EAAMrW,GAG/BA,EAAS,CAACnH,KAAM,UAAW8O,QAAS,MAAOmS,WAAY,CAAC,EAAG3E,SAAU,CAACnV,IACtES,EAAM0Z,MAAM9D,EAAMrW,GACXA,CACT,EHlBEwb,OIfK,SAAuB/a,EAAO4V,GAEnC,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,MACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EJMEkR,SKjBK,SAAkBzQ,EAAO4V,GAE9B,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,ELQEsZ,kBAAiB,EACjBmC,SMXK,SAAkBhb,EAAO4V,GAC9B,MAAMqF,EAAejb,EAAMib,aAC3B,IAAIC,EAAK,EAET,KAAOA,KAAMD,GAAcC,IAE3B,MAAM/V,EAAazF,OAAOwb,GAS1B,OAPAD,EAAa9V,GAAc,CACzB/M,KAAM,qBACN+M,aACAuP,SAAU,CAAC,CAACtc,KAAM,YAAasc,SAAUkB,EAAKlB,WAC9CS,SAAUS,EAAKT,UAGV0D,EAAkB7Y,EAAO,CAC9B5H,KAAM,oBACN+M,aACAgQ,SAAUS,EAAKT,UAEnB,ENRE5O,QOpBK,SAAiBvG,EAAO4V,GAE7B,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,IAAM0O,EAAKW,MACpB8C,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EPWEqR,KQnBK,SAAc5Q,EAAO4V,GAC1B,GAAI5V,EAAMmb,UAAW,CAEnB,MAAM5b,EAAS,CAACnH,KAAM,MAAOqH,MAAOmW,EAAKnW,OAEzC,OADAO,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,CAGA,OAAO,IACT,ERUE6b,eSjBK,SAAwBpb,EAAO4V,GACpC,MAAMtU,EAAMtB,EAAMkF,WAAW0Q,EAAKzQ,YAElC,IAAK7D,EACH,OAAOuY,EAAO7Z,EAAO4V,GAIvB,MAAMyD,EAAa,CAACgC,IAAK7C,EAAalX,EAAIgV,KAAO,IAAKM,IAAKhB,EAAKgB,KAE9C,OAAdtV,EAAI+U,YAAgCve,IAAdwJ,EAAI+U,QAC5BgD,EAAWhD,MAAQ/U,EAAI+U,OAIzB,MAAM9W,EAAS,CAACnH,KAAM,UAAW8O,QAAS,MAAOmS,aAAY3E,SAAU,IAEvE,OADA1U,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,ETAEwR,MUpBK,SAAe/Q,EAAO4V,GAE3B,MAAMyD,EAAa,CAACgC,IAAK7C,EAAa5C,EAAKU,MAE1B,OAAbV,EAAKgB,UAA6B9e,IAAb8d,EAAKgB,MAC5ByC,EAAWzC,IAAMhB,EAAKgB,KAGL,OAAfhB,EAAKS,YAAiCve,IAAf8d,EAAKS,QAC9BgD,EAAWhD,MAAQT,EAAKS,OAI1B,MAAM9W,EAAS,CAACnH,KAAM,UAAW8O,QAAS,MAAOmS,aAAY3E,SAAU,IAEvE,OADA1U,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EVKE+b,WWvBK,SAAoBtb,EAAO4V,GAEhC,MAAMlY,EAAO,CAACtF,KAAM,OAAQqH,MAAOmW,EAAKnW,MAAM2W,QAAQ,YAAa,MACnEpW,EAAM0Z,MAAM9D,EAAMlY,GAGlB,MAAM6B,EAAS,CACbnH,KAAM,UACN8O,QAAS,OACTmS,WAAY,CAAC,EACb3E,SAAU,CAAChX,IAGb,OADAsC,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EXUEgc,cYpBK,SAAuBvb,EAAO4V,GACnC,MAAMtU,EAAMtB,EAAMkF,WAAW0Q,EAAKzQ,YAElC,IAAK7D,EACH,OAAOuY,EAAO7Z,EAAO4V,GAIvB,MAAMyD,EAAa,CAACC,KAAMd,EAAalX,EAAIgV,KAAO,KAEhC,OAAdhV,EAAI+U,YAAgCve,IAAdwJ,EAAI+U,QAC5BgD,EAAWhD,MAAQ/U,EAAI+U,OAIzB,MAAM9W,EAAS,CACbnH,KAAM,UACN8O,QAAS,IACTmS,aACA3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EZFEqQ,KavBK,SAAc5P,EAAO4V,GAE1B,MAAMyD,EAAa,CAACC,KAAMd,EAAa5C,EAAKU,MAEzB,OAAfV,EAAKS,YAAiCve,IAAf8d,EAAKS,QAC9BgD,EAAWhD,MAAQT,EAAKS,OAI1B,MAAM9W,EAAS,CACbnH,KAAM,UACN8O,QAAS,IACTmS,aACA3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EbOEyR,SFfK,SAAkBhR,EAAO4V,EAAM4F,GACpC,MAAMC,EAAUzb,EAAMuB,IAAIqU,GACpB8F,EAAQF,EAyEhB,SAAmB5F,GACjB,IAAI8F,GAAQ,EACZ,GAAkB,SAAd9F,EAAKxd,KAAiB,CACxBsjB,EAAQ9F,EAAKmB,SAAU,EACvB,MAAMrC,EAAWkB,EAAKlB,SACtB,IAAInc,GAAS,EAEb,MAAQmjB,KAAWnjB,EAAQmc,EAASnd,QAClCmkB,EAAQzB,EAAcvF,EAASnc,GAEnC,CAEA,OAAOmjB,CACT,CAtFyBC,CAAUH,GAAUvB,EAAcrE,GAEnDyD,EAAa,CAAC,EAEd3E,EAAW,GAEjB,GAA4B,mBAAjBkB,EAAKoB,QAAuB,CACrC,MAAM1W,EAAOmb,EAAQ,GAErB,IAAInV,EAEAhG,GAAsB,YAAdA,EAAKlI,MAAuC,MAAjBkI,EAAK4G,QAC1CZ,EAAYhG,GAEZgG,EAAY,CAAClO,KAAM,UAAW8O,QAAS,IAAKmS,WAAY,CAAC,EAAG3E,SAAU,IACtE+G,EAAQ9f,QAAQ2K,IAGdA,EAAUoO,SAASnd,OAAS,GAC9B+O,EAAUoO,SAAS/Y,QAAQ,CAACvD,KAAM,OAAQqH,MAAO,MAGnD6G,EAAUoO,SAAS/Y,QAAQ,CACzBvD,KAAM,UACN8O,QAAS,QACTmS,WAAY,CAACjhB,KAAM,WAAY4e,QAASpB,EAAKoB,QAAS4E,UAAU,GAChElH,SAAU,KAKZ2E,EAAWyB,UAAY,CAAC,iBAC1B,CAEA,IAAIviB,GAAS,EAEb,OAASA,EAAQkjB,EAAQlkB,QAAQ,CAC/B,MAAMskB,EAAQJ,EAAQljB,IAIpBmjB,GACU,IAAVnjB,GACe,YAAfsjB,EAAMzjB,MACY,MAAlByjB,EAAM3U,UAENwN,EAAS9a,KAAK,CAACxB,KAAM,OAAQqH,MAAO,OAGnB,YAAfoc,EAAMzjB,MAAwC,MAAlByjB,EAAM3U,SAAoBwU,EAGxDhH,EAAS9a,KAAKiiB,GAFdnH,EAAS9a,QAAQiiB,EAAMnH,SAI3B,CAEA,MAAM5X,EAAO2e,EAAQA,EAAQlkB,OAAS,GAGlCuF,IAAS4e,GAAuB,YAAd5e,EAAK1E,MAAuC,MAAjB0E,EAAKoK,UACpDwN,EAAS9a,KAAK,CAACxB,KAAM,OAAQqH,MAAO,OAItC,MAAMF,EAAS,CAACnH,KAAM,UAAW8O,QAAS,KAAMmS,aAAY3E,YAE5D,OADA1U,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EErDEzB,Kc3BK,SAAckC,EAAO4V,GAE1B,MAAMyD,EAAa,CAAC,EACdoC,EAAUzb,EAAMuB,IAAIqU,GAC1B,IAAIrd,GAAS,EAOb,IAL0B,kBAAfqd,EAAKte,OAAqC,IAAfse,EAAKte,QACzC+hB,EAAW/hB,MAAQse,EAAKte,SAIjBiB,EAAQkjB,EAAQlkB,QAAQ,CAC/B,MAAMskB,EAAQJ,EAAQljB,GAEtB,GACiB,YAAfsjB,EAAMzjB,MACY,OAAlByjB,EAAM3U,SACN2U,EAAMxC,YACNnY,MAAMC,QAAQ0a,EAAMxC,WAAWyB,YAC/Be,EAAMxC,WAAWyB,UAAUhgB,SAAS,kBACpC,CACAue,EAAWyB,UAAY,CAAC,sBACxB,KACF,CACF,CAGA,MAAMvb,EAAS,CACbnH,KAAM,UACN8O,QAAS0O,EAAKkB,QAAU,KAAO,KAC/BuC,aACA3E,SAAU1U,EAAM4a,KAAKa,GAAS,IAGhC,OADAzb,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EdPE+G,Ue7BK,SAAmBtG,EAAO4V,GAE/B,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,IACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EfoBEuc,KgB7BK,SAAc9b,EAAO4V,GAE1B,MAAMrW,EAAS,CAACnH,KAAM,OAAQsc,SAAU1U,EAAM4a,KAAK5a,EAAMuB,IAAIqU,KAE7D,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EhByBEqS,OiB/BK,SAAgB5R,EAAO4V,GAE5B,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,SACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EjBsBEwc,MkB9BK,SAAe/b,EAAO4V,GAC3B,MAAMoG,EAAOhc,EAAMuB,IAAIqU,GACjBqG,EAAWD,EAAKzb,QAEhB2b,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAM3b,EAAO,CACXlI,KAAM,UACN8O,QAAS,QACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAK,CAACqB,IAAW,IAEnCjc,EAAM0Z,MAAM9D,EAAKlB,SAAS,GAAIpU,GAC9B4b,EAAatiB,KAAK0G,EACpB,CAEA,GAAI0b,EAAKzkB,OAAS,EAAG,CAEnB,MAAM4kB,EAAO,CACX/jB,KAAM,UACN8O,QAAS,QACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAKoB,GAAM,IAGvB1kB,GAAQ8kB,EAAAA,EAAAA,IAAWxG,EAAKlB,SAAS,IACjCrc,GAAMgkB,EAAAA,EAAAA,GAASzG,EAAKlB,SAASkB,EAAKlB,SAASnd,OAAS,IACtDD,EAAMmC,MAAQpB,EAAIoB,OAAM0iB,EAAKhH,SAAW,CAAC7d,QAAOe,QACpD6jB,EAAatiB,KAAKuiB,EACpB,CAGA,MAAM5c,EAAS,CACbnH,KAAM,UACN8O,QAAS,QACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAKsB,GAAc,IAGrC,OADAlc,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,ElBXE+c,UmBjCK,SAAmBtc,EAAO4V,GAI/B,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAMuB,IAAIqU,IAGtB,OADA5V,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EnBsBEgd,SoBtBK,SAAkBvc,EAAO4V,EAAM4F,GACpC,MAAMgB,EAAWhB,EAASA,EAAO9G,cAAW5c,EAGtCoP,EAAuB,KADZsV,EAAWA,EAASvD,QAAQrD,GAAQ,GACpB,KAAO,KAClC6G,EAAQjB,GAA0B,UAAhBA,EAAOpjB,KAAmBojB,EAAOiB,WAAQ3kB,EAC3DP,EAASklB,EAAQA,EAAMllB,OAASqe,EAAKlB,SAASnd,OACpD,IAAImlB,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAYnlB,GAAQ,CAE3B,MAAMqlB,EAAOhH,EAAKlB,SAASgI,GAErBrD,EAAa,CAAC,EACdwD,EAAaJ,EAAQA,EAAMC,QAAa5kB,EAE1C+kB,IACFxD,EAAWoD,MAAQI,GAIrB,IAAItd,EAAS,CAACnH,KAAM,UAAW8O,UAASmS,aAAY3E,SAAU,IAE1DkI,IACFrd,EAAOmV,SAAW1U,EAAMuB,IAAIqb,GAC5B5c,EAAM0Z,MAAMkD,EAAMrd,GAClBA,EAASS,EAAM4Z,UAAUhE,EAAMrW,IAGjCod,EAAM/iB,KAAK2F,EACb,CAGA,MAAMA,EAAS,CACbnH,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAK+B,GAAO,IAG9B,OADA3c,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EpBpBE7B,KqBhCK,SAAcsC,EAAO4V,GAE1B,MAAMrW,EAAS,CAACnH,KAAM,OAAQqH,MAAO2a,EAAU1a,OAAOkW,EAAKnW,SAE3D,OADAO,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,ErB4BE4C,csBpCK,SAAuBnC,EAAO4V,GAEnC,MAAMrW,EAAS,CACbnH,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAAC,EACb3E,SAAU,IAGZ,OADA1U,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,EtB2BEud,KAAMC,EACNC,KAAMD,EACN7X,WAAY6X,EACZE,mBAAoBF,GAItB,SAASA,IAEP,OAAO,IACT,CuBwGA,MAAM5N,EAAM,CAAC,EAAEC,eAYR,SAAS8N,EAAYzI,EAAMlF,GAChC,MAAM4H,EAAW5H,GAAW,CAAC,EACvB4L,EAAYhE,EAASgG,qBAAsB,EAE3ClC,EAAe,CAAC,EA2DtB,OAnDAjb,EAAMmb,UAAYA,EAElBnb,EAAMuZ,mBACuBzhB,IAA3Bqf,EAASoC,eAA0D,OAA3BpC,EAASoC,cAC7C,gBACApC,EAASoC,cAEfvZ,EAAMod,cAAgBjG,EAASiG,eAAiB,YAEhDpd,EAAMqd,qBAAuBlG,EAASkG,sBAAwB,KAE9Drd,EAAMsd,wBAA0BnG,EAASmG,yBAA2B,CAClExC,UAAW,CAAC,YAGd9a,EAAMud,kBAAoBpG,EAASoG,mBAAqB,kBAExDvd,EAAMwd,eAAiBrG,EAASqG,eAEhCxd,EAAMyd,YAActG,EAASsG,YAE7Bzd,EAAM0a,SAAW,IAAIA,KAAavD,EAASuD,UAI3C1a,EAAMkF,W5BxLD,SAAqBuP,GAE1B,MAAMiJ,EAAQllB,OAAOyJ,OAAO,MAE5B,IAAKwS,IAASA,EAAKrc,KACjB,MAAM,IAAI2d,MAAM,wCAUlB,OAPA4H,EAAAA,EAAAA,IAAMlJ,EAAM,cAAevP,IACzB,MAAM4T,EAAKH,EAAMzT,EAAWC,YACxB2T,IAAO3J,EAAI1U,KAAKijB,EAAO5E,KACzB4E,EAAM5E,GAAM5T,EACd,IAMF,SAAoBC,GAClB,MAAM2T,EAAKH,EAAMxT,GAEjB,OAAO2T,GAAM3J,EAAI1U,KAAKijB,EAAO5E,GAAM4E,EAAM5E,GAAM,IACjD,CACF,C4BiKqB8E,CAAYnJ,GAC/BzU,EAAMib,aAAeA,EAErBjb,EAAMgZ,cAAgB,GAEtBhZ,EAAMmZ,eAAiB,CAAC,EAExBnZ,EAAM0Z,MAAQA,EACd1Z,EAAM4Z,UAAYA,EAClB5Z,EAAM6d,IAsGN,SAAkBjI,EAAM4F,GAEtB,OAAOqC,EAAI7d,EAAO4V,EAAM4F,EAC1B,EAxGAxb,EAAMuB,IAkHN,SAAkBia,GAEhB,OAAOja,EAAIvB,EAAOwb,EACpB,EApHAxb,EAAM4a,KAAOA,EAEb5a,EAAM8d,QAAUA,GAEhBH,EAAAA,EAAAA,IAAMlJ,EAAM,sBAAuBvP,IACjC,MAAM4T,EAAKpZ,OAAOwF,EAAWC,YAAYyT,cAIpCzJ,EAAI1U,KAAKwgB,EAAcnC,KAC1BmC,EAAanC,GAAM5T,EACrB,IAIKlF,EAWP,SAAS8d,EAAQ1F,EAAMD,GAErB,GAAIC,GAAQ,SAAUA,GAAQA,EAAKvhB,KAAM,CAEvC,MAAMA,EAAOuhB,EAAKvhB,KAEdA,EAAKknB,QACY,YAAf5F,EAAM/f,OACR+f,EAAQ,CACN/f,KAAM,UACN8O,QAAS,GACTmS,WAAY,CAAC,EACb3E,SAAU,KAIdyD,EAAMjR,QAAUrQ,EAAKknB,OAGJ,YAAf5F,EAAM/f,MAAsBvB,EAAKmnB,cACnC7F,EAAMkB,WAAa,IAAIlB,EAAMkB,cAAexiB,EAAKmnB,cAG/C,aAAc7F,GAASA,EAAMzD,UAAY7d,EAAKonB,YAChD9F,EAAMzD,SAAW7d,EAAKonB,UAE1B,CAEA,GAAI7F,EAAM,CACR,MAAM8F,EAAM,SAAU9F,EAAOA,EAAO,CAACjD,SAAUiD,ICpQ3BxC,EDsQLsI,ICnQhBtI,EAAKT,UACLS,EAAKT,SAAS7d,OACdse,EAAKT,SAAS7d,MAAMmC,MACpBmc,EAAKT,SAAS7d,MAAMgH,QACpBsX,EAAKT,SAAS9c,KACdud,EAAKT,SAAS9c,IAAIoB,MAClBmc,EAAKT,SAAS9c,IAAIiG,SD+Pf6Z,EAAMhD,SAAW,CAAC7d,OAAO8kB,EAAAA,EAAAA,IAAW8B,GAAM7lB,KAAKgkB,EAAAA,EAAAA,GAAS6B,IAE5D,CC1QG,IAAmBtI,ED4QtB,OAAOuC,CACT,CAUA,SAASnY,EAAM4V,EAAM1O,EAASiX,EAAOzJ,GAOnC,OANIxT,MAAMC,QAAQgd,KAChBzJ,EAAWyJ,EACXA,EAAQ,CAAC,GAIJL,EAAQlI,EAAM,CACnBxd,KAAM,UACN8O,UACAmS,WAAY8E,GAAS,CAAC,EACtBzJ,SAAUA,GAAY,IAE1B,CA8BF,CAYA,SAASgF,EAAM/a,EAAMyf,GACfzf,EAAKwW,WAAUiJ,EAAGjJ,UAAWA,EAAAA,EAAAA,IAASxW,GAC5C,CAcA,SAASib,EAAUjb,EAAMyf,GAEvB,IAAI7e,EAAS6e,EAGb,GAAIzf,GAAQA,EAAK9H,KAAM,CACrB,MAAMknB,EAAQpf,EAAK9H,KAAKknB,MAClBE,EAAYtf,EAAK9H,KAAKonB,UACtBD,EAAcrf,EAAK9H,KAAKmnB,YAET,kBAAVD,IAGW,YAAhBxe,EAAOnH,KACTmH,EAAO2H,QAAU6W,EAOjBxe,EAAS,CACPnH,KAAM,UACN8O,QAAS6W,EACT1E,WAAY,CAAC,EACb3E,SAAU,KAeI,YAAhBnV,EAAOnH,MAAsB4lB,IAC/Bze,EAAO8Z,WAAa,IAAI9Z,EAAO8Z,cAAe2E,IAI9C,aAAcze,GACdA,EAAOmV,UACO,OAAduJ,QACcnmB,IAAdmmB,IAGA1e,EAAOmV,SAAWuJ,EAEtB,CAEA,OAAO1e,CACT,CAeO,SAASse,EAAI7d,EAAO4V,EAAM4F,GAC/B,MAAMpjB,EAAOwd,GAAQA,EAAKxd,KAG1B,IAAKA,EACH,MAAM,IAAI2d,MAAM,uBAAyBH,EAAO,KAGlD,OAAIzG,EAAI1U,KAAKuF,EAAM0a,SAAUtiB,GACpB4H,EAAM0a,SAAStiB,GAAM4H,EAAO4V,EAAM4F,GAGvCxb,EAAMyd,aAAezd,EAAMyd,YAAY3iB,SAAS1C,GAG3C,aAAcwd,EAAO,IAAIA,EAAMlB,SAAUnT,EAAIvB,EAAO4V,IAASA,EAGlE5V,EAAMwd,eACDxd,EAAMwd,eAAexd,EAAO4V,EAAM4F,GAiE7C,SAA+Bxb,EAAO4V,GACpC,MAAM/e,EAAO+e,EAAK/e,MAAQ,CAAC,EAErB0I,IACJ,UAAWqW,IACTzG,EAAI1U,KAAK5D,EAAM,gBAAkBsY,EAAI1U,KAAK5D,EAAM,aAE9C,CACEuB,KAAM,UACN8O,QAAS,MACTmS,WAAY,CAAC,EACb3E,SAAUnT,EAAIvB,EAAO4V,IALvB,CAACxd,KAAM,OAAQqH,MAAOmW,EAAKnW,OASjC,OADAO,EAAM0Z,MAAM9D,EAAMrW,GACXS,EAAM4Z,UAAUhE,EAAMrW,EAC/B,CA9ES8e,CAAsBre,EAAO4V,EACtC,CAaO,SAASrU,EAAIvB,EAAOwb,GAEzB,MAAM8C,EAAS,GAEf,GAAI,aAAc9C,EAAQ,CACxB,MAAM+C,EAAQ/C,EAAO9G,SACrB,IAAInc,GAAS,EACb,OAASA,EAAQgmB,EAAMhnB,QAAQ,CAC7B,MAAMgI,EAASse,EAAI7d,EAAOue,EAAMhmB,GAAQijB,GAGxC,GAAIjc,EAAQ,CACV,GAAIhH,GAAmC,UAA1BgmB,EAAMhmB,EAAQ,GAAGH,OACvB8I,MAAMC,QAAQ5B,IAA2B,SAAhBA,EAAOnH,OACnCmH,EAAOE,MAAQF,EAAOE,MAAM2W,QAAQ,OAAQ,MAGzClV,MAAMC,QAAQ5B,IAA2B,YAAhBA,EAAOnH,MAAoB,CACvD,MAAMkI,EAAOf,EAAOmV,SAAS,GAEzBpU,GAAsB,SAAdA,EAAKlI,OACfkI,EAAKb,MAAQa,EAAKb,MAAM2W,QAAQ,OAAQ,IAE5C,CAGElV,MAAMC,QAAQ5B,GAChB+e,EAAO1kB,QAAQ2F,GAEf+e,EAAO1kB,KAAK2F,EAEhB,CACF,CACF,CAEA,OAAO+e,CACT,CA0CO,SAAS1D,EAAK2D,EAAO7C,GAE1B,MAAMnc,EAAS,GACf,IAAIhH,GAAS,EAMb,IAJImjB,GACFnc,EAAO3F,KAAK,CAACxB,KAAM,OAAQqH,MAAO,SAG3BlH,EAAQgmB,EAAMhnB,QACjBgB,GAAOgH,EAAO3F,KAAK,CAACxB,KAAM,OAAQqH,MAAO,OAC7CF,EAAO3F,KAAK2kB,EAAMhmB,IAOpB,OAJImjB,GAAS6C,EAAMhnB,OAAS,GAC1BgI,EAAO3F,KAAK,CAACxB,KAAM,OAAQqH,MAAO,OAG7BF,CACT,CEheO,SAASif,EAAO/J,EAAMlF,GAC3B,MAAMvP,EAAQkd,EAAYzI,EAAMlF,GAC1BqG,EAAO5V,EAAM6d,IAAIpJ,EAAM,MACvBgK,EClFD,SAAgBze,GAErB,MAAM0e,EAAY,GAClB,IAAInmB,GAAS,EAEb,OAASA,EAAQyH,EAAMgZ,cAAczhB,QAAQ,CAC3C,MAAM+J,EAAMtB,EAAMib,aAAajb,EAAMgZ,cAAczgB,IAEnD,IAAK+I,EACH,SAGF,MAAM5L,EAAUsK,EAAMuB,IAAID,GACpBwX,EAAKpZ,OAAO4B,EAAI6D,YAAYyT,cAC5BG,EAASP,EAAaM,EAAGxR,eAC/B,IAAIqX,EAAiB,EAErB,MAAMC,EAAiB,GAEvB,OAASD,GAAkB3e,EAAMmZ,eAAeL,IAAK,CAEnD,MAAM+F,EAAgB,CACpBzmB,KAAM,UACN8O,QAAS,IACTmS,WAAY,CACVC,KACE,IACAtZ,EAAMuZ,cACN,SACAR,GACC4F,EAAiB,EAAI,IAAMA,EAAiB,IAC/CG,qBAAqB,EACrBhE,UAAW,CAAC,yBACZiE,UAAW/e,EAAMud,mBAEnB7I,SAAU,CAAC,CAACtc,KAAM,OAAQqH,MAAO,YAG/Bkf,EAAiB,GACnBE,EAAcnK,SAAS9a,KAAK,CAC1BxB,KAAM,UACN8O,QAAS,MACTwN,SAAU,CAAC,CAACtc,KAAM,OAAQqH,MAAOC,OAAOif,OAIxCC,EAAernB,OAAS,GAC1BqnB,EAAehlB,KAAK,CAACxB,KAAM,OAAQqH,MAAO,MAG5Cmf,EAAehlB,KAAKilB,EACtB,CAEA,MAAM/hB,EAAOpH,EAAQA,EAAQ6B,OAAS,GAEtC,GAAIuF,GAAsB,YAAdA,EAAK1E,MAAuC,MAAjB0E,EAAKoK,QAAiB,CAC3D,MAAM8X,EAAWliB,EAAK4X,SAAS5X,EAAK4X,SAASnd,OAAS,GAClDynB,GAA8B,SAAlBA,EAAS5mB,KACvB4mB,EAASvf,OAAS,IAElB3C,EAAK4X,SAAS9a,KAAK,CAACxB,KAAM,OAAQqH,MAAO,MAG3C3C,EAAK4X,SAAS9a,QAAQglB,EACxB,MACElpB,EAAQkE,QAAQglB,GAIlB,MAAM5N,EAAW,CACf5Y,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAACP,GAAI9Y,EAAMuZ,cAAgB,MAAQR,GAC/CrE,SAAU1U,EAAM4a,KAAKllB,GAAS,IAGhCsK,EAAM0Z,MAAMpY,EAAK0P,GAEjB0N,EAAU9kB,KAAKoX,EACjB,CAEA,GAAyB,IAArB0N,EAAUnnB,OAId,MAAO,CACLa,KAAM,UACN8O,QAAS,UACTmS,WAAY,CAAC4F,eAAe,EAAMnE,UAAW,CAAC,cAC9CpG,SAAU,CACR,CACEtc,KAAM,UACN8O,QAASlH,EAAMqd,qBACfhE,WAAY,IAEP6F,KAAK3H,MAAM2H,KAAKC,UAAUnf,EAAMsd,0BACnCxE,GAAI,kBAENpE,SAAU,CAAC,CAACtc,KAAM,OAAQqH,MAAOO,EAAMod,iBAEzC,CAAChlB,KAAM,OAAQqH,MAAO,MACtB,CACErH,KAAM,UACN8O,QAAS,KACTmS,WAAY,CAAC,EACb3E,SAAU1U,EAAM4a,KAAK8D,GAAW,IAElC,CAACtmB,KAAM,OAAQqH,MAAO,OAG5B,CD5Be2f,CAAOpf,GAUpB,OARIye,GAIF7I,EAAKlB,SAAS9a,KAAK,CAACxB,KAAM,OAAQqH,MAAO,MAAOgf,GAI3Cvd,MAAMC,QAAQyU,GAAQ,CAACxd,KAAM,OAAQsc,SAAUkB,GAAQA,CAChE,CE3EA,MAUA,EAPI,SAAUyJ,EAAa9P,GACrB,OAAO8P,GAAe,QAASA,EAcrC,SAAgBA,EAAa9P,GAC3B,MAAO,CAACqG,EAAM0J,EAAM1oB,KAClByoB,EAAYE,IAAIf,EAAO5I,EAAMrG,GAAU+P,GAAOE,IAC5C5oB,EAAK4oB,EAAM,GACX,CAEN,CAnBUC,CAAOJ,EAAa9P,GA2B9B,SAAgBA,GAEd,OAAQqG,GAAS4I,EAAO5I,EAAMrG,EAChC,CA7BUmQ,CAAOL,GAAe9P,EAC5B,C","sources":["../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-definitions/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/unist-util-generated/lib/index.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","previous","token","contentType","next","data","markdownLineEnding","document","self","stack","childFlow","childToken","lineStartOffset","continued","start","length","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","type","end","exitContainers","index","Object","assign","splice","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","result","atTab","value","String","fromCharCode","join","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","before","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","test","numeric","asciiHexDigit","decodeNamedCharacterReference","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","own","hasOwnProperty","fromMarkdown","encoding","options","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","children","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","node","errorHandler","onExitError","Error","stringifyPosition","toString","parseInt","lang","replace","title","url","depth","referenceType","ancestor","decodeString","fragment","alt","decodeNumericCharacterReference","ordered","spread","checked","compiler","postprocess","settings","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","extension","right","left","remarkParse","Parser","doc","normalizeUri","skip","encodeURIComponent","clean","toUpperCase","footnoteReference","id","safeId","footnoteOrder","indexOf","counter","footnoteCounts","reuseCounter","properties","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","source","last","lines","trimLine","codePointAt","handlers","blockquote","wrap","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","parent","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","pointStart","pointEnd","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","visit","definitions","one","augment","hName","hProperties","hChildren","ctx","props","to","defaultUnknownHandler","values","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","JSON","stringify","footer","destination","file","run","error","bridge","mutate"],"sourceRoot":""}