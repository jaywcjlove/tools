{"version":3,"file":"static/js/5581.1d527e65.chunk.js","mappings":"8OAAaA,EAAM,ikB,WCQJ,SAASC,IACtB,IAAMC,GAASC,EAAAA,EAAAA,QAA2B,MAC1C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KA8BA,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAM,uBACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,CACGR,IAASS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAQC,QAAS,kBAnChB,WACnB,IACEZ,EAAS,IACTF,EACEe,IAAAA,OAAgBhB,EAAO,CAAEiB,OAAQ,MAAOb,SAAUA,EAAUc,WAAY,IAAKC,QAAS,CAACC,OAM1F,CAJC,MAAOlB,GACHA,aAAiBmB,OACnBlB,EAASD,EAAMoB,QAElB,CAVH,CAmC2CC,EAAN,EAAjBf,SAAAA,WACTR,IAASS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAQC,QAAS,kBAxBhB,WACnB,IACEZ,EAAS,IACT,IAAMqB,EAAMR,IAAAA,OAAgBhB,EAAO,CACjCiB,OAAQ,MACRb,SAAU,EACVqB,SAAS,EACTP,WAAY,EACZC,QAAS,CAACC,OAEZnB,GAAUuB,GAAO,IAAIE,QAAQ,MAAO,IAKrC,CAJC,MAAOxB,GACHA,aAAiBmB,OACnBlB,EAASD,EAAMoB,QAElB,CAfH,CAwB2CK,EAAN,EAAjBnB,SAAAA,WACTR,IACCM,EAAAA,EAAAA,MAAAA,SAAAA,CAAQsB,SAAWC,SAAAA,GAAD,OAASxB,EAAYyB,OAAOD,EAAIE,OAAO/B,OAAvC,EAAlBQ,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,mBAGHR,IAASS,EAAAA,EAAAA,KAACuB,EAAAA,GAAD,CAAYhC,MAAOA,KAE3BS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CACEC,QAAS,WAAM,QACb,SAAAlB,EAAOoC,UAAP,WAAgBC,OAAhB,EAAsBC,QACtBlC,EAASmC,EAHb,EAAA5B,SAAAA,cAhBRA,UA4BEC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAD,CACErC,MAAOA,EACPsC,IAAKzC,EACL0C,OAAO,qBACPC,WAAY,EAAC7C,EAAAA,EAAAA,QACbiC,SAAW5B,SAAAA,GACTC,EAASD,EACV,MAGJE,IAASO,EAAAA,EAAAA,KAACgC,EAAAA,GAAD,CAAAjC,SAAcN,MAG7B,C","sources":["../../packages/css-formatter/src/sample.ts","../../packages/css-formatter/src/index.tsx"],"sourcesContent":["export const css = `/*! @uiw/reset.css v1.0.4 | MIT (c) 2021  |  */\narticle,aside,blockquote,body,dd,details,dl,dt,fieldset,figcaption,figure,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,html,iframe,legend,li,menu,nav,ol,p,pre,section,textarea,ul{padding:0;margin:0}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:400}ul{list-style:none}button,input,select{margin:0}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}embed,iframe,object,video{height:auto;max-width:100%}audio{max-width:100%}iframe{border:0}table{border-collapse:collapse;border-spacing:0}td,th{padding:0;text-align:left}`;\nexport const val = ``;\n","import { Fragment, useRef, useState } from 'react';\nimport { StyledLayout, CopyButton, CodeEditor, Button, Wrapper, ErrorLayout } from '@wcj/tools-react-components';\nimport { css } from '@codemirror/lang-css';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport prettier from 'prettier';\nimport parserPostcss from 'prettier/parser-postcss';\nimport * as sample from './sample';\n\nexport default function CSSFormatter() {\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState('');\n  const [tabWidth, setTabWidth] = useState(2);\n  const handleFormat = () => {\n    try {\n      setError('');\n      setValue(\n        prettier.format(value, { parser: 'css', tabWidth: tabWidth, printWidth: 120, plugins: [parserPostcss] }),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  const handleMinify = () => {\n    try {\n      setError('');\n      const val = prettier.format(value, {\n        parser: 'css',\n        tabWidth: 0,\n        useTabs: false,\n        printWidth: 0,\n        plugins: [parserPostcss],\n      });\n      setValue((val || '').replace(/\\n/g, ''));\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"CSS Formatter/Minify\"\n        extra={\n          <Fragment>\n            {value && <Button onClick={() => handleFormat()}>Format</Button>}\n            {value && <Button onClick={() => handleMinify()}>Minify</Button>}\n            {value && (\n              <select onChange={(evn) => setTabWidth(Number(evn.target.value))}>\n                <option value={2}>2 Tab Space</option>\n                <option value={3}>3 Tab Space</option>\n                <option value={4}>4 Tab Space</option>\n                <option value={5}>5 Tab Space</option>\n              </select>\n            )}\n            {value && <CopyButton value={value} />}\n            {sample.css && (\n              <Button\n                onClick={() => {\n                  editor.current?.view?.focus();\n                  setValue(sample.css);\n                }}\n              >\n                Sample\n              </Button>\n            )}\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={value}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[css()]}\n          onChange={(value) => {\n            setValue(value);\n          }}\n        />\n      </StyledLayout>\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n"],"names":["css","CSSFormatter","editor","useRef","useState","value","setValue","error","setError","tabWidth","setTabWidth","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","prettier","parser","printWidth","plugins","parserPostcss","Error","message","handleFormat","val","useTabs","replace","handleMinify","onChange","evn","Number","target","CopyButton","current","view","focus","sample","CodeEditor","ref","height","extensions","ErrorLayout"],"sourceRoot":""}