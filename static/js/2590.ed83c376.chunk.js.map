{"version":3,"file":"static/js/2590.ed83c376.chunk.js","mappings":"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","sources":["../../packages/js-obfuscator/src/sample.ts","../../packages/js-obfuscator/src/index.tsx"],"sourcesContent":["export const js = `function hello(who = \"world\") { console.log(\\`Hello, \\${who}!\\`) }`;\nexport const val = `function hello(who = \"world\") {\n  console.log(\\`Hello, \\${who}!\\`)\n  return \\`Hello, \\${who}!\\`\n}\nhello();\n`;\n","import { Fragment, useRef, useState } from 'react';\nimport {\n  StyledLayout,\n  CopyButton,\n  ResultCode,\n  Spacing,\n  CodeEditor,\n  Button,\n  Wrapper,\n  CheckboxOption,\n  ErrorLayout,\n} from '@wcj/tools-react-components';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport { obfuscate, ObfuscatorOptions } from 'javascript-obfuscator';\nimport * as sample from './sample';\n\nconst Info = styled.span`\n  color: var(--color-fg-subtle);\n`;\n\nconst defaultOptions: ObfuscatorOptions = {\n  compact: true,\n  // compact: boolean;\n  // controlFlowFlattening: boolean;\n  // controlFlowFlatteningThreshold: number;\n  // deadCodeInjection: boolean;\n  // deadCodeInjectionThreshold: number;\n  // debugProtection: boolean;\n  // debugProtectionInterval: number;\n  // disableConsoleOutput: boolean;\n  // domainLock: string[];\n  // domainLockRedirectUrl: string;\n  // forceTransformStrings: string[];\n  // identifierNamesCache: TIdentifierNamesCache;\n  // identifierNamesGenerator: TTypeFromEnum<typeof IdentifierNamesGenerator>;\n  // identifiersDictionary: string[];\n  // identifiersPrefix: string;\n  // ignoreImports: boolean;\n  // inputFileName: string;\n  // log: boolean;\n  // numbersToExpressions: boolean;\n  // optionsPreset: TOptionsPreset;\n  // renameGlobals: boolean;\n  // renameProperties: boolean;\n  // renamePropertiesMode: TRenamePropertiesMode;\n  // reservedNames: string[];\n  // reservedStrings: string[];\n  // seed: string | number;\n  // selfDefending: boolean;\n  // simplify: boolean;\n  // sourceMap: boolean;\n  // sourceMapBaseUrl: string;\n  // sourceMapFileName: string;\n  // sourceMapMode: TTypeFromEnum<typeof SourceMapMode>;\n  // sourceMapSourcesMode: TTypeFromEnum<typeof SourceMapSourcesMode>;\n  // splitStrings: boolean;\n  // splitStringsChunkLength: number;\n  // stringArray: boolean;\n  // stringArrayCallsTransform: boolean;\n  // stringArrayCallsTransformThreshold: number;\n  // stringArrayEncoding: TStringArrayEncoding[];\n  // stringArrayIndexesType: TStringArrayIndexesType[];\n  // stringArrayIndexShift: boolean;\n  // stringArrayRotate: boolean;\n  // stringArrayShuffle: boolean;\n  // stringArrayWrappersChainedCalls: boolean;\n  // stringArrayWrappersCount: number;\n  // stringArrayWrappersParametersMaxCount: number;\n  // stringArrayWrappersType: TStringArrayWrappersType;\n  // stringArrayThreshold: number;\n  // target: TTypeFromEnum<typeof ObfuscationTarget>;\n  // transformObjectKeys: boolean;\n  // unicodeEscapeSequence: boolean;\n};\n\nexport default function JSObfuscator() {\n  const [options, setOptions] = useState<any>(defaultOptions);\n  const { t } = useTranslation(['js-obfuscator', 'common']);\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [type, setType] = useState<'raw' | 'obfuscator'>('raw');\n  const [value, setValue] = useState(sample.val || '');\n  const [valueObfuscate, setValueObfuscate] = useState('');\n  const [error, setError] = useState('');\n  function handleObfuscate() {\n    if (type === 'raw') {\n      const val = obfuscate(value, options);\n      setValueObfuscate(val.getObfuscatedCode());\n    } else {\n    }\n    setType(type === 'raw' ? 'obfuscator' : 'raw');\n  }\n  const codeSource = type === 'raw' ? value : valueObfuscate;\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"JavaScript Obfuscator\"\n        extra={\n          <Fragment>\n            <Button onClick={() => handleObfuscate()}>\n              {type === 'raw' ? t<string>('Obfuscator') : t<string>('Raw Code')}\n            </Button>\n            {codeSource && <CopyButton value={codeSource} />}\n            <Button\n              onClick={() => {\n                editor.current?.view?.focus();\n                setValue(sample.val);\n                setType('raw');\n              }}\n            >\n              {t<string>('Sample', { ns: 'common' })}\n            </Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={codeSource}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[javascript()]}\n          onChange={(value) => {\n            type === 'raw' ? setValue(value) : setValueObfuscate(value);\n          }}\n        />\n      </StyledLayout>\n      <StyledLayout\n        title={t<string>('Options', { ns: 'common' })}\n        style={{ maxWidth: 420 }}\n        extra={\n          <Fragment>\n            <Button onClick={() => setOptions(defaultOptions)}>Reset</Button>\n            <Button onClick={() => setOptions({})}>None</Button>\n          </Fragment>\n        }\n      >\n        <ResultCode codeProps={{ style: { height: 'calc(100vh - 87px)', overflow: 'auto', margin: 0 } }}>\n          <Spacing>\n            <CheckboxOption\n              checked={!!options.compact}\n              onChange={({ target }) => {\n                setOptions({ ...options, ...{ compact: target.checked } });\n              }}\n            >\n              {t<string>('compact')} <Info>{t<string>('Compact code output on one line.')}</Info>\n            </CheckboxOption>\n          </Spacing>\n        </ResultCode>\n      </StyledLayout>\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n"],"names":["val","Info","styled","defaultOptions","compact","JSObfuscator","useState","options","setOptions","t","useTranslation","editor","useRef","type","setType","sample","value","setValue","valueObfuscate","setValueObfuscate","error","codeSource","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","obfuscate","getObfuscatedCode","handleObfuscate","CopyButton","current","_editor$current","view","_editor$current$view","focus","ns","CodeEditor","ref","height","extensions","javascript","onChange","style","maxWidth","ResultCode","codeProps","overflow","margin","Spacing","CheckboxOption","checked","target","_ref","ErrorLayout"],"sourceRoot":""}