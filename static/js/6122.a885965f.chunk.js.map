{"version":3,"file":"static/js/6122.a885965f.chunk.js","mappings":"mOAKMA,EAAeC,EAAAA,GAAAA,IAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,8CAWZC,EAAQF,EAAAA,GAAAA,IAAHG,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,OAAAA,SACNC,SAAAA,GAAD,OACAA,EAAMC,QACNC,EAAAA,EAAAA,IADA,qDAMW,SAASC,IACtB,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,YAA1B,eAAOH,EAAP,KAAcM,EAAd,KACMC,GAAYC,EAAAA,EAAAA,QAA0B,MACtCC,GAASD,EAAAA,EAAAA,QAAyB,MAClCE,GAAcF,EAAAA,EAAAA,QAAyB,MAiB7C,OACEG,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAcC,MAAM,QAAQC,MAAOb,IAASU,EAAAA,EAAAA,KAACI,EAAAA,GAAD,CAAYd,MAAOA,IAA/DS,UACEC,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CACEC,YAAY,EACZhB,MAAOA,EACPiB,QAAUC,SAAAA,GAAD,OAtBG,SAAClB,QAAuB,IAAvBA,IAAAA,EAAgB,IACnCC,EAASD,GACTmB,EAAAA,SAAgBhB,EAAUiB,QAASpB,GAAQJ,SAAAA,GACjCM,EAARN,EAAiBA,EAAMyB,QAAoB,OAG7CF,EAAAA,UAAiBnB,EAAO,CAAEsB,KAAM,YAAaC,MAAO,CAAEC,KAAM,OAAQC,MAAO,UAAY,SAACC,EAAKC,GACrFzB,EAANwB,EAAeA,EAAIL,QAAoB,IACnCM,IAAKtB,EAAOe,QAASQ,IAAMD,MAGjCR,EAAAA,UAAiBnB,EAAO,CAAEsB,KAAM,cAAe,SAACI,EAAKC,GAC7CzB,EAANwB,EAAeA,EAAIL,QAAoB,IACnCM,IAAKrB,EAAYc,QAASQ,IAAMD,MASdE,CAAaX,EAAIY,OAA+B9B,aAGtEO,EAAAA,EAAAA,MAACI,EAAAA,GAAD,CAAcC,MAAM,gBAApBH,SAAAA,EACEC,EAAAA,EAAAA,KAACqB,EAAAA,GAAD,CAAYC,MAASpC,EAAQ,CAAEqC,QAAS,QAAW,GAAnDxB,UACEC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQwB,IAAK/B,OAEfI,EAAAA,EAAAA,MAACwB,EAAAA,GAAD,CAAYC,MAASpC,EAAQ,CAAEqC,QAAS,QAAW,GAAnDxB,SAAAA,EACEC,EAAAA,EAAAA,KAACjB,EAAD,CAAOG,QAASA,EAAOsC,IAAK5B,KAC5BI,EAAAA,EAAAA,KAACjB,EAAD,CAAOG,QAASA,EAAOsC,IAAK7B,OAE7BT,IAASc,EAAAA,EAAAA,KAACpB,EAAD,CAAAmB,SAAeb","sources":["../../packages/qrcode-generator/src/index.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, ResultCode } from '@wcj/tools-react-components';\nimport QRCode from 'qrcode';\nimport styled, { css } from 'styled-components';\n\nconst ErrorMessage = styled.div`\n  color: red;\n  font-weight: bold;\n`;\n\nexport interface ImageProps\n  extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {\n  ref?: React.LegacyRef<HTMLImageElement>;\n  error?: boolean;\n}\n\nconst Image = styled.img<ImageProps>`\n  ${(props) =>\n    props.error &&\n    css`\n      display: none;\n    `}\n`;\n\nexport default function QRCodeGenerator() {\n  const [value, setValue] = useState<string>();\n  const [error, setError] = useState<string>();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const imgLightRef = useRef<HTMLImageElement>(null);\n  const handleInput = (value: string = '') => {\n    setValue(value);\n    QRCode.toCanvas(canvasRef.current, value, (error) => {\n      error ? setError(error.message) : setError('');\n    });\n\n    QRCode.toDataURL(value, { type: 'image/png', color: { dark: '#fff', light: '#333' } }, (err, url) => {\n      err ? setError(err.message) : setError('');\n      if (url) imgRef.current!.src = url;\n    });\n\n    QRCode.toDataURL(value, { type: 'image/png' }, (err, url) => {\n      err ? setError(err.message) : setError('');\n      if (url) imgLightRef.current!.src = url;\n    });\n  };\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Input\" extra={value && <CopyButton value={value} />}>\n        <Textarea\n          spellCheck={false}\n          value={value}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"QR Code Image\">\n        <ResultCode style={!!error ? { display: 'none' } : {}}>\n          <canvas ref={canvasRef} />\n        </ResultCode>\n        <ResultCode style={!!error ? { display: 'none' } : {}}>\n          <Image error={!!error} ref={imgLightRef} />\n          <Image error={!!error} ref={imgRef} />\n        </ResultCode>\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["ErrorMessage","styled","_templateObject","Image","_templateObject2","props","error","css","QRCodeGenerator","useState","value","setValue","setError","canvasRef","useRef","imgRef","imgLightRef","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","CopyButton","Textarea","spellCheck","onInput","evn","QRCode","current","message","type","color","dark","light","err","url","src","handleInput","target","ResultCode","style","display","ref"],"sourceRoot":""}