{"version":3,"file":"static/js/7772.373f4d2f.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers)\n            copy.specializers = this.specializers.map(s => {\n                let found = config.specializers.find(r => r.from == s);\n                return found ? found.to : s;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };\n"],"names":["Recover","Stack","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","filter","_","i","concat","context","start","push","length","action","depth","type","parser","dPrec","dynamicPrecedence","pushState","getGoto","minRepeatTerm","storeNode","reduceContext","base","count","stateFlag","baseStateID","pop","term","end","size","isReduce","cur","top","index","next","nextEnd","nextState","maxNode","shiftContext","reduce","shift","value","reused","updateContext","tracker","reuse","stream","reset","off","slice","isNode","sim","SimulatedStack","stateSlot","hasAction","nextStates","s","best","some","v","result","split","validAction","target","forceReduce","data","other","dialectID","dialect","flags","last","hash","newCx","StackContext","emitContext","emitLookAhead","strict","cx","goto","StackBufferCursor","maybeNext","CachedToken","extended","mask","nullToken","InputStream","input","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","from","range","to","readNext","offset","assoc","idx","charCodeAt","resolved","resolveOffset","endOffset","RangeError","nextChunk","getChunk","n","setDone","read","r","Math","max","min","TokenGroup","id","group","groupMask","scan","accEnd","allows","overrides","acceptToken","low","high","mid","advance","readToken","prototype","contextual","fallback","extend","ExternalTokenizer","options","decodeArray","Type","Uint16Array","array","out","stop","digit","Safety","verbose","process","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","Rec","FragmentCursor","fragments","nodeSet","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","setLookAhead","eofTerm","specialized","specializers","set","putAction","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","stopped","stoppedTokens","newStacks","advanceStack","tok","getMainToken","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","forceAll","maxRemaining","sort","a","b","outer","j","sameState","splice","stackID","strictCx","cxHash","cached","nodeAt","match","types","useNode","inner","defaultReduce","getActions","localStack","apply","pushStackDedup","restarted","tokenEnd","deadEnd","restart","advanceFully","force","forceBase","recoverByInsert","insert","recoverByDelete","close","create","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrecTable","tokenPrec","termNames","parseDialect","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","findOffset","config","copy","assign","info","t","found","find","contextTracker","wrap","prec","values","part","Uint8Array","Parser"],"sourceRoot":""}