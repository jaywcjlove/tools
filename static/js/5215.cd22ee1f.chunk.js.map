{"version":3,"file":"static/js/5215.cd22ee1f.chunk.js","mappings":"uVAce,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,YAAkB,eAAnCC,EAAI,KAAEC,EAAO,KACpB,GAAgCF,EAAAA,EAAAA,YAAkB,eAA3CG,EAAQ,KAAEC,EAAW,KACtBC,EAAc,SAACC,QAAa,IAAbA,IAAAA,EAAgB,IACnCJ,EAAQI,GACRF,EAAYE,GACZJ,ECPG,SAAwBK,EAAoBC,QAAP,IAAbD,IAAAA,EAAgB,SAAoB,IAAhBC,IAAAA,EAAmB,CAAC,GACrE,MAAWA,GAAX,UACA,IAAMC,GAAOC,EAAAA,EAAAA,KACVC,IAAIC,EAAAA,GACJD,IAAIE,EAAAA,GACJF,IAAIG,EAAAA,EAAc,CAAEC,oBAAoB,IACxCJ,IAAIK,EAAAA,GACJL,IAAIM,EAAAA,GACJN,IAAIO,EAAAA,GACJP,IAAIQ,EAAAA,GACJR,IAAIS,EAAAA,GACJT,IAAIU,EAAAA,GACJC,YAAYf,GACf,OAAOgB,OAAOd,EAChB,CDPYe,CAAelB,GACzB,EAEMmB,GAAYC,EAAAA,EAAAA,cAChB,kBACEC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAAA,EACPC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,QAAS,kBAAM3B,EApBhB,wEAoBoC,EAAAwB,SAAAA,WAC1C1B,IAAY2B,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAAC3B,MAAOH,MAEnC,GACD,CAACA,IAGH,OACEwB,EAAAA,EAAAA,MAACO,EAAAA,GAAO,CAAAL,SAAAA,EACNC,EAAAA,EAAAA,KAACK,EAAAA,GAAY,CAACC,MAAM,iBAAiBC,OAAOP,EAAAA,EAAAA,KAACL,EAAS,IAAII,UACxDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CACTC,YAAY,EACZjC,MAAOH,EACPqC,OAAO,qBACPC,MAAO,CAAEC,KAAM,GACfC,WAAY,EAACC,EAAAA,EAAAA,aACbC,SAAWvC,SAAAA,GAAK,OAAKD,EAAYC,EAAK,OAG1CwB,EAAAA,EAAAA,KAACK,EAAAA,GAAY,CAACC,MAAM,cAAcC,MAAOpC,IAAQ6B,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAAC3B,MAAOL,IAAS4B,UAC3EC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CAACK,WAAY,EAACG,EAAAA,EAAAA,SAAaN,OAAO,qBAAqBD,YAAY,EAAOjC,MAAOL,EAAM8C,UAAQ,QAIlH,C","sources":["../../packages/markdown-to-html/src/index.tsx","../../packages/markdown-to-html/src/utils.ts"],"sourcesContent":["import { Fragment, useCallback, useState } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, Button, CodeEditor } from '@wcj/tools-react-components';\nimport { markdownToHTML } from './utils';\nimport { markdown as markdownLang } from '@codemirror/lang-markdown';\nimport { html as htmlLang } from '@codemirror/lang-html';\n\nconst sample = `## Web tool\\n\\nHello World\n\n\\`\\`\\`css\nbody {\n  color: 'red';\n}\n\\`\\`\\``;\n\nexport default function MarkdownToHTML() {\n  const [html, setHtml] = useState<string>();\n  const [markdown, setMarkdown] = useState<string>();\n  const handleInput = (value: string = '') => {\n    setHtml(value);\n    setMarkdown(value);\n    setHtml(markdownToHTML(value));\n  };\n\n  const ExtraTool = useCallback(\n    () => (\n      <Fragment>\n        <Button onClick={() => handleInput(sample)}>Sample</Button>\n        {markdown && <CopyButton value={markdown} />}\n      </Fragment>\n    ),\n    [markdown],\n  );\n\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Input Markdown\" extra={<ExtraTool />}>\n        <CodeEditor\n          spellCheck={false}\n          value={markdown}\n          height=\"calc(100vh - 87px)\"\n          style={{ flex: 1 }}\n          extensions={[markdownLang()]}\n          onChange={(value) => handleInput(value)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"Result HTML\" extra={html && <CopyButton value={html} />}>\n        <CodeEditor extensions={[htmlLang()]} height=\"calc(100vh - 87px)\" spellCheck={false} value={html} readOnly />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n","import { unified } from 'unified';\nimport remarkParse from 'remark-parse';\nimport remarkRehype from 'remark-rehype';\nimport stringify from 'rehype-stringify';\nimport slug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeIgnore from 'rehype-ignore';\nimport rehypeFormat from 'rehype-format';\nimport remarkGfm from 'remark-gfm';\nimport rehypeVideo from 'rehype-video';\n\ntype Options = {};\n\nexport function markdownToHTML(mdStr: string = '', options: Options = {}) {\n  const {} = options;\n  const file = unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype, { allowDangerousHtml: true })\n    .use(slug)\n    .use(rehypeAutolinkHeadings)\n    .use(rehypeIgnore)\n    .use(rehypeVideo)\n    .use(rehypeFormat)\n    .use(stringify)\n    .processSync(mdStr);\n  return String(file);\n}\n"],"names":["MarkdownToHTML","useState","html","setHtml","markdown","setMarkdown","handleInput","value","mdStr","options","file","unified","use","remarkParse","remarkGfm","remarkRehype","allowDangerousHtml","slug","rehypeAutolinkHeadings","rehypeIgnore","rehypeVideo","rehypeFormat","stringify","processSync","String","markdownToHTML","ExtraTool","useCallback","_jsxs","Fragment","children","_jsx","Button","onClick","CopyButton","Wrapper","StyledLayout","title","extra","CodeEditor","spellCheck","height","style","flex","extensions","markdownLang","onChange","htmlLang","readOnly"],"sourceRoot":""}