{"version":3,"file":"static/js/851.1ba492de.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/json/dist/index.es.js","../../node_modules/@codemirror/lang-json/dist/index.js","../../node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\nconst jsonHighlighting = styleTags({\n  String: tags.string,\n  Number: tags.number,\n  \"True False\": tags.bool,\n  PropertyName: tags.propertyName,\n  Null: tags.null,\n  \",\": tags.separator,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j\",\n  stateData: \"#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O\",\n  goto: \"!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R\",\n  nodeNames: \"⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array\",\n  maxTerm: 25,\n  nodeProps: [\n    [\"openedBy\", 7,\"{\",12,\"[\"],\n    [\"closedBy\", 8,\"}\",13,\"]\"]\n  ],\n  propSources: [jsonHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 2,\n  tokenData: \"(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~\",\n  tokenizers: [0],\n  topRules: {\"JsonText\":[0,1]},\n  tokenPrec: 0\n});\n\nexport { parser };\n","import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Object: /*@__PURE__*/continuedIndent({ except: /^\\s*\\}/ }),\n                Array: /*@__PURE__*/continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Object Array\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n","import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        // Do a binary search on the state's edges\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };\n"],"names":["jsonHighlighting","styleTags","String","tags","Number","PropertyName","Null","parser","LRParser","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","propSources","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","tokenPrec","jsonLanguage","LRLanguage","configure","props","indentNodeProp","Object","continuedIndent","except","Array","foldNodeProp","foldInside","languageData","closeBrackets","brackets","indentOnInput","json","LanguageSupport","Recover","Stack","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","this","filter","_","i","concat","context","start","push","length","action","depth","type","dPrec","dynamicPrecedence","pushState","getGoto","minRepeatTerm","storeNode","reduceContext","base","count","stateFlag","baseStateID","pop","term","end","size","isReduce","cur","top","index","next","nextEnd","nextState","maxNode","shiftContext","reduce","shift","value","reused","updateContext","tracker","reuse","stream","reset","off","slice","isNode","sim","SimulatedStack","stateSlot","hasAction","nextStates","s","best","some","v","result","split","validAction","target","forceReduce","data","other","dialectID","dialect","flags","last","hash","newCx","StackContext","emitContext","emitLookAhead","strict","cx","StackBufferCursor","maybeNext","CachedToken","extended","mask","nullToken","InputStream","input","ranges","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","from","range","to","readNext","offset","assoc","idx","charCodeAt","resolved","resolveOffset","endOffset","RangeError","nextChunk","getChunk","n","setDone","read","r","Math","max","min","TokenGroup","id","group","groupMask","scan","accEnd","allows","overrides","acceptToken","low","high","mid","advance","readToken","prototype","contextual","fallback","extend","ExternalTokenizer","options","decodeArray","Type","Uint16Array","array","out","stop","digit","Safety","verbose","process","test","LOG","stackIDs","cutAt","tree","side","cursor","IterMode","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","Rec","FragmentCursor","fragments","nodeSet","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","map","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","setLookAhead","eofTerm","specialized","specializers","set","putAction","pair","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","stopped","stoppedTokens","newStacks","advanceStack","tok","getMainToken","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","forceAll","maxRemaining","sort","a","b","outer","j","sameState","splice","stackID","strictCx","cxHash","cached","nodeAt","match","types","useNode","inner","defaultReduce","getActions","localStack","apply","pushStackDedup","restarted","tokenEnd","deadEnd","restart","advanceFully","force","forceBase","recoverByInsert","insert","recoverByDelete","close","create","topID","maxBufferLength","minRepeatType","WeakMap","get","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","wrappers","topTerms","keys","setProp","nodeID","deserialize","propSpec","NodeSet","name","NodeType","undefined","indexOf","error","skipped","DefaultBufferLength","tokenArray","Uint32Array","dialects","dynamicPrecedences","tokenPrecTable","termNames","parseDialect","parse","w","loose","table","groupTag","terminal","slot","flag","prev","iPrev","findOffset","config","copy","assign","info","t","found","find","contextTracker","wrap","prec","values","part","Uint8Array","Parser"],"sourceRoot":""}