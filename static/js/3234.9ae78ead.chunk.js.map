{"version":3,"file":"static/js/3234.9ae78ead.chunk.js","mappings":"0JACIA,EAAiBC,EAAkBC,EAAkBC,E,wFAQrDC,GAAcC,EAAAA,EAAAA,IAAkBL,IAAoBA,GAAkBM,EAAAA,EAAAA,GAA4B,CAAC,mOACnGC,EAAQC,EAAAA,GAAAA,IAAWP,IAAqBA,GAAmBK,EAAAA,EAAAA,GAA4B,CAAC,mDACxFG,EAAYD,EAAAA,GAAAA,MAAaN,IAAqBA,GAAmBI,EAAAA,EAAAA,GAA4B,CAAC,4CAC9FI,EAAQF,EAAAA,GAAAA,MAAaL,IAAqBA,GAAmBG,EAAAA,EAAAA,GAA4B,CAAC,4NAC/E,SAASK,IACtB,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACtBI,GAAsBL,EAAAA,EAAAA,YAAUM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAkBdG,EAAYC,KAAKC,UAAUJ,GAAQ,CAAC,EAAG,KAAM,GACjD,OAAoBK,EAAAA,EAAAA,MAAMC,EAAAA,GAAS,CACjCC,SAAU,EAAcC,EAAAA,EAAAA,KAAKxB,EAAa,CAAC,IAAiBqB,EAAAA,EAAAA,MAAMI,EAAAA,GAAc,CAC9EC,MAAO,2CACPH,SAAU,EAAcC,EAAAA,EAAAA,KAAKnB,EAAW,CACtCsB,KAAM,OACNC,OAAQ,iBACRC,SAxBa,SAAAC,GACjB,IACIC,GADQD,EAAIE,OAAOC,OAAS,IACf,GACbF,GACFG,EAAAA,GAAAA,KAAgBH,GAAMI,MAAK,SAAAC,UAGlBA,EAAgB,UAGnBA,EAAgB,WAAKA,EAAgB,UAAEC,OACzCxB,EAAU,yBAA2BuB,EAAgB,UAAEE,QAEzDrB,EAAQmB,EACV,GAEJ,IASQxB,IAAuBY,EAAAA,EAAAA,KAAKrB,EAAO,CACrCoC,IAAK3B,IACHI,IAAqBK,EAAAA,EAAAA,MAAMf,EAAO,CACpCiB,SAAU,EAAcC,EAAAA,EAAAA,KAAK,QAAS,CACpCD,UAAuBF,EAAAA,EAAAA,MAAM,KAAM,CACjCE,SAAU,EAAcC,EAAAA,EAAAA,KAAK,KAAM,CACjCD,SAAU,cACKC,EAAAA,EAAAA,KAAK,KAAM,CAC1BD,SAAU,0BAGCC,EAAAA,EAAAA,KAAK,QAAS,CAC7BD,SAAUiB,OAAOC,KAAKzB,GAAM0B,KAAI,SAACC,EAASC,GACxC,OAAoBvB,EAAAA,EAAAA,MAAM,KAAM,CAC9BE,SAAU,EAAcC,EAAAA,EAAAA,KAAK,KAAM,CACjCD,SAAUoB,KACKnB,EAAAA,EAAAA,KAAK,KAAM,CAC1BD,SAAUP,EAAK2B,GAASE,gBAEzBD,EACL,YAGF5B,IAAqBQ,EAAAA,EAAAA,KAAKC,EAAAA,GAAc,CAC1CC,MAAO,SACPoB,MAAO9B,IAAqBQ,EAAAA,EAAAA,KAAKuB,EAAAA,GAAY,CAC3CC,MAAO9B,IAETK,UAAuBC,EAAAA,EAAAA,KAAKyB,EAAAA,GAAY,CACtCC,WAAY,EAACC,EAAAA,EAAAA,SACbC,UAAU,EACVJ,MAAO9B,QAIf,C","sources":["../../packages/exif-viewer/esm/index.js"],"sourcesContent":["import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nimport { useState } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, CodeEditor } from '@wcj/tools-react-components';\nimport { json as jsonLang } from '@codemirror/lang-json';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport ExifReader from 'exifreader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GlobalStyle = createGlobalStyle(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  [data-color-mode*='dark'], [data-color-mode*='dark'] body {\\n    --color-border-text-case: #30363d;\\n  }\\n  [data-color-mode*='light'], [data-color-mode*='light'] body {\\n    --color-border-text-case: #d0d7de;\\n  }\\n\"])));\nvar Image = styled.img(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  max-width: 100%;\\n  padding-top: 16px;\\n\"])));\nvar InputFile = styled.input(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  width: 100%;\\n  display: block;\\n\"])));\nvar Table = styled.table(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  margin-top: 18px;\\n  border-spacing: 0;\\n  border-collapse: collapse;\\n  td,\\n  th {\\n    border: 1px solid var(--color-border-default);\\n    padding: 5px 8px;\\n  }\\n  tbody th {\\n    text-align: right;\\n  }\\n\"])));\nexport default function ExifViewer() {\n  var [result, setResult] = useState('');\n  var [tags, setTags] = useState();\n  var handleChange = evn => {\n    var files = evn.target.files || [];\n    var file = files[0];\n    if (file) {\n      ExifReader.load(file).then(data => {\n        // The MakerNote tag can be really large. Remove it to lower\n        // memory usage if you're parsing a lot of files and saving the tags.\n        delete data['MakerNote'];\n        // If you want to extract the thumbnail you can use it like\n        // this:\n        if (data['Thumbnail'] && data['Thumbnail'].image) {\n          setResult('data:image/jpg;base64,' + data['Thumbnail'].base64);\n        }\n        setTags(data);\n      });\n    }\n  };\n  var tagsToStr = JSON.stringify(tags || {}, null, 2);\n  return /*#__PURE__*/_jsxs(Wrapper, {\n    children: [/*#__PURE__*/_jsx(GlobalStyle, {}), /*#__PURE__*/_jsxs(StyledLayout, {\n      title: \"Choose an image file from your computer:\",\n      children: [/*#__PURE__*/_jsx(InputFile, {\n        type: \"file\",\n        accept: \"image/*, .heic\",\n        onChange: handleChange\n      }), result && /*#__PURE__*/_jsx(Image, {\n        src: result\n      }), tags && /*#__PURE__*/_jsxs(Table, {\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"th\", {\n              children: \"Tag name\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              children: \"Tag description\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: Object.keys(tags).map((keyname, key) => {\n            return /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"th\", {\n                children: keyname\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: tags[keyname].description\n              })]\n            }, key);\n          })\n        })]\n      })]\n    }), tags && /*#__PURE__*/_jsx(StyledLayout, {\n      title: \"Result\",\n      extra: tags && /*#__PURE__*/_jsx(CopyButton, {\n        value: tagsToStr\n      }),\n      children: /*#__PURE__*/_jsx(CodeEditor, {\n        extensions: [jsonLang()],\n        readOnly: true,\n        value: tagsToStr\n      })\n    })]\n  });\n}"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","GlobalStyle","createGlobalStyle","_taggedTemplateLiteralLoose","Image","styled","InputFile","Table","ExifViewer","_useState","useState","_useState2","_slicedToArray","result","setResult","_useState3","_useState4","tags","setTags","tagsToStr","JSON","stringify","_jsxs","Wrapper","children","_jsx","StyledLayout","title","type","accept","onChange","evn","file","target","files","ExifReader","then","data","image","base64","src","Object","keys","map","keyname","key","description","extra","CopyButton","value","CodeEditor","extensions","jsonLang","readOnly"],"sourceRoot":""}