{"version":3,"file":"static/js/935.693c752e.chunk.js","mappings":"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","sources":["../../packages/chinese-pinyin-conversion/src/index.tsx"],"sourcesContent":["import { InputHTMLAttributes, useEffect, useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, ResultCode } from '@wcj/tools-react-components';\nimport styled from 'styled-components';\nimport pinyin from 'pinyin';\nimport { IPinyinStyle } from 'pinyin/lib/declare';\n\ntype ResultHans = string | { hans: string; py: string };\n\nconst Hans = styled.div`\n  line-height: 38px;\n  & rt {\n    letter-spacing: 0;\n  }\n  & ruby {\n    text-align: center;\n    margin: 0 5px;\n  }\n`;\n\nconst Text = styled.span`\n  letter-spacing: 0;\n`;\n\nconst ExtraLayout = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\ninterface InputRadioProps\n  extends Omit<React.DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, 'style'> {\n  style?: IPinyinStyle;\n  value?: IPinyinStyle;\n}\n\nconst InputRadio: React.FC<React.PropsWithChildren<InputRadioProps>> = ({ style, value, children, ...props }) => (\n  <label>\n    <input type=\"radio\" name=\"style\" {...props} value={value} checked={style === value} /> {children}\n  </label>\n);\n\nexport default function ChinesePinyinConversion() {\n  const [value, setValue] = useState<string>();\n  const [style, setStyle] = useState<IPinyinStyle>('TONE');\n  const [result, setResult] = useState<string>();\n  const [resultHans, setResultHans] = useState<ResultHans[]>([]);\n  const handleInput = (value: string = '') => {\n    setValue(value);\n    const json = pinyin(value, { style: style, group: true });\n    const textPinyin = json\n      .join(' ')\n      .replace(\n        /[。，（）]/g,\n        (c: string) => (({ '。': '.', '，': ',', '（': '(', '）': ')' } as Record<string, string>)[c]),\n      );\n    setResult(textPinyin);\n\n    const arr = json.flat();\n    let pyIndx = 0;\n    let hans = '';\n    const result: ResultHans[] = [];\n    for (let i = 0; i < value.length; i++) {\n      if (/[\\u4e00-\\u9fa5]/g.test(value[i])) {\n        result.push({ hans: value[i], py: arr[pyIndx] });\n        pyIndx += 1;\n        hans = '';\n      } else {\n        hans += value[i];\n        if (hans === arr[pyIndx]) {\n          result.push(hans);\n          pyIndx += 1;\n        }\n      }\n    }\n    setResultHans(result);\n  };\n  const ResultTitle = () => (\n    <ruby>\n      拼 <rt>pīn</rt>音 <rt>yīn</rt>\n    </ruby>\n  );\n  const hanldeChange = (evn: React.ChangeEvent<HTMLInputElement>) => {\n    const typeVal = (evn.target as HTMLInputElement).value as IPinyinStyle;\n    setStyle(typeVal);\n  };\n  useEffect(() => {\n    if (value && style) {\n      handleInput(value);\n    }\n  }, [style]);\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Input Chinese Characters\" extra={value && <CopyButton value={value} />}>\n        <Textarea\n          spellCheck={false}\n          value={value}\n          style={{ fontSize: 16 }}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"Result\">\n        <ResultCode\n          title={<ResultTitle />}\n          extra={\n            <ExtraLayout>\n              <InputRadio onChange={hanldeChange} style={style} value=\"NORMAL\">\n                NORMAL\n              </InputRadio>\n              <InputRadio onChange={hanldeChange} style={style} value=\"TONE\">\n                TONE\n              </InputRadio>\n              <InputRadio onChange={hanldeChange} style={style} value=\"FIRST_LETTER\">\n                FIRST_LETTER\n              </InputRadio>\n              {result && <CopyButton value={result} />}\n            </ExtraLayout>\n          }\n        >\n          {result}\n        </ResultCode>\n        <ResultCode>\n          <Hans>\n            {resultHans.map((item, idx) => {\n              if (typeof item === 'string') {\n                return <Text key={idx}>{item}</Text>;\n              }\n              return (\n                <ruby key={idx}>\n                  {item.hans}\n                  <rt>{item.py}</rt>\n                </ruby>\n              );\n            })}\n          </Hans>\n        </ResultCode>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["Hans","styled","_templateObject","Text","_templateObject2","ExtraLayout","_templateObject3","InputRadio","style","value","children","props","_jsxs","_jsx","type","name","checked","ChinesePinyinConversion","useState","setValue","setStyle","result","setResult","resultHans","setResultHans","handleInput","json","pinyin","group","textPinyin","join","replace","c","arr","flat","pyIndx","hans","i","length","test","push","py","ResultTitle","hanldeChange","evn","typeVal","target","useEffect","Wrapper","StyledLayout","title","extra","CopyButton","Textarea","spellCheck","fontSize","onInput","ResultCode","onChange","map","item","idx"],"sourceRoot":""}