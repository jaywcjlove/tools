{"version":3,"file":"static/js/6029.9ef23815.chunk.js","mappings":"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","sources":["../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/strnum/strnum.js"],"sourcesContent":["'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n"],"names":["validator","require","XMLParser","XMLBuilder","module","exports","XMLValidator","nameStartChar","nameRegexp","regexName","RegExp","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","buildFromOrderedJs","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","cdataPropName","format","indentBy","suppressEmptyNode","suppressUnpairedNode","suppressBooleanAttributes","tagValueProcessor","key","attributeValueProcessor","preserveOrder","commentPropName","entities","val","processEntities","stopNodes","oneListGroup","Builder","this","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","j2x","buildTextValNode","buildObjectNode","repeat","name","startsWith","prototype","build","jObj","Array","isArray","arrayNodeName","call","Date","attr","buildAttrPairStr","newval","replaceEntitiesValue","arrLen","listTagVal","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","concat","textValue","entity","arrToStr","arr","jPath","indentation","xmlStr","isPreviousElementTag","tagObj","propName","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","endsWith","includes","attrMap","attrVal","lastIndexOf","jArray","readEntityExp","entityName","Error","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","hasBody","comment","exp","regx","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","numberParseOptions","hex","leadingZeros","eNotation","alwaysCreateTextNode","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","attrs","buildOptions","xmlNode","readDocType","toNumber","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","propIndex","tagsNodeStack","tagData","readTagExp","childNode","add","tagExp","attrExpPresent","addChild","endIndex","docTypeEntities","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","child","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","str","errMsg","closingIndex","attrBoundary","closingChar","arguments","ch","data","tagExpWithClosingIndex","separatorIndex","search","trimStart","openTagCount","shouldParse","constructor","_","String","fromCharCode","Number","parseInt","OrderedObjParser","prettify","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","compress","text","compressedObj","property","newJpath","isLeaf","isLeafTag","assignAttributes","jpath","atrrName","propCount","node","hexRegex","numRegex","window","parseFloat","consider","decimalPoint","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num"],"sourceRoot":""}