{"version":3,"file":"static/js/675.6d33de47.chunk.js","mappings":"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","sources":["../../packages/generate-github-badges/src/CustomBadge.tsx","../../packages/generate-github-badges/src/index.tsx","../../packages/generate-github-badges/src/utils.ts"],"sourcesContent":["import { Fragment, useState } from 'react';\nimport { Spacing, Button, CodeLineCopy } from '@wcj/tools-react-components';\nimport { ShieldsStyle } from './';\n\nconst styleData = ['flat', 'plastic', 'flat-square', 'for-the-badge', 'social'];\n\nexport const CustomBadge = () => {\n  const [color, setColor] = useState('green');\n  const [logoColor, setLogoColor] = useState('');\n  const [labelColor, setLabelColor] = useState('');\n  const [logo, setLogo] = useState('github');\n  const [style, setStyle] = useState<ShieldsStyle | undefined>();\n  const [label, setLabel] = useState('Tools');\n  const [content, setContent] = useState('content');\n  const [result, setResult] = useState(`https://shields.io/badge/${label}-${content}-${color}?logo=${logo}`);\n  const [history, setHistory] = useState<string[]>([result]);\n\n  function handleChange() {\n    const param: string[] = [];\n    // if (color) param.push(`color=${color.replace(/^#/g, '')}`);\n    if (logoColor) param.push(`logoColor=${logoColor.replace(/^#/g, '')}`);\n    if (labelColor) param.push(`labelColor=${labelColor.replace(/^#/g, '')}`);\n    if (logo) param.push(`logo=${logo}`);\n    if (style) param.push(`style=${style}`);\n    if (label) param.push(`label=${label}`);\n    const url = `https://shields.io/badge/${label}-${content}-${color.replace(/^#/g, '')}?${param.join('&')}`;\n    setResult(url);\n    const data = [...history];\n    data.unshift(url);\n    setHistory(data);\n  }\n  return (\n    <Fragment>\n      <Spacing>\n        <div>\n          <img src={result} />\n        </div>\n        <Spacing direction=\"row\">\n          <label>\n            Logo Color: <input type=\"color\" value={logoColor} onChange={(evn) => setLogoColor(evn.target.value)} />\n          </label>\n          <label>\n            Label Color: <input type=\"color\" value={labelColor} onChange={(evn) => setLabelColor(evn.target.value)} />\n          </label>\n          <label>\n            Color: <input type=\"color\" value={color} onChange={(evn) => setColor(evn.target.value)} />\n          </label>\n        </Spacing>\n        <Spacing direction=\"row\">\n          <input type=\"text\" value={label} onChange={(evn) => setLabel(evn.target.value)} />\n          <input type=\"text\" value={content} onChange={(evn) => setContent(evn.target.value)} />\n          <select value={style || ''} onChange={(evn) => setStyle(evn.target.value as ShieldsStyle)}>\n            <option value=\"\">Please select Style</option>\n            {styleData.map((st, idx) => (\n              <option key={idx} value={st}>\n                {' '}\n                Style: {st}{' '}\n              </option>\n            ))}\n          </select>\n          <Spacing direction=\"row\">\n            <select value={logo.toLocaleLowerCase()} onChange={(evn) => setLogo(evn.target.value)}>\n              <option>Please select Logo</option>\n              <option value=\"github\"> Logo: Github </option>\n              <option value=\"npm\"> Logo: npm </option>\n              <option value=\"google\"> Logo: Google </option>\n              <option value=\"baidu\"> Logo: baidu </option>\n            </select>\n            <input\n              type=\"text\"\n              value={logo}\n              placeholder=\"Please enter a logo name\"\n              onChange={(evn) => setLogo(evn.target.value)}\n            />\n          </Spacing>\n        </Spacing>\n        <Spacing direction=\"row\">\n          <Button onClick={handleChange}>Generate Badges</Button>\n        </Spacing>\n        {history &&\n          history.map((item, idx) => {\n            return (\n              <CodeLineCopy key={`${item}${idx}`} label={<img src={item} alt=\"\" />}>\n                {`![](${item})`}\n              </CodeLineCopy>\n            );\n          })}\n      </Spacing>\n    </Fragment>\n  );\n};\n","import { Fragment, useCallback, useEffect, useState } from 'react';\nimport {\n  Wrapper,\n  StyledLayout,\n  CopyButton,\n  Button,\n  InputButton,\n  Spacing,\n  CodeLineCopy,\n} from '@wcj/tools-react-components';\nimport npmBadgen from './npm.badgen.json';\nimport npmShields from './npm.shields.json';\nimport githubBadgen from './github.badgen.json';\nimport githubShields from './github.shields.json';\nimport githubOther from './github.other.json';\nimport dockerBadgen from './docker.badgen.json';\nimport dockerShields from './docker.shields.json';\nimport { CustomBadge } from './CustomBadge';\n\nimport { changeStyle } from './utils';\n\ninterface Data {\n  url: string;\n  label: string;\n  user?: string;\n  repo?: string;\n}\n\ntype Category = 'github' | 'npm' | 'docker';\nexport type Type = 'badgen' | 'shields';\n\nexport type ShieldsStyle = 'flat' | 'plastic' | 'flat-square' | 'for-the-badge' | 'social' | null;\ntype BadgenStyle = 'flat' | 'classic' | null;\nexport type Style = ShieldsStyle | BadgenStyle;\n\nconst placeholder: Record<Category, string> = {\n  github: 'Enter `username/repository` name',\n  npm: 'Enter package name',\n  docker: 'Enter Image name E.g: `nginx`, `bitnami/nginx`',\n};\n\nexport interface GenerateBadgesProps {}\nexport default function GenerateBadges(props: GenerateBadgesProps) {\n  const [value, setValue] = useState<string>('jaywcjlove/tools');\n  const [style, setStyle] = useState<Style>();\n  const [custom, setCustom] = useState<boolean>(false);\n  const [category, setCategory] = useState<Category>('github');\n  const [type, setType] = useState<Type>('shields');\n  const [result, setResult] = useState<Data[]>([]);\n  const handleInput = () => {\n    const [user, repo] = value.split('/');\n    const data: Data[] = [];\n    let rawData: Data[] = [];\n    if (category === 'github') {\n      if (type === 'shields') {\n        rawData = [...githubShields, ...githubOther];\n      }\n      if (type === 'badgen') {\n        rawData = [...githubBadgen, ...githubOther];\n      }\n    }\n    if (category === 'npm') {\n      if (type === 'shields') {\n        rawData = [...npmShields];\n      }\n      if (type === 'badgen') {\n        rawData = [...npmBadgen];\n      }\n    }\n    if (category === 'docker') {\n      if (type === 'shields') {\n        rawData = [...dockerShields];\n      }\n      if (type === 'badgen') {\n        rawData = [...dockerBadgen];\n      }\n    }\n    rawData.forEach((item) => {\n      let url = '';\n      if (\n        category === 'github' &&\n        ((repo && /{{:repo}}/gi.test(item.url)) ||\n          (user && /{{:user}}/gi.test(item.url) && !/{{:repo}}/gi.test(item.url)))\n      ) {\n        url = item.url.replace(/{{:user}}/gi, user).replace(/{{:repo}}/gi, repo);\n      }\n      if (category === 'npm' && /{{:pkg}}/.test(item.url)) {\n        url = item.url.replace(/{{:pkg}}/gi, repo ? `${user}/${repo}` : user);\n      }\n      if (category === 'docker' && /{{:library}}/.test(item.url)) {\n        if (type === 'badgen' && !repo && !/{{:user}}/.test(item.url)) {\n          url = item.url.replace(/{{:library}}/gi, user);\n        }\n        if (type === 'badgen' && user && repo && /{{:user}}/.test(item.url)) {\n          url = item.url.replace(/{{:user}}/gi, user).replace(/{{:library}}/gi, repo);\n        }\n        if (type === 'shields' && !repo) {\n          url = item.url.replace(/{{:user}}/gi, '_').replace(/{{:library}}/gi, user);\n        }\n        if (type === 'shields' && user && repo) {\n          url = item.url.replace(/{{:user}}/gi, user).replace(/{{:library}}/gi, user);\n        }\n      }\n      if (url) {\n        const raw = changeStyle(url, type, style);\n        data.push({ url: raw, label: item.label, user, repo });\n      }\n    });\n    setResult(data);\n  };\n\n  useEffect(() => {\n    handleInput();\n  }, [type, style]);\n\n  const ExtraLayout = useCallback(\n    () => (\n      <Fragment>\n        <select\n          defaultValue={category}\n          onChange={(evn) => {\n            setValue('');\n            setCategory(evn.target.value as Category);\n            setResult([]);\n          }}\n        >\n          <option value=\"github\">github</option>\n          <option value=\"npm\">npm</option>\n          <option value=\"docker\">docker</option>\n        </select>\n        <select\n          defaultValue={type}\n          onChange={(evn) => {\n            setType(evn.target.value as Type);\n          }}\n        >\n          <option value=\"badgen\">badgen</option>\n          <option value=\"shields\">shields</option>\n        </select>\n        <select defaultValue={style || ''} onChange={(evn) => setStyle(evn.target.value as Style)}>\n          <option value=\"\">default</option>\n          {type === 'badgen' && <option value=\"classic\">classic</option>}\n          {type === 'shields' && (\n            <Fragment>\n              <option value=\"plastic\">plastic</option>\n              <option value=\"flat-square\">flat-square</option>\n              <option value=\"for-the-badge\">for-the-badge</option>\n              <option value=\"social\">social</option>\n            </Fragment>\n          )}\n          <option value=\"flat\">flat</option>\n        </select>\n      </Fragment>\n    ),\n    [category, type, style],\n  );\n\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"Generate Badges\"\n        overflow=\"initial\"\n        extra={\n          <Fragment>\n            <Button onClick={() => setCustom(!custom)}>{custom ? 'Default Badges' : 'Custom Badges'}</Button>\n            {value && <CopyButton value={value} />}\n          </Fragment>\n        }\n      >\n        {custom ? (\n          <CustomBadge />\n        ) : (\n          <Spacing>\n            <InputButton\n              value={value}\n              placeholder={placeholder[category]}\n              extra={<ExtraLayout />}\n              onClick={handleInput}\n              onChange={(evn) => setValue(evn.target.value)}\n            >\n              Generate Badges\n            </InputButton>\n            {result &&\n              result.map((item, idx) => {\n                return (\n                  <CodeLineCopy\n                    key={`${item.user}${item.repo || idx}${idx}`}\n                    label={<img src={item.url} alt={item.label} />}\n                  >\n                    {`![${item.label}](${item.url})`}\n                  </CodeLineCopy>\n                );\n              })}\n          </Spacing>\n        )}\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n","import { Type, Style } from './';\n\nexport function changeStyle(url: string, type: Type, style?: Style) {\n  const obj = new URL(url);\n  if (type === 'badgen' && obj.host.endsWith('badgen.net')) {\n    if (style === 'flat') {\n      obj.host = 'flat.badgen.net';\n    }\n    if (style === 'classic') {\n      obj.host = 'badgen.nett';\n    }\n  }\n  if (type === 'shields' && obj.host.endsWith('shields.io')) {\n    const params = new URLSearchParams(obj.search);\n    if (style) {\n      params.set('style', style);\n    } else {\n      params.delete('style');\n    }\n    obj.search = params.toString();\n  }\n  return obj.href;\n}\n"],"names":["styleData","CustomBadge","useState","color","setColor","logoColor","setLogoColor","labelColor","setLabelColor","logo","setLogo","style","setStyle","label","setLabel","content","setContent","result","setResult","history","setHistory","_jsx","Fragment","children","_jsxs","Spacing","src","direction","type","value","onChange","evn","target","map","st","idx","toLocaleLowerCase","placeholder","Button","onClick","param","push","replace","url","join","data","unshift","item","CodeLineCopy","alt","github","npm","docker","GenerateBadges","props","setValue","custom","setCustom","category","setCategory","setType","handleInput","split","user","repo","rawData","githubShields","githubOther","githubBadgen","npmShields","npmBadgen","dockerShields","dockerBadgen","forEach","test","raw","obj","URL","host","endsWith","params","URLSearchParams","search","set","delete","toString","href","changeStyle","useEffect","ExtraLayout","useCallback","defaultValue","Wrapper","StyledLayout","title","overflow","extra","CopyButton","InputButton"],"sourceRoot":""}