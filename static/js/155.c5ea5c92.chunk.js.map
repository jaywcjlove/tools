{"version":3,"file":"static/js/155.c5ea5c92.chunk.js","mappings":"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","sources":["../../node_modules/mdurl/encode.js","../../node_modules/hast-util-to-html/lib/omission/util/comment.js","../../node_modules/hast-util-to-html/lib/omission/util/siblings.js","../../node_modules/hast-util-to-html/lib/omission/util/whitespace-start.js","../../node_modules/hast-util-to-html/lib/omission/omission.js","../../node_modules/hast-util-to-html/lib/omission/closing.js","../../node_modules/hast-util-to-html/lib/omission/opening.js","../../node_modules/hast-util-to-html/lib/omission/index.js","../../node_modules/stringify-entities/lib/core.js","../../node_modules/stringify-entities/lib/util/to-named.js","../../node_modules/character-entities-html4/index.js","../../node_modules/stringify-entities/lib/constant/dangerous.js","../../node_modules/stringify-entities/lib/util/format-smart.js","../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","../../node_modules/stringify-entities/lib/util/to-decimal.js","../../node_modules/stringify-entities/lib/index.js","../../node_modules/hast-util-to-html/lib/constants.js","../../node_modules/hast-util-to-html/lib/text.js","../../node_modules/hast-util-to-html/lib/tree.js","../../node_modules/hast-util-to-html/lib/comment.js","../../node_modules/hast-util-to-html/lib/doctype.js","../../node_modules/hast-util-to-html/lib/raw.js","../../node_modules/rehype-stringify/lib/index.js","../../node_modules/hast-util-to-html/lib/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/unist-builder/index.js","../../node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/index.js","../../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","../../node_modules/mdast-util-definitions/index.js","../../node_modules/mdast-util-to-hast/lib/traverse.js","../../node_modules/micromark-util-encode/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/wrap.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/unist-util-generated/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","/**\n * @typedef {import('../../types.js').Comment} Comment\n */\n\nimport {convert} from 'unist-util-is'\n\n/** @type {import('unist-util-is').AssertPredicate<Comment>} */\n// @ts-ignore\nexport const comment = convert('comment')\n","/**\n * @typedef {import('../../types.js').Parent} Parent\n * @typedef {import('../../types.js').Child} Child\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @param {Parent} parent\n   * @param {number} index\n   * @param {boolean} [includeWhitespace=false]\n   * @returns {Child}\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent && parent.children\n    let offset = index + increment\n    let next = siblings && siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    return next\n  }\n}\n","/**\n * @typedef {import('../../types.js').Node} Node\n * @typedef {import('../../types.js').Text} Text\n */\n\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\n\n/** @type {import('unist-util-is').AssertPredicate<Text>} */\n// @ts-ignore\nconst isText = convert('text')\n\n/**\n * Check if `node` starts with whitespace.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nexport function whitespaceStart(node) {\n  return isText(node) && whitespace(node.value.charAt(0))\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Object.<string, OmitHandle>} handlers\n * @returns {OmitHandle}\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {comment} from './util/comment.js'\nimport {siblingAfter} from './util/siblings.js'\nimport {whitespaceStart} from './util/whitespace-start.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  html,\n  head: headOrColgroupOrCaption,\n  body,\n  p,\n  li,\n  dt,\n  dd,\n  rt: rubyElement,\n  rp: rubyElement,\n  optgroup,\n  option,\n  menuitem,\n  colgroup: headOrColgroupOrCaption,\n  caption: headOrColgroupOrCaption,\n  thead,\n  tbody,\n  tfoot,\n  tr,\n  td: cells,\n  th: cells\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @type {OmitHandle}\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return !next || (!comment(next) && !whitespaceStart(next))\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @type {OmitHandle}\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || !comment(next)\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @type {OmitHandle}\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || !comment(next)\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @type {OmitHandle}\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? isElement(next, [\n        'address',\n        'article',\n        'aside',\n        'blockquote',\n        'details',\n        'div',\n        'dl',\n        'fieldset',\n        'figcaption',\n        'figure',\n        'footer',\n        'form',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'header',\n        'hgroup',\n        'hr',\n        'main',\n        'menu',\n        'nav',\n        'ol',\n        'p',\n        'pre',\n        'section',\n        'table',\n        'ul'\n      ])\n    : !parent ||\n        // Confusing parent.\n        !isElement(parent, [\n          'a',\n          'audio',\n          'del',\n          'ins',\n          'map',\n          'noscript',\n          'video'\n        ])\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @type {OmitHandle}\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @type {OmitHandle}\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next && isElement(next, ['dt', 'dd'])\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @type {OmitHandle}\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['dt', 'dd'])\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @type {OmitHandle}\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['rp', 'rt'])\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @type {OmitHandle}\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @type {OmitHandle}\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['option', 'optgroup'])\n}\n\n/**\n * Whether to omit `</menuitem>`.\n *\n * @type {OmitHandle}\n */\nfunction menuitem(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['menuitem', 'hr', 'menu'])\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @type {OmitHandle}\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next && isElement(next, ['tbody', 'tfoot'])\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @type {OmitHandle}\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['tbody', 'tfoot'])\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @type {OmitHandle}\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @type {OmitHandle}\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @type {OmitHandle}\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || isElement(next, ['td', 'th'])\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n * @typedef {import('../types.js').Child} Child\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {comment} from './util/comment.js'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {whitespaceStart} from './util/whitespace-start.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @type {OmitHandle}\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || !comment(head)\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @type {OmitHandle}\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array.<string>} */\n  const seen = []\n  let index = -1\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n    if (isElement(child, ['title', 'base'])) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @type {OmitHandle}\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (!comment(head) &&\n      !whitespaceStart(head) &&\n      !isElement(head, ['meta', 'link', 'script', 'style', 'template']))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @type {OmitHandle}\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    isElement(previous, 'colgroup') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && isElement(head, 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @type {OmitHandle}\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    isElement(previous, ['thead', 'tbody']) &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && isElement(head, 'tr')\n}\n","/**\n * @typedef {import('../types.js').Omission} Omission\n */\n\nimport {opening} from './opening.js'\nimport {closing} from './closing.js'\n\n/** @type {Omission} */\nexport const omission = {opening, closing}\n","/**\n * @typedef {Object} CoreOptions\n * @property {string[]} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef {Object} FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {string[]} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {string[]} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Object.<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array.<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","/**\n * @typedef {Object} FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","// Maps of subsets.\n// Each value is a matrix of tuples.\n// The first value causes parse errors, the second is valid.\n// Of both values, the first value is unsafe, and the second is safe.\nexport const constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n","/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(ctx, node, _, parent) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    // @ts-expect-error: hush.\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, ctx.entities, {subset: ['<', '&']})\n      )\n}\n","/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').PropertyValue} PropertyValue\n * @typedef {import('./types.js').Parent} Parent\n */\n\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {ccount} from 'ccount'\nimport {constants} from './constants.js'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {raw} from './raw.js'\nimport {text} from './text.js'\n\n/**\n * @type {Object.<string, Handle>}\n */\nconst handlers = {\n  comment,\n  doctype,\n  element,\n  // @ts-ignore `raw` is nonstandard\n  raw,\n  // @ts-ignore `root` is a parent.\n  root: all,\n  text\n}\n\nconst own = {}.hasOwnProperty\n\n/**\n * @type {Handle}\n */\nexport function one(ctx, node, index, parent) {\n  if (!node || !node.type) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  if (!own.call(handlers, node.type)) {\n    throw new Error('Cannot compile unknown node `' + node.type + '`')\n  }\n\n  return handlers[node.type](ctx, node, index, parent)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @type {Handle}\n * @param {Parent} parent\n */\nexport function all(ctx, parent) {\n  /** @type {Array.<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = one(ctx, children[index], index, parent)\n  }\n\n  return results.join('')\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function element(ctx, node, index, parent) {\n  const schema = ctx.schema\n  const omit = schema.space === 'svg' ? undefined : ctx.omit\n  let selfClosing =\n    schema.space === 'svg'\n      ? ctx.closeEmpty\n      : ctx.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array.<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg\n  }\n\n  const attrs = serializeAttributes(ctx, node.properties)\n\n  const content = all(\n    ctx,\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  ctx.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {Properties} props\n * @returns {string}\n */\nfunction serializeAttributes(ctx, props) {\n  /** @type {Array.<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n  /** @type {string} */\n  let value\n  /** @type {string} */\n  let last\n\n  for (key in props) {\n    if (props[key] !== undefined && props[key] !== null) {\n      value = serializeAttribute(ctx, key, props[key])\n      if (value) values.push(value)\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(ctx, key, value) {\n  const info = find(ctx.schema, key)\n  let quote = ctx.quote\n  /** @type {string} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset:\n        constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  value =\n    typeof value === 'object' && 'length' in value\n      ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n        // keep the code cleaner.\n        (info.commaSeparated ? commas : spaces)(value, {\n          padLeft: !ctx.tightLists\n        })\n      : String(value)\n\n  if (ctx.collapseEmpty && !value) return name\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, ctx.entities, {\n        subset: constants.unquoted[ctx.valid][ctx.safe],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, ctx.entities, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[\n            ctx.schema.space === 'html' ? ctx.valid : 1\n          ][ctx.safe],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Comment} Comment\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(ctx, node) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return ctx.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, ctx.entities, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, ctx.entities, {subset: ['<', '>']})\n    )\n  }\n}\n","/**\n * @typedef {import('./types.js').Handle} Handle\n */\n\n/**\n * @type {Handle}\n */\nexport function doctype(ctx) {\n  return (\n    '<!' +\n    (ctx.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (ctx.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Raw} Raw\n */\n\nimport {text} from './text.js'\n\n/**\n * @type {Handle}\n * @param {Raw} node\n */\nexport function raw(ctx, node, index, parent) {\n  // @ts-ignore Hush.\n  return ctx.dangerous ? node.value : text(ctx, node, index, parent)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Quote} Quote\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {omission} from './omission/index.js'\nimport {one} from './tree.js'\n\n/**\n * @param {Node|Array.<Node>} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toHtml(node, options = {}) {\n  const quote = options.quote || '\"'\n  /** @type {Quote} */\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {Context} */\n  const context = {\n    valid: options.allowParseErrors ? 0 : 1,\n    safe: options.allowDangerousCharacters ? 0 : 1,\n    schema: options.space === 'svg' ? svg : html,\n    omit: options.omitOptionalTags ? omission : undefined,\n    quote,\n    alternative,\n    smart: options.quoteSmart,\n    unquoted: options.preferUnquoted,\n    tight: options.tightAttributes,\n    upperDoctype: options.upperDoctype,\n    tightDoctype: options.tightDoctype,\n    bogusComments: options.bogusComments,\n    tightLists: options.tightCommaSeparatedLists,\n    tightClose: options.tightSelfClosing,\n    collapseEmpty: options.collapseEmptyAttributes,\n    dangerous: options.allowDangerousHtml,\n    voids: options.voids || htmlVoidElements.concat(),\n    entities: options.entities || {},\n    close: options.closeSelfClosing,\n    closeEmpty: options.closeEmptyElements\n  }\n\n  return one(\n    context,\n    // @ts-ignore Assume `node` does not contain a root.\n    Array.isArray(node) ? {type: 'root', children: node} : node,\n    null,\n    null\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {StackItem[]} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n\n  let chunks = []\n  /** @type {Token[]} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.29/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.29/#html-blocks>.\n *\n * Note that `textarea` is not available in `CommonMark@0.29` but has been\n * merged to the primary branch and is slated to be released in the next release\n * of CommonMark.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Event[]} events\n * @returns {Event[]}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\n\nexport var u = /**\n * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n */ (\n  /**\n   * @param {string} type Type of node\n   * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n   * @param {ChildrenOrValue} [value] `children` or `value` of node\n   * @returns {Node}\n   */\n  function (type, props, value) {\n    /** @type {Node} */\n    var node = {type: String(type)}\n\n    if (\n      (value === undefined || value === null) &&\n      (typeof props === 'string' || Array.isArray(props))\n    ) {\n      value = props\n    } else {\n      Object.assign(node, props)\n    }\n\n    if (Array.isArray(value)) {\n      node.children = value\n    } else if (value !== undefined && value !== null) {\n      node.value = String(value)\n    }\n\n    return node\n  }\n)\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types\n * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent\n * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.\n * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {Array.<Parent>} ancestors Ancestors of node\n * @returns {VisitorResult}\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-ignore no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      var is = convert(test)\n      var step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array.<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Object.<string, unknown>} */\n        var value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string} */\n        var name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          var result = []\n          /** @type {ActionTuple} */\n          var subresult\n          /** @type {number} */\n          var offset\n          /** @type {Array.<Parent>} */\n          var grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          if (node.children && result[0] !== SKIP) {\n            // @ts-ignore looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-ignore looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-ignore looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {number|null} index Position of `node` in `parent`\n * @param {Parent|null} parent Parent of `node`\n * @returns {VisitorResult}\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\nexport const visit =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        var parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('unist-util-visit').Visitor<Definition>} DefinitionVisitor\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Object.<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', ondefinition)\n\n  return getDefinition\n\n  /** @type {DefinitionVisitor} */\n  function ondefinition(definition) {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  }\n\n  /**\n   * Get a node from the bound definition-cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function getDefinition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction normalizeUri(value) {\n  /** @type {string[]} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = sanitizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalize(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalize(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalize(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalize(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(\n    node,\n    u('text', String(node.value).replace(/[ \\t]*(\\r?\\n|\\r)[ \\t]*/g, '$1'))\n  )\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering\n * @property {string} footnoteLabel Label to use to introduce the footnote section\n * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array<string>} footnoteOrder Order in which footnotes occur\n * @property {Record<string, number>} footnoteCounts Counts the same footnote was used\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = sanitizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: 'h2',\n        properties: {id: 'footnote-label', className: ['sr-only']},\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","module","exports","comment","convert","siblingAfter","siblings","siblingBefore","increment","parent","index","includeWhitespace","children","offset","next","whitespace","isText","whitespaceStart","node","value","charAt","own","hasOwnProperty","omission","handlers","call","tagName","closing","html","_","head","headOrColgroupOrCaption","body","p","isElement","li","dt","dd","rt","rubyElement","rp","optgroup","option","menuitem","colgroup","caption","thead","tbody","tfoot","tr","td","cells","th","opening","child","seen","includes","previous","indexOf","core","options","replace","subset","groups","RegExp","join","charactersToExpression","basic","escapeOnly","pair","all","format","character","key","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","dangerous","characters","formatSmart","named","numeric","omit","toHexadecimal","omitOptionalSemicolons","useNamedReferences","useShortestReferences","attribute","name","characterEntitiesLegacy","toNamed","decimal","toDecimal","stringifyEntities","Object","assign","constants","split","unquoted","single","double","text","ctx","type","entities","bogusComments","$0","doctype","upperDoctype","tightDoctype","element","last","schema","space","undefined","selfClosing","closeEmpty","voids","toLowerCase","parts","svg","attrs","props","values","serializeAttribute","tight","serializeAttributes","properties","content","close","tightClose","raw","root","one","Error","results","info","find","quote","overloadedBoolean","boolean","Boolean","Number","isNaN","valid","safe","commaSeparated","commas","spaces","padLeft","tightLists","collapseEmpty","smart","ccount","alternative","rehypeStringify","config","processorSettings","this","data","settings","Compiler","tree","allowParseErrors","allowDangerousCharacters","omitOptionalTags","quoteSmart","preferUnquoted","tightAttributes","tightCommaSeparatedLists","tightSelfClosing","collapseEmptyAttributes","allowDangerousHtml","htmlVoidElements","closeSelfClosing","closeEmptyElements","Array","isArray","toHtml","tokenize","effects","contentStart","attempt","parser","constructs","contentInitial","consume","enter","exit","factorySpace","lineStart","token","contentType","markdownLineEnding","document","childFlow","childToken","lineStartOffset","self","stack","continued","start","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","point","indexBeforeExits","events","indexBeforeFlow","end","exitContainers","splice","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","size","entry","ok","nok","disable","null","subtokenize","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","POSITIVE_INFINITY","balance","destinationEnclosedBefore","asciiControl","destinationRaw","destinationEnclosed","destinationEnclosedEscape","markdownLineEndingOrSpace","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","titleConstruct","defined","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","asciiAlpha","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","asciiHexDigit","decodeNamedCharacterReference","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","asciiAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","resolveText","search","fromMarkdown","encoding","configure","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","mdastExtensions","compile","tokenStack","listStack","resume","setData","getData","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","d","errorHandler","onExitError","stringifyPosition","parseInt","url","depth","referenceType","ancestor","decodeString","fragment","alt","decodeNumericCharacterReference","ordered","spread","checked","compiler","postprocess","combineExtensions","defaultConstructs","concat","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","combined","extension","left","right","Parser","doc","u","visitParents","visitor","reverse","is","step","factory","parents","defineProperty","visit","subresult","grandparents","toResult","definitions","id","clean","unknown","h","augment","fn","passThrough","returnNode","unknownHandler","nodes","characterReferences","sanitizeUri","protocol","skip","normalizeUri","colon","questionMark","numberSign","slash","wrap","loose","footnoteReference","counter","safeId","footnoteOrder","footnoteCounts","reuseCounter","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","blockquote","break","className","delete","footnote","footnoteById","no","imageReference","src","normalize","inlineCode","linkReference","listLoose","wrapped","disabled","items","table","rows","align","row","out","cellIndex","cell","pointStart","pointEnd","toml","ignore","yaml","footnoteDefinition","toHast","footnoteLabel","footnoteBackLabel","hName","hProperties","hChildren","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","destination","file","run","error","bridge","mutate"],"sourceRoot":""}