{"version":3,"file":"static/js/860.cb558b35.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/markdown/dist/index.js","../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n        return tree;\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// @internal\n        this.dontInject = new Set;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        let withoutGaps = taken, end = this.absoluteLineStart + taken;\n        for (let i = 1; i < this.ranges.length; i++) {\n            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;\n            if (gapFrom >= this.lineStart && gapTo < end)\n                withoutGaps -= gapTo - gapFrom;\n        }\n        this.lineStart += withoutGaps;\n        this.absoluteLineStart += taken;\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dont) {\n    if (dont.has(tree.tree))\n        return tree.tree;\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node;\n        if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dont);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]]\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            cx.dontInject.add(cur.tree);\n            cx.addNode(cur.tree, cur.from - off);\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, Prec } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, Language, LanguageDescription, ParseContext, syntaxTree, LanguageSupport } from '@codemirror/language';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html } from '@codemirror/lang-html';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ block: { open: \"<!--\", close: \"-->\" } });\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            if (!type.is(\"Block\") || type.is(\"Document\"))\n                return undefined;\n            return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^[ \\t]*>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^([ \\t]*)\\d+([.)])([ \\t]*)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^([ \\t]*)([-+*])([ \\t]{1,4}\\[[ xX]\\])?([ \\t]+)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);\n                }\n                insert += state.lineBreak;\n                return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? context[i + 1].from - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = state.lineBreak + insert;\n        changes.push({ from, to: pos, insert });\n        return { range: EditorSelection.cursor(from + insert.length), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to)))\n                        return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    return new LanguageSupport(mkLang(parser.configure(extensions)), support);\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","type","value","from","hash","end","children","positions","this","hashProp","NodeProp","child","pos","prop","Tree","length","push","nodeSet","last","Math","max","types","balance","makeTree","NodeType","parentHash","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forwardInner","newPos","skipSpace","countIndent","charCodeAt","pop","to","findColumn","elt","i","goal","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","moveBase","space","ListItem","_cx","moveBaseColumn","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","scrub","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","dontInject","Set","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","create","FragmentCursor","readLine","finishContext","mark","reuseFragment","blockParsers","forward","leafBlockParsers","parse","lines","endLeafBlock","stop","finishLeaf","RangeError","moveTo","matches","taken","takeNodes","withoutGaps","gapFrom","gapTo","moveRangeI","r","lineChunkAt","textOffset","nextFrom","scanLine","reset","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","getNodeType","none","addChild","toTree","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dont","has","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","propValues","MarkdownParser","blockNames","inlineParsers","inlineNames","wrappers","nodeTypes","Object","t","name","id","w","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","Parser","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","open","close","emp","closeSize","k","element","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","add","is","markdownHighlighting","tags","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","addDelimiter","parseRow","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","TaskParser","GFM","parentType","parseSubSuper","addElement","Superscript","Subscript","Emoji","match","data","defineLanguageFacet","commonmark","configure","foldNodeProp","state","doc","lineAt","indentNodeProp","languageDataProp","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","maxWidth","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","insertNewlineContinueMarkup","dispatch","syntaxTree","changeByRange","range","empty","isActiveAt","resolveInner","emptyLine","delTo","marker","EditorSelection","blank","lineBreak","prevLine","quoted","index","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","defaultCode","extensions","support","LanguageSupport","language","languages","defaultLanguage","codeParser","info","LanguageDescription","ParseContext","load","htmlParser","parseMixed","overlay","infoNode","getChild","parseCode","Prec","keymap"],"sourceRoot":""}