{"version":3,"file":"static/js/578.deed500b.chunk.js","mappings":"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","sources":["../../packages/generate-github-badges/src/index.tsx","../../packages/generate-github-badges/src/utils.ts"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, InputButton, Spacing, CodeLineCopy } from '@wcj/tools-react-components';\nimport npmBadgen from './npm.badgen.json';\nimport npmShields from './npm.shields.json';\nimport githubBadgen from './github.badgen.json';\nimport githubShields from './github.shields.json';\nimport githubOther from './github.other.json';\nimport dockerBadgen from './docker.badgen.json';\nimport dockerShields from './docker.shields.json';\n\nimport { changeStyle } from './utils';\n\ninterface Data {\n  url: string;\n  label: string;\n  user?: string;\n  repo?: string;\n}\n\ntype Category = 'github' | 'npm' | 'docker';\nexport type Type = 'badgen' | 'shields';\n\ntype ShieldsStyle = 'flat' | 'plastic' | 'flat-square' | 'for-the-badge' | 'social' | null;\ntype BadgenStyle = 'flat' | 'classic' | null;\nexport type Style = ShieldsStyle | BadgenStyle;\n\nconst placeholder: Record<Category, string> = {\n  github: 'Enter `username/repository` name',\n  npm: 'Enter package name',\n  docker: 'Enter Image name E.g: `nginx`, `bitnami/nginx`',\n};\n\nexport interface GenerateBadgesProps {}\nexport default function GenerateBadges(props: GenerateBadgesProps) {\n  const [value, setValue] = useState<string>('jaywcjlove/tools');\n  const [style, setStyle] = useState<Style>();\n  const [category, setCategory] = useState<Category>('github');\n  const [type, setType] = useState<Type>('shields');\n  const [result, setResult] = useState<Data[]>([]);\n  const handleInput = () => {\n    const [user, repo] = value.split('/');\n    const data: Data[] = [];\n    let rawData: Data[] = [];\n    if (category === 'github') {\n      if (type === 'shields') {\n        rawData = [...githubShields, ...githubOther];\n      }\n      if (type === 'badgen') {\n        rawData = [...githubBadgen, ...githubOther];\n      }\n    }\n    if (category === 'npm') {\n      if (type === 'shields') {\n        rawData = [...npmShields];\n      }\n      if (type === 'badgen') {\n        rawData = [...npmBadgen];\n      }\n    }\n    if (category === 'docker') {\n      if (type === 'shields') {\n        rawData = [...dockerShields];\n      }\n      if (type === 'badgen') {\n        rawData = [...dockerBadgen];\n      }\n    }\n    rawData.forEach((item) => {\n      let url = '';\n      if (\n        category === 'github' &&\n        ((repo && /{{:repo}}/gi.test(item.url)) ||\n          (user && /{{:user}}/gi.test(item.url) && !/{{:repo}}/gi.test(item.url)))\n      ) {\n        url = item.url.replace(/{{:user}}/gi, user).replace(/{{:repo}}/gi, repo);\n      }\n      if (category === 'npm' && /{{:pkg}}/.test(item.url)) {\n        url = item.url.replace(/{{:pkg}}/gi, repo ? `${user}/${repo}` : user);\n      }\n      if (category === 'docker' && /{{:library}}/.test(item.url)) {\n        if (type === 'badgen' && !repo && !/{{:user}}/.test(item.url)) {\n          url = item.url.replace(/{{:library}}/gi, user);\n        }\n        if (type === 'badgen' && user && repo && /{{:user}}/.test(item.url)) {\n          url = item.url.replace(/{{:user}}/gi, user).replace(/{{:library}}/gi, repo);\n        }\n        if (type === 'shields' && !repo) {\n          url = item.url.replace(/{{:user}}/gi, '_').replace(/{{:library}}/gi, user);\n        }\n        if (type === 'shields' && user && repo) {\n          url = item.url.replace(/{{:user}}/gi, user).replace(/{{:library}}/gi, user);\n        }\n      }\n      if (url) {\n        const raw = changeStyle(url, type, style);\n        data.push({ url: raw, label: item.label, user, repo });\n      }\n    });\n    setResult(data);\n  };\n\n  useEffect(() => {\n    handleInput();\n  }, [type, style]);\n\n  const ExtraLayout = useCallback(\n    () => (\n      <Fragment>\n        <select\n          defaultValue={category}\n          onChange={(evn) => {\n            setValue('');\n            setCategory(evn.target.value as Category);\n            setResult([]);\n          }}\n        >\n          <option value=\"github\">github</option>\n          <option value=\"npm\">npm</option>\n          <option value=\"docker\">docker</option>\n        </select>\n        <select\n          defaultValue={type}\n          onChange={(evn) => {\n            setType(evn.target.value as Type);\n          }}\n        >\n          <option value=\"badgen\">badgen</option>\n          <option value=\"shields\">shields</option>\n        </select>\n        <select defaultValue={style || ''} onChange={(evn) => setStyle(evn.target.value as Style)}>\n          <option value=\"\">default</option>\n          {type === 'badgen' && <option value=\"classic\">classic</option>}\n          {type === 'shields' && (\n            <Fragment>\n              <option value=\"plastic\">plastic</option>\n              <option value=\"flat-square\">flat-square</option>\n              <option value=\"for-the-badge\">for-the-badge</option>\n              <option value=\"social\">social</option>\n            </Fragment>\n          )}\n          <option value=\"flat\">flat</option>\n        </select>\n      </Fragment>\n    ),\n    [category, type, style],\n  );\n\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Github Badges\" extra={value && <CopyButton value={value} />}>\n        <Spacing>\n          <InputButton\n            value={value}\n            placeholder={placeholder[category]}\n            extra={<ExtraLayout />}\n            onClick={handleInput}\n            onChange={(evn) => setValue(evn.target.value)}\n          >\n            Generate Badges\n          </InputButton>\n          {result &&\n            result.map((item, idx) => {\n              return (\n                <CodeLineCopy\n                  key={`${item.user}${item.repo || idx}${idx}`}\n                  label={<img src={item.url} alt={item.label} />}\n                >\n                  {`![${item.label}](${item.url})`}\n                </CodeLineCopy>\n              );\n            })}\n        </Spacing>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n","import { Type, Style } from './';\n\nexport function changeStyle(url: string, type: Type, style?: Style) {\n  const obj = new URL(url);\n  if (type === 'badgen' && obj.host.endsWith('badgen.net')) {\n    if (style === 'flat') {\n      obj.host = 'flat.badgen.net';\n    }\n    if (style === 'classic') {\n      obj.host = 'badgen.nett';\n    }\n  }\n  if (type === 'shields' && obj.host.endsWith('shields.io')) {\n    const params = new URLSearchParams(obj.search);\n    if (style) {\n      params.set('style', style);\n    } else {\n      params.delete('style');\n    }\n    obj.search = params.toString();\n  }\n  return obj.href;\n}\n"],"names":["placeholder","github","npm","docker","GenerateBadges","props","useState","value","setValue","style","setStyle","category","setCategory","type","setType","result","setResult","handleInput","split","user","repo","data","rawData","githubShields","githubOther","githubBadgen","npmShields","npmBadgen","dockerShields","dockerBadgen","forEach","item","url","test","replace","raw","obj","URL","host","endsWith","params","URLSearchParams","search","set","delete","toString","href","changeStyle","push","label","useEffect","ExtraLayout","useCallback","_jsxs","Fragment","children","defaultValue","onChange","evn","target","_jsx","Wrapper","StyledLayout","title","extra","CopyButton","Spacing","InputButton","onClick","map","idx","CodeLineCopy","src","alt"],"sourceRoot":""}