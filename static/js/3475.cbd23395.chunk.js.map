{"version":3,"file":"static/js/3475.cbd23395.chunk.js","mappings":"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","sources":["../../node_modules/extend/index.js","../../node_modules/unified/node_modules/is-buffer/index.js","../../node_modules/vfile/node_modules/is-buffer/index.js","../../node_modules/ccount/index.js","../../node_modules/character-entities-legacy/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/hast-util-has-property/lib/index.js","../../node_modules/hast-util-heading-rank/lib/index.js","../../node_modules/hast-util-is-element/index.js","../../node_modules/hast-util-to-string/index.js","../../node_modules/hast-util-whitespace/index.js","../../node_modules/html-void-elements/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/util/association.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/util/safe.js","../../node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/index.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/rehype-autolink-headings/lib/index.js","../../node_modules/rehype-ignore/src/index.ts","../../node_modules/github-slugger/regex.js","../../node_modules/github-slugger/index.js","../../node_modules/rehype-slug/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/remark-gfm/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/bail/index.js","../../node_modules/unified/node_modules/is-plain-obj/index.js","../../node_modules/trough/index.js","../../node_modules/unified/lib/index.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/zwitch/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Check if `node`is an element and has a `field` property.\n *\n * @param {unknown} node\n *   Thing to check (typically `Element`).\n * @param {unknown} field\n *   Field name to check (typically `string`).\n * @returns {boolean}\n *   Whether `node` is an element that has a `field` property.\n */\nexport function hasProperty(node, field) {\n  const value =\n    typeof field === 'string' &&\n    isNode(node) &&\n    node.type === 'element' &&\n    node.properties &&\n    own.call(node.properties, field) &&\n    node.properties[field]\n\n  return value !== null && value !== undefined && value !== false\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n  return Boolean(value && typeof value === 'object' && 'type' in value)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\n// To do next major: return `undefined`.\n/**\n * Get the rank (`1` to `6`) of headings (`h1` to `h6`).\n *\n * @param {Node} node\n *   Node to check.\n * @returns {number | null}\n *   Rank of the heading or `null` if not a heading.\n */\nexport function headingRank(node) {\n  const name =\n    (node && node.type === 'element' && node.tagName.toLowerCase()) || ''\n  const code =\n    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */\n      ? name.charCodeAt(1)\n      : 0\n  return code > 48 /* `0` */ && code < 55 /* `7` */ ? code - 48 /* `0` */ : null\n}\n","/**\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\n *   Check for an arbitrary element, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if an element passes a test, unaware of TypeScript inferral.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {boolean | void}\n *   Whether this element passes the test.\n */\n\n/**\n * @template {Element} T\n *   Element type.\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\n *   Check for an element that can be inferred by TypeScript.\n */\n\n/**\n * Check if an element passes a certain node test.\n *\n * @template {Element} T\n *   Element type.\n * @callback TestFunctionPredicate\n *   Complex test function for an element that can be inferred by TypeScript.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {element is T}\n *   Whether this element passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} T\n *   Element type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is T}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if `node` is an `Element` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific element.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is an element and passes a test.\n */\nexport const isElement =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *  When nullish, checks if `node` is an `Element`.\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\n *   *  When `function` checks if function passed the element is true.\n *   *  When `array`, checks any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<string | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain tag name.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'isindex',\n  'keygen',\n  'link',\n  'menuitem',\n  'meta',\n  'nextid',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast-util-is-element').Test} Test\n *\n * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior\n *\n * @callback Build\n * @param {Element} node\n * @returns {ElementChild|ElementChild[]}\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior} [behavior='prepend']\n *   How to create links.\n * @property {Behavior} [behaviour]\n *   Please use `behavior` instead\n * @property {Properties} [properties]\n *   Extra properties to set on the link when injecting.\n *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or\n *   `'append'`.\n * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]\n *   hast nodes to insert in the link.\n * @property {ElementChild|ElementChild[]|Build} [group]\n *   hast node to wrap the heading and link with, if `behavior` is `'before'` or\n *   `'after'`.\n *   There is no default.\n * @property {Test} [test]\n *   Test to define which heading elements are linked.\n *   Any test that can be given to `hast-util-is-element` is supported.\n *   The default (no test) is to link all headings.\n *   Can be used to link only h1-h3, or for example all except h1.\n */\n\nimport extend from 'extend'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {visit, SKIP} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/**\n * Plugin to automatically add links to headings (h1-h6).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeAutolinkHeadings(options = {}) {\n  let props = options.properties\n  const behavior = options.behaviour || options.behavior || 'prepend'\n  const content = options.content || contentDefaults\n  const group = options.group\n  const is = convertElement(options.test)\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  let method\n\n  if (behavior === 'wrap') {\n    method = wrap\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around\n  } else {\n    if (!props) {\n      props = {ariaHidden: 'true', tabIndex: -1}\n    }\n\n    method = inject\n  }\n\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      if (\n        headingRank(node) &&\n        hasProperty(node, 'id') &&\n        is(node, index, parent)\n      ) {\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function inject(node) {\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, extend(true, {}, props), toChildren(content, node))\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function around(node, index, parent) {\n    // Uncommon.\n    /* c8 ignore next */\n    if (typeof index !== 'number' || !parent) return\n\n    const link = create(\n      node,\n      extend(true, {}, props),\n      toChildren(content, node)\n    )\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function wrap(node) {\n    node.children = [create(node, extend(true, {}, props), node.children)]\n    return [SKIP]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild[]}\n   */\n  function toChildren(value, node) {\n    const result = toNode(value, node)\n    return Array.isArray(result) ? result : [result]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild|ElementChild[]}\n   */\n  function toNode(value, node) {\n    if (typeof value === 'function') return value(node)\n    return extend(true, Array.isArray(value) ? [] : {}, value)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {Properties} props\n   * @param {ElementChild[]} children\n   * @returns {Element}\n   */\n  function create(node, props, children) {\n    return {\n      type: 'element',\n      tagName: 'a',\n      properties: Object.assign({}, props, {\n        // Fix hast types and make them required.\n        /* c8 ignore next */\n        href: '#' + (node.properties || {}).id\n      }),\n      children\n    }\n  }\n}\n","import type { Plugin } from 'unified';\nimport type { Root, RootContent, Literal } from 'hast';\nimport { visit } from 'unist-util-visit';\n\n/**\n * Raw string of HTML embedded into HTML AST.\n */\nexport interface Raw extends Literal {\n  /**\n   * Node type.\n   */\n  type: 'raw'\n}\n\n// Register nodes in content.\ndeclare module 'hast' {\n  interface RootContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n  interface ElementContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n}\n\n\nexport type RehypeIgnoreOptions = {\n  /**\n   *  Character to use for opening delimiter, by default `rehype:ignore:start`\n   */\n  openDelimiter?: string;\n  /**\n   * Character to use for closing delimiter, by default `rehype:ignore:end`\n   */\n  closeDelimiter?: string;\n}\n\nconst rehypeIgnore: Plugin<[RehypeIgnoreOptions?], Root> = (options = {}) => {\n  const { openDelimiter = 'rehype:ignore:start', closeDelimiter = 'rehype:ignore:end' } = options;\n  return (tree) => {\n    visit(tree, (node: Root | RootContent, index, parent) => {\n      if (node.type === 'element' || node.type === 'root') {\n        // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);\n        // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);\n        // if (start > -1 && end > -1) {\n        //   node.children = node.children.filter((_, idx) => idx < start || idx > end);\n        // }\n        let start = false;\n        node.children = node.children.filter((item) => {\n          if (item.type === 'raw' || item.type === 'comment') {\n            let str =  (item.value || '').trim();\n            str = str.replace(/^<!--(.*?)-->/, '$1')\n            if (str === openDelimiter) {\n                start = true;\n                return false;\n            }\n            if (str === closeDelimiter) {\n                start = false;\n                return false;\n            }\n          }\n          \n          return !start;\n        })\n      }\n    });\n  }\n}\n\nexport default rehypeIgnore;\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string} [prefix='']\n *   Prefix to add in front of `id`s.\n */\n\nimport Slugger from 'github-slugger'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {toString} from 'hast-util-to-string'\nimport {visit} from 'unist-util-visit'\n\nconst slugs = new Slugger()\n\n/**\n * Plugin to add `id`s to headings.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeSlug(options = {}) {\n  const prefix = options.prefix || ''\n\n  return (tree) => {\n    slugs.reset()\n\n    visit(tree, 'element', (node) => {\n      if (headingRank(node) && node.properties && !hasProperty(node, 'id')) {\n        node.properties.id = prefix + slugs.slug(toString(node))\n      }\n    })\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                // @ts-expect-error: to do: update `mdast-util-types` to allow explicit `undefined`s.\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","isBuffer","ccount","character","source","String","TypeError","count","index","indexOf","characterEntitiesLegacy","parse","tokens","input","start","end","token","slice","trim","push","stringify","values","settings","concat","_toConsumableArray","join","padRight","padLeft","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","own","hasProperty","node","field","Boolean","isNode","type","properties","undefined","headingRank","tagName","toLowerCase","code","isElement","test","parent","context","check","convertElement","Number","POSITIVE_INFINITY","Error","children","tagNameFactory","anyFactory","castFactory","tests","checks","_len","parameters","_key","_checks$index","apply","this","_len2","_key2","all","one","result","whitespace","thing","replace","htmlVoidElements","inlineCode","_","state","sequence","RegExp","unsafe","pattern","expression","patternCompile","match","atBreak","exec","position","peek","listItem","info","listItemIndent","style","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","size","spread","Math","ceil","tracker","createTracker","move","repeat","shift","exit","enter","indentLines","containerFlow","current","line","blank","association","label","identifier","decodeString","marker","indexStack","results","child","handle","_objectSpread","before","after","bulletLastUsed","between","pop","left","right","containerPhrasing","handlers","charAt","eol","map","_compiled","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","config","positions","infos","sort","numerical","escapeBackslashes","encode","toUpperCase","a","b","whole","track","now","lineShift","column","chunks","split","tail","emptyOptions","includeImageAlt","includeHtml","alt","blankLine","tokenize","effects","ok","nok","factorySpace","markdownLineEnding","partial","max","limit","markdownSpace","prefix","consume","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","regex","fromCharCode","splice","remove","items","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","constructs","existing","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","normalizeIdentifier","resolveAll","events","called","resolve","Schema","_createClass","property","normal","space","_classCallCheck","merge","definitions","assign","create","definition","prop","DefinedInfo","transform","attributes","mustUseProperty","normalize","attribute","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","dashes","kebab","keys","types","_Info","_inherits","_super","_createSuper","_this","mark","_assertThisInitialized","defined","powers","increment","pow","contentDefaults","rehypeAutolinkHeadings","props","behavior","behaviour","group","SKIP","_parent$children","toChildren","nodes","grouping","toNode","tree","visit","_options$openDelimite","openDelimiter","_options$closeDelimit","closeDelimiter","item","str","BananaSlug","occurrences","reset","maintainCase","self","slug","originalSlug","slugs","Slugger","rehypeSlug","www","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","namedCharacterReference","done","punctuationContinuation","punctuation","balance","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","inside","wwwAutolink","previousWww","previous","previousUnbalanced","attempt","httpAutolink","previousHttp","t1","t2","p","s","colon","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","_balanced","_gfmAutolinkLiteralWalkedInto","indent","sliceSerialize","gfmFootnote","_text","_defineProperty","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","labelStart","parser","gfmFootnotes","codePointAt","_bufferIndex","chunk","contentType","replacement","callStart","callData","callEscape","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","gfmTable","flow","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","interrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","prefixed","lazy","disable","_gfmTableDynamicInterruptHack","inHead","inDelimiterRow","inRow","contentStart","contentEnd","cellStart","seenCellInRow","cell","tasklistCheck","_gfmTasklistFirstContentOfListItem","close","spaceThenNonSpace","gfmTaskListItem","findAndReplace","ignored","convert","ignore","pairs","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","lastIndex","matchObject","_nodes","global","escape","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","protocol","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","defaultStringLength","toAlignment","gfmTableFromMarkdown","table","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","lines","delimiterStart","delimiterEnd","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","firstParaghraph","siblings","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","bail","error","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","middlewareIndex","callback","next","fn","output","middleware","wrapped","_len3","_key3","fnExpectsCallback","Promise","then","_len4","_key4","use","middelware","unified","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","_attachers$freezeInde","_toArray","attacher","transformer","addPlugin","addList","addPreset","_value","plugin","plugins","entry","isPlainObj","doc","file","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","runSync","complete","assertDone","process","processSync","destination","asyncName","looksLikeAVFile","VFile","typeFactory","propsFactory","pointStart","point","pointEnd","stringifyPosition","pos","EXIT","reverse","factory","subresult","grandparents","toResult","VFileMessage","_Error","reason","place","message","fatal","ruleId","actual","expected","note","_wrapNativeSuper","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","bufferLike","messages","history","stored","get","set","assertNonEmpty","assertPart","stem","encoding","part","zwitch","invalid","unknown","_fn"],"sourceRoot":""}