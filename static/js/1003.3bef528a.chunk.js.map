{"version":3,"file":"static/js/1003.3bef528a.chunk.js","mappings":"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","sources":["../../node_modules/@lezer/markdown/dist/index.js","../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            // First list item or blank line before: delete a level of markup\n            if (inner.node.firstChild.to >= pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move this line down\n                let insert = \"\";\n                for (let i = 0, e = context.length - 2; i <= e; i++) {\n                    insert += context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);\n                }\n                insert = normalizeIndent(insert, state);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","create","type","value","from","parentHash","end","constructor","hash","children","positions","this","hashProp","NodeProp","contextHash","addChild","child","pos","prop","Tree","length","push","toTree","nodeSet","arguments","undefined","last","Math","max","types","balance","makeTree","NodeType","none","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","finishContext","mark","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","Parser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","tags","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkEmailEnd","lastIndex","GFM","absPos","index","autolinkURLEnd","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","defineLanguageFacet","commentTokens","headingProp","commonmark","foldNodeProp","add","isHeading","state","doc","lineAt","indentNodeProp","languageDataProp","findSectionEnd","headerNode","level","headerIndent","foldService","of","syntaxTree","resolveInner","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","normalizeIndent","facet","indentUnit","countColumn","insertNewlineContinueMarkup","_ref","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","delTo","EditorSelection","lineBreak","prevLine","quoted","continued","charAt","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","_ref2","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","defaultCode","extensions","support","LanguageSupport","language","codeParser","languages","defaultLanguage","info","LanguageDescription","matchLanguageName","ParseContext","getSkippingParser","load","htmlParser","parseMixed","overlay","infoNode","getChild","parseCode","Prec","high","keymap","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource","CompletionContext","EditorState"],"sourceRoot":""}