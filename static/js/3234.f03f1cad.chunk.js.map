{"version":3,"file":"static/js/3234.f03f1cad.chunk.js","mappings":"0PAWMA,GAAcC,EAAAA,EAAAA,IAAiB,kPAS/BC,EAAQC,EAAAA,GAAAA,IAAU,kEAKlBC,EAAYD,EAAAA,GAAAA,MAAY,2DAKxBE,EAAQF,EAAAA,GAAAA,MAAY,2OAcX,SAASG,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAAG,eAAjCC,EAAM,KAAEC,EAAS,KACxB,GAAwBF,EAAAA,EAAAA,YAAoC,eAArDG,EAAI,KAAEC,EAAO,KAkBdC,EAAYC,KAAKC,UAAUJ,GAAQ,CAAC,EAAG,KAAM,GACnD,OACEK,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAAClB,EAAW,KACZe,EAAAA,EAAAA,MAACI,EAAAA,GAAY,CAACC,MAAM,2CAA0CH,SAAAA,EAC5DC,EAAAA,EAAAA,KAACd,EAAS,CAACiB,KAAK,OAAOC,OAAO,iBAAiBC,SAtB/BC,SAAAA,GACpB,IACMC,GADSD,EAAIE,OAA4BC,OAAS,IACrC,GACfF,GACFG,EAAAA,GAAAA,KAAgBH,GAAMI,MAAMC,SAAAA,UAGnBA,EAAgB,UAGnBA,EAAgB,WAAKA,EAAgB,UAAEC,OACzCtB,EAAU,yBAA2BqB,EAAgB,UAAEE,QAEzDrB,EAAQmB,EACV,GAEJ,IAOOtB,IAAUU,EAAAA,EAAAA,KAAChB,EAAK,CAAC+B,IAAKzB,IACtBE,IACCK,EAAAA,EAAAA,MAACV,EAAK,CAAAY,SAAAA,EACJC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,KAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,KAAAA,CAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAAA,KAAAA,CAAAD,SAAI,0BAGRC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,SACGiB,OAAOC,KAAKzB,GAAM0B,KAAI,SAACC,EAASC,GAC/B,OACEvB,EAAAA,EAAAA,MAAAA,KAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,KAAAA,CAAAD,SAAKoB,KACLnB,EAAAA,EAAAA,KAAAA,KAAAA,CAAAD,SAAKP,EAAK2B,GAASE,gBAFZD,EAKb,YAKP5B,IACCQ,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACC,MAAM,SAASoB,MAAO9B,IAAQQ,EAAAA,EAAAA,KAACuB,EAAAA,GAAU,CAACC,MAAO9B,IAAcK,UAC3EC,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAACC,WAAY,EAACC,EAAAA,EAAAA,SAAaC,UAAQ,EAACJ,MAAO9B,QAKhE,C","sources":["../../packages/exif-viewer/src/index.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, CodeEditor } from '@wcj/tools-react-components';\nimport { json as jsonLang } from '@codemirror/lang-json';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport ExifReader, { Tags, XmpTags, IccTags } from 'exifreader';\n\nexport interface ResultProps {\n  title?: string;\n  className?: string;\n}\n\nconst GlobalStyle = createGlobalStyle`\n  [data-color-mode*='dark'], [data-color-mode*='dark'] body {\n    --color-border-text-case: #30363d;\n  }\n  [data-color-mode*='light'], [data-color-mode*='light'] body {\n    --color-border-text-case: #d0d7de;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  padding-top: 16px;\n`;\n\nconst InputFile = styled.input`\n  width: 100%;\n  display: block;\n`;\n\nconst Table = styled.table`\n  margin-top: 18px;\n  border-spacing: 0;\n  border-collapse: collapse;\n  td,\n  th {\n    border: 1px solid var(--color-border-default);\n    padding: 5px 8px;\n  }\n  tbody th {\n    text-align: right;\n  }\n`;\n\nexport default function ExifViewer() {\n  const [result, setResult] = useState('');\n  const [tags, setTags] = useState<Tags & XmpTags & IccTags>();\n  const handleChange = (evn: React.ChangeEvent<HTMLInputElement>) => {\n    const files = (evn.target as HTMLInputElement).files || [];\n    const file = files[0];\n    if (file) {\n      ExifReader.load(file).then((data) => {\n        // The MakerNote tag can be really large. Remove it to lower\n        // memory usage if you're parsing a lot of files and saving the tags.\n        delete data['MakerNote'];\n        // If you want to extract the thumbnail you can use it like\n        // this:\n        if (data['Thumbnail'] && data['Thumbnail'].image) {\n          setResult('data:image/jpg;base64,' + data['Thumbnail'].base64);\n        }\n        setTags(data);\n      });\n    }\n  };\n  const tagsToStr = JSON.stringify(tags || {}, null, 2);\n  return (\n    <Wrapper>\n      <GlobalStyle />\n      <StyledLayout title=\"Choose an image file from your computer:\">\n        <InputFile type=\"file\" accept=\"image/*, .heic\" onChange={handleChange} />\n        {result && <Image src={result} />}\n        {tags && (\n          <Table>\n            <thead>\n              <tr>\n                <th>Tag name</th>\n                <th>Tag description</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(tags).map((keyname, key) => {\n                return (\n                  <tr key={key}>\n                    <th>{keyname}</th>\n                    <td>{tags[keyname].description}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        )}\n      </StyledLayout>\n      {tags && (\n        <StyledLayout title=\"Result\" extra={tags && <CopyButton value={tagsToStr} />}>\n          <CodeEditor extensions={[jsonLang()]} readOnly value={tagsToStr} />\n        </StyledLayout>\n      )}\n    </Wrapper>\n  );\n}\n"],"names":["GlobalStyle","createGlobalStyle","Image","styled","InputFile","Table","ExifViewer","useState","result","setResult","tags","setTags","tagsToStr","JSON","stringify","_jsxs","Wrapper","children","_jsx","StyledLayout","title","type","accept","onChange","evn","file","target","files","ExifReader","then","data","image","base64","src","Object","keys","map","keyname","key","description","extra","CopyButton","value","CodeEditor","extensions","jsonLang","readOnly"],"sourceRoot":""}