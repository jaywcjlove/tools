{"version":3,"file":"static/js/4974.687894e6.chunk.js","mappings":"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","sources":["../../node_modules/@wcj/generate-password/src/index.ts","../../packages/generate-password/src/utils.ts","../../packages/generate-password/src/index.tsx"],"sourcesContent":["export const LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\nexport const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nexport const NUMERIC = '0123456789';\nexport const SPECIAL_CHARACTER = '!@#$%^&*()_+~`|}{\\\\[\\\\]:;?>,.<-=\\\\/';\n\nexport type Option = {\n  /**\n   * Integer, length of password.\n   * @default 10\n   */\n  length?: number;\n  /** Boolean, put lowercase in password */\n  lowerCase?: boolean;\n  /** Boolean, use uppercase letters in password. */\n  upperCase?: boolean;\n  /** Boolean, put numbers in password. */\n  numeric?: boolean;\n  /** Special characters */\n  special?: boolean;\n};\n\n/** Create a random password */\nexport function generate(opts: Option = {}) {\n  const { lowerCase = true, upperCase = true, numeric = true, special = true, length = 10 } = opts;\n  let password = '';\n  if (!lowerCase && !upperCase && !numeric && !special) {\n    return password;\n  }\n  while (password.length < length) {\n    const entity1 = Math.ceil(LOWERCASE.length * Math.random() * Math.random()) - 1;\n    const entity2 = Math.ceil(NUMERIC.length * Math.random() * Math.random()) - 1;\n    const entity3 = Math.ceil(SPECIAL_CHARACTER.length * Math.random() * Math.random()) - 1;\n    const entity4 = Math.ceil(UPPERCASE.length * Math.random() * Math.random()) - 1;\n    if (lowerCase && password.length < length) {\n      password += LOWERCASE.charAt(entity1);\n    }\n    if (upperCase && password.length < length) {\n      password += UPPERCASE.charAt(entity4);\n    }\n    if (numeric && password.length < length) {\n      password += NUMERIC.charAt(entity2);\n    }\n    if (special && password.length < length) {\n      password += SPECIAL_CHARACTER.charAt(entity3);\n    }\n  }\n  return password.trim();\n}\n\n/** Create a random set of passwords */\nexport function generateMultiple(length: number = 10, opts?: Option) {\n  const result: string[] = [];\n  for (let i = 0; i < length; i++) {\n    result.push(generate(opts));\n  }\n  return result;\n}\n\n/**\n * symbols pass with lowercase and uppercase letters, numbers and special characters\n * @return [0~4]\n *\n * `4` Strong :) Now it's safe!\n * `3` Medium level. Enter more symbols!\n * `2` Very Weak! It's easy to crack!\n * `1` It's easy to crack!\n */\nexport function validate(password: string = '') {\n  // Create an array and push all possible values that you want in password\n  const matchedCase = new Array();\n  matchedCase.push(`[${SPECIAL_CHARACTER}]`); // Special Charector\n  matchedCase.push('[A-Z]'); // Uppercase Alpabates\n  matchedCase.push('[0-9]'); // Numbers\n  matchedCase.push('[a-z]'); // Lowercase Alphabates\n  // Check the conditions\n  let ctr = 0;\n  for (let i = 0; i < matchedCase.length; i++) {\n    if (new RegExp(matchedCase[i]).test(password)) {\n      ctr++;\n    }\n  }\n  return ctr;\n}\n","import { validate } from '@wcj/generate-password';\n\nexport function validatePassword(password: string) {\n  let ctr = validate(password);\n  // Display it\n  let color = '';\n  let strength = '';\n  switch (ctr) {\n    case 0:\n    case 1:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = \"It's easy to crack!\";\n      color = 'gray';\n      break;\n    case 2:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = \"Very Weak! It's easy to crack!\";\n      color = 'red';\n      break;\n    case 3:\n      // Suggestion: use minimum 32 symbols pass with lowercase and uppercase letters, numbers and special characters\n      strength = 'Medium level. Enter more symbols!';\n      color = 'orange';\n      break;\n    case 4:\n      strength = \"Strong :) Now it's safe!\";\n      color = 'green';\n      break;\n  }\n  return {\n    strength,\n    color,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Wrapper, StyledLayout, CodeLineCopy, Button, Spacing } from '@wcj/tools-react-components';\nimport styled from 'styled-components';\nimport { validatePassword } from './utils';\nimport { generate } from '@wcj/generate-password';\n\nconst Input = styled.input`\n  border-radius: 6px;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  user-select: none;\n  gap: 10px;\n`;\n\nexport interface InputRangeProps\n  extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n  ref?: any;\n  range?: number;\n  extra?: React.ReactNode;\n}\n\nconst InputRange: React.FC<React.PropsWithChildren<InputRangeProps>> = (props) => {\n  return (\n    <Label>\n      <Input type=\"range\" min={8} max={50} style={{ flex: 1 }} {...props} value={props.range} />\n      <span>{props.range}</span>\n      {props.extra}\n    </Label>\n  );\n};\n\nconst PasswordInfo = styled.span`\n  border-radius: 3px;\n  color: #fff;\n  font-size: 12px;\n  margin-right: 5px;\n  margin-left: 6px;\n  width: 12px;\n  height: 12px;\n  display: inline-block;\n`;\n\nexport default function GeneratePassword() {\n  const [range, setRange] = useState<number>(12);\n  const [lowerCase, setLowerCase] = useState<boolean>(true);\n  const [history, setHistory] = useState<string[]>([]);\n  const [upperCase, setUpperCase] = useState<boolean>(true);\n  const [numeric, setNumeric] = useState<boolean>(true);\n  const [special, setSpecial] = useState<boolean>(true);\n  const addHistory = (str: string) => {\n    const data = [...history];\n    data.unshift(str);\n    setHistory(data.slice(0, 20));\n  };\n  useEffect(() => {\n    const password = generate({ length: range, lowerCase, upperCase, numeric, special });\n    addHistory(password);\n  }, [range, lowerCase, upperCase, numeric, special]);\n\n  useEffect(() => {\n    const data = [...history];\n    [...Array(5)].map(() => {\n      const password = generate({ length: range, lowerCase, upperCase, numeric, special });\n      data.unshift(password);\n    });\n    setHistory(data.slice(0, 20));\n  }, []);\n\n  return (\n    <Wrapper>\n      <StyledLayout overflow=\"initial\" title=\"Generate Password - Setting\">\n        <InputRange\n          style={{ maxWidth: 630 }}\n          range={range}\n          value={range}\n          onChange={(evn) => setRange(Number((evn.target as HTMLInputElement).value))}\n          extra={\n            <select value={range} onChange={(evn) => setRange(Number(evn.target.value))}>\n              {[...Array(43)].map((_, idx) => (\n                <option value={idx + 8} key={idx}>\n                  {idx + 8}\n                </option>\n              ))}\n            </select>\n          }\n        />\n        <Spacing style={{ paddingTop: 10 }}>\n          <Label>\n            <Input type=\"checkbox\" checked={lowerCase} onChange={(evn) => setLowerCase(evn.target.checked)} />\n            Lower Case Letter(a..z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={upperCase} onChange={(evn) => setUpperCase(evn.target.checked)} />\n            Upper Case Letter(A..Z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={numeric} onChange={(evn) => setNumeric(evn.target.checked)} />\n            Number (0..9)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={special} onChange={(evn) => setSpecial(evn.target.checked)} />\n            Special characters\n          </Label>\n        </Spacing>\n        <Button\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            addHistory(generate({ length: range, lowerCase, upperCase, numeric, special }));\n          }}\n        >\n          Generate Password\n        </Button>\n        <Spacing direction=\"row\" items=\"center\" gutter={0.1} style={{ marginTop: 10 }}>\n          <PasswordInfo style={{ backgroundColor: 'gray' }} /> <span>It's easy to crack!</span>\n          <PasswordInfo style={{ backgroundColor: 'red' }} /> <span>Very Weak! It's easy to crack!</span>\n          <PasswordInfo style={{ backgroundColor: 'orange' }} /> <span>Medium level. Enter more symbols!</span>\n          <PasswordInfo style={{ backgroundColor: 'green' }} /> <span>Strong :) Now it's safe!</span>\n        </Spacing>\n        <Spacing style={{ paddingTop: 10 }}>\n          {history.map((password, key) => {\n            const valida = validatePassword(password);\n            return (\n              <CodeLineCopy copyText={password} label={`${key + 1}`} key={key}>\n                <PasswordInfo style={{ backgroundColor: valida.color }}></PasswordInfo> {password}\n              </CodeLineCopy>\n            );\n          })}\n        </Spacing>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["LOWERCASE","UPPERCASE","NUMERIC","SPECIAL_CHARACTER","generate","opts","lowerCase","_a","_b","upperCase","_c","numeric","_d","special","_e","length","password","entity1","Math","ceil","random","entity2","entity3","entity4","charAt","trim","validatePassword","ctr","matchedCase","Array","push","i","RegExp","test","validate","color","strength","Input","styled","_templateObject","Label","_templateObject2","InputRange","props","_jsxs","children","_jsx","type","min","max","style","flex","value","range","extra","PasswordInfo","_templateObject3","GeneratePassword","useState","setRange","setLowerCase","history","setHistory","setUpperCase","setNumeric","setSpecial","addHistory","str","data","unshift","slice","useEffect","map","Wrapper","StyledLayout","overflow","title","maxWidth","onChange","evn","Number","target","_","idx","Spacing","paddingTop","checked","Button","marginTop","onClick","direction","items","gutter","backgroundColor","key","valida","CodeLineCopy","copyText","label"],"sourceRoot":""}