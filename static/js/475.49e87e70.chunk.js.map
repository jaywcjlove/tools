{"version":3,"file":"static/js/475.49e87e70.chunk.js","mappings":"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","sources":["../../node_modules/extend/index.js","../../node_modules/unified/node_modules/is-buffer/index.js","../../node_modules/vfile/node_modules/is-buffer/index.js","../../node_modules/ccount/index.js","../../node_modules/character-entities-legacy/index.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/hast-util-has-property/lib/index.js","../../node_modules/hast-util-heading-rank/lib/index.js","../../node_modules/hast-util-is-element/index.js","../../node_modules/hast-util-to-string/index.js","../../node_modules/hast-util-whitespace/index.js","../../node_modules/html-void-elements/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/util/association.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/util/safe.js","../../node_modules/mdast-util-to-markdown/lib/util/track.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/index.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/rehype-autolink-headings/lib/index.js","../../node_modules/rehype-ignore/src/index.ts","../../node_modules/github-slugger/regex.js","../../node_modules/github-slugger/index.js","../../node_modules/rehype-slug/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/remark-gfm/index.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/bail/index.js","../../node_modules/unified/node_modules/is-plain-obj/index.js","../../node_modules/trough/index.js","../../node_modules/unified/lib/index.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/zwitch/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Check if `node`is an element and has a `field` property.\n *\n * @param {unknown} node\n *   Thing to check (typically `Element`).\n * @param {unknown} field\n *   Field name to check (typically `string`).\n * @returns {boolean}\n *   Whether `node` is an element that has a `field` property.\n */\nexport function hasProperty(node, field) {\n  const value =\n    typeof field === 'string' &&\n    isNode(node) &&\n    node.type === 'element' &&\n    node.properties &&\n    own.call(node.properties, field) &&\n    node.properties[field]\n\n  return value !== null && value !== undefined && value !== false\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n  return Boolean(value && typeof value === 'object' && 'type' in value)\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\n// To do next major: return `undefined`.\n/**\n * Get the rank (`1` to `6`) of headings (`h1` to `h6`).\n *\n * @param {Node} node\n *   Node to check.\n * @returns {number | null}\n *   Rank of the heading or `null` if not a heading.\n */\nexport function headingRank(node) {\n  const name =\n    (node && node.type === 'element' && node.tagName.toLowerCase()) || ''\n  const code =\n    name.length === 2 && name.charCodeAt(0) === 104 /* `h` */\n      ? name.charCodeAt(1)\n      : 0\n  return code > 48 /* `0` */ && code < 55 /* `7` */ ? code - 48 /* `0` */ : null\n}\n","/**\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test\n *   Check for an arbitrary element, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if an element passes a test, unaware of TypeScript inferral.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {boolean | void}\n *   Whether this element passes the test.\n */\n\n/**\n * @template {Element} T\n *   Element type.\n * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest\n *   Check for an element that can be inferred by TypeScript.\n */\n\n/**\n * Check if an element passes a certain node test.\n *\n * @template {Element} T\n *   Element type.\n * @callback TestFunctionPredicate\n *   Complex test function for an element that can be inferred by TypeScript.\n * @param {Element} element\n *   An element.\n * @param {number | null | undefined} [index]\n *   The element’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The element’s parent.\n * @returns {element is T}\n *   Whether this element passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is an element, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} T\n *   Element type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific element, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is T}\n *   Whether this is an element and passes a test.\n */\n\n/**\n * Check if `node` is an `Element` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific element.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is an element and passes a test.\n */\nexport const isElement =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *  When nullish, checks if `node` is an `Element`.\n *   *  When `string`, works like passing `(element) => element.tagName === test`.\n *   *  When `function` checks if function passed the element is true.\n *   *  When `array`, checks any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<string | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain tag name.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'isindex',\n  'keygen',\n  'link',\n  'menuitem',\n  'meta',\n  'nextid',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast-util-is-element').Test} Test\n *\n * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior\n *\n * @callback Build\n * @param {Element} node\n * @returns {ElementChild|ElementChild[]}\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior} [behavior='prepend']\n *   How to create links.\n * @property {Behavior} [behaviour]\n *   Please use `behavior` instead\n * @property {Properties} [properties]\n *   Extra properties to set on the link when injecting.\n *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or\n *   `'append'`.\n * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]\n *   hast nodes to insert in the link.\n * @property {ElementChild|ElementChild[]|Build} [group]\n *   hast node to wrap the heading and link with, if `behavior` is `'before'` or\n *   `'after'`.\n *   There is no default.\n * @property {Test} [test]\n *   Test to define which heading elements are linked.\n *   Any test that can be given to `hast-util-is-element` is supported.\n *   The default (no test) is to link all headings.\n *   Can be used to link only h1-h3, or for example all except h1.\n */\n\nimport extend from 'extend'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {visit, SKIP} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/**\n * Plugin to automatically add links to headings (h1-h6).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeAutolinkHeadings(options = {}) {\n  let props = options.properties\n  const behavior = options.behaviour || options.behavior || 'prepend'\n  const content = options.content || contentDefaults\n  const group = options.group\n  const is = convertElement(options.test)\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  let method\n\n  if (behavior === 'wrap') {\n    method = wrap\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around\n  } else {\n    if (!props) {\n      props = {ariaHidden: 'true', tabIndex: -1}\n    }\n\n    method = inject\n  }\n\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      if (\n        headingRank(node) &&\n        hasProperty(node, 'id') &&\n        is(node, index, parent)\n      ) {\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function inject(node) {\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, extend(true, {}, props), toChildren(content, node))\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function around(node, index, parent) {\n    // Uncommon.\n    /* c8 ignore next */\n    if (typeof index !== 'number' || !parent) return\n\n    const link = create(\n      node,\n      extend(true, {}, props),\n      toChildren(content, node)\n    )\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function wrap(node) {\n    node.children = [create(node, extend(true, {}, props), node.children)]\n    return [SKIP]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild[]}\n   */\n  function toChildren(value, node) {\n    const result = toNode(value, node)\n    return Array.isArray(result) ? result : [result]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild|ElementChild[]}\n   */\n  function toNode(value, node) {\n    if (typeof value === 'function') return value(node)\n    return extend(true, Array.isArray(value) ? [] : {}, value)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {Properties} props\n   * @param {ElementChild[]} children\n   * @returns {Element}\n   */\n  function create(node, props, children) {\n    return {\n      type: 'element',\n      tagName: 'a',\n      properties: Object.assign({}, props, {\n        // Fix hast types and make them required.\n        /* c8 ignore next */\n        href: '#' + (node.properties || {}).id\n      }),\n      children\n    }\n  }\n}\n","import type { Plugin } from 'unified';\nimport type { Root, RootContent, Literal } from 'hast';\nimport { visit } from 'unist-util-visit';\n\n/**\n * Raw string of HTML embedded into HTML AST.\n */\nexport interface Raw extends Literal {\n  /**\n   * Node type.\n   */\n  type: 'raw'\n}\n\n// Register nodes in content.\ndeclare module 'hast' {\n  interface RootContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n  interface ElementContentMap {\n    /**\n     * Raw string of HTML embedded into HTML AST.\n     */\n    raw: Raw\n  }\n}\n\n\nexport type RehypeIgnoreOptions = {\n  /**\n   *  Character to use for opening delimiter, by default `rehype:ignore:start`\n   */\n  openDelimiter?: string;\n  /**\n   * Character to use for closing delimiter, by default `rehype:ignore:end`\n   */\n  closeDelimiter?: string;\n}\n\nconst rehypeIgnore: Plugin<[RehypeIgnoreOptions?], Root> = (options = {}) => {\n  const { openDelimiter = 'rehype:ignore:start', closeDelimiter = 'rehype:ignore:end' } = options;\n  return (tree) => {\n    visit(tree, (node: Root | RootContent, index, parent) => {\n      if (node.type === 'element' || node.type === 'root') {\n        // const start = node.children.findIndex((item) => item.type === 'comment' && item.value === openDelimiter);\n        // const end = node.children.findIndex((item) => item.type === 'comment' && item.value === closeDelimiter);\n        // if (start > -1 && end > -1) {\n        //   node.children = node.children.filter((_, idx) => idx < start || idx > end);\n        // }\n        let start = false;\n        node.children = node.children.filter((item) => {\n          if (item.type === 'raw' || item.type === 'comment') {\n            let str =  (item.value || '').trim();\n            str = str.replace(/^<!--(.*?)-->/, '$1')\n            if (str === openDelimiter) {\n                start = true;\n                return false;\n            }\n            if (str === closeDelimiter) {\n                start = false;\n                return false;\n            }\n          }\n          \n          return !start;\n        })\n      }\n    });\n  }\n}\n\nexport default rehypeIgnore;\n","// This module is generated by `script/`.\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\n","import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n","/**\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string} [prefix='']\n *   Prefix to add in front of `id`s.\n */\n\nimport Slugger from 'github-slugger'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {toString} from 'hast-util-to-string'\nimport {visit} from 'unist-util-visit'\n\nconst slugs = new Slugger()\n\n/**\n * Plugin to add `id`s to headings.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeSlug(options = {}) {\n  const prefix = options.prefix || ''\n\n  return (tree) => {\n    slugs.reset()\n\n    visit(tree, 'element', (node) => {\n      if (headingRank(node) && node.properties && !hasProperty(node, 'id')) {\n        node.properties.id = prefix + slugs.slug(toString(node))\n      }\n    })\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","isBuffer","ccount","character","source","String","TypeError","count","index","indexOf","characterEntitiesLegacy","parse","tokens","input","start","end","token","slice","trim","push","stringify","values","settings","join","padRight","padLeft","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","own","hasProperty","node","field","Boolean","isNode","type","properties","undefined","headingRank","tagName","toLowerCase","code","isElement","test","parent","context","check","convertElement","Number","POSITIVE_INFINITY","Error","children","tagNameFactory","tests","checks","castFactory","any","_len","parameters","_key","this","anyFactory","_len2","_key2","all","one","result","whitespace","thing","replace","htmlVoidElements","inlineCode","_","state","sequence","RegExp","unsafe","pattern","expression","patternCompile","match","atBreak","exec","position","peek","listItem","info","listItemIndent","style","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","size","spread","Math","ceil","tracker","createTracker","move","repeat","shift","exit","enter","indentLines","containerFlow","current","line","blank","association","label","identifier","decodeString","marker","indexStack","results","child","handle","before","after","bulletLastUsed","between","pop","left","right","containerPhrasing","handlers","charAt","eol","map","_compiled","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","config","positions","infos","sort","numerical","escapeBackslashes","encode","toUpperCase","a","b","whole","track","now","lineShift","column","chunks","split","tail","emptyOptions","includeImageAlt","includeHtml","alt","blankLine","tokenize","effects","ok","nok","markdownSpace","factorySpace","markdownLineEnding","partial","max","limit","prefix","consume","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","splice","remove","items","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","constructs","existing","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","normalizeIdentifier","resolveAll","events","called","resolve","Schema","property","normal","space","merge","definitions","assign","create","definition","prop","DefinedInfo","transform","attributes","mustUseProperty","normalize","attribute","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","default","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","dashes","kebab","keys","types","super","mark","defined","powers","increment","contentDefaults","rehypeAutolinkHeadings","props","behavior","behaviour","group","SKIP","toChildren","nodes","grouping","toNode","tree","visit","openDelimiter","closeDelimiter","item","str","slugs","occurrences","reset","slug","maintainCase","self","originalSlug","rehypeSlug","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","trail","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previous","previousUnbalanced","attempt","wwwAfter","protocolAutolink","buffer","previousProtocol","fromCodePoint","protocolPrefixInside","protocol","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","gfmAutolinkLiteral","_balanced","_gfmAutolinkLiteralWalkedInto","indent","sliceSerialize","tokenizePotentialGfmFootnoteCall","parser","gfmFootnotes","labelStart","codePointAt","resolveToPotentialGfmFootnoteCall","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","editMap","at","addImpl","vecs","gfmTableAlign","inDelimiterRow","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","findAndReplace","ignored","convert","ignore","pairs","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","lastIndex","matchObject","global","escape","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","parts","isCorrectDomain","trailExec","closingParenIndex","openingParens","closingParens","splitUrl","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","defaultStringLength","toAlignment","gfmTableFromMarkdown","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","lines","delimiterStart","delimiterEnd","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","bail","error","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","middlewareIndex","callback","fn","output","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","Promise","then","_len4","_key4","use","middelware","unified","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","addPlugin","addList","addPreset","plugin","plugins","entry","isPlainObj","doc","file","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","runSync","complete","assertDone","process","processSync","destination","asyncName","looksLikeAVFile","VFile","typeFactory","propsFactory","pointStart","point","pointEnd","stringifyPosition","pos","EXIT","reverse","factory","subresult","grandparents","toResult","VFileMessage","reason","place","message","fatal","ruleId","actual","expected","note","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","sep","JSON","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","bufferLike","messages","history","stored","assertNonEmpty","assertPart","stem","encoding","fail","part","zwitch","invalid","unknown"],"sourceRoot":""}