{"version":3,"file":"static/js/6053.3a297805.chunk.js","mappings":"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","sources":["../../node_modules/remark-parse/node_modules/mdast-util-to-string/lib/index.js","../../node_modules/remark-parse/node_modules/micromark-util-chunked/index.js","../../node_modules/remark-parse/node_modules/micromark-util-combine-extensions/index.js","../../node_modules/remark-parse/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/remark-parse/node_modules/micromark-util-character/index.js","../../node_modules/remark-parse/node_modules/micromark-factory-space/index.js","../../node_modules/remark-parse/node_modules/micromark/lib/initialize/content.js","../../node_modules/remark-parse/node_modules/micromark/lib/initialize/document.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/remark-parse/node_modules/micromark-util-subtokenize/index.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/remark-parse/node_modules/micromark/lib/initialize/flow.js","../../node_modules/remark-parse/node_modules/micromark/lib/initialize/text.js","../../node_modules/remark-parse/node_modules/micromark-util-resolve-all/index.js","../../node_modules/remark-parse/node_modules/micromark/lib/create-tokenizer.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/remark-parse/node_modules/micromark-factory-destination/index.js","../../node_modules/remark-parse/node_modules/micromark-factory-label/index.js","../../node_modules/remark-parse/node_modules/micromark-factory-title/index.js","../../node_modules/remark-parse/node_modules/micromark-factory-whitespace/index.js","../../node_modules/remark-parse/node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/remark-parse/node_modules/micromark-util-html-tag-name/index.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/remark-parse/node_modules/micromark-util-classify-character/index.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/remark-parse/node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/remark-parse/node_modules/micromark/lib/constructs.js","../../node_modules/remark-parse/node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/node_modules/micromark/lib/preprocess.js","../../node_modules/remark-parse/node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/remark-parse/node_modules/micromark-util-decode-string/index.js","../../node_modules/remark-parse/node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/remark-parse/node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/remark-parse/node_modules/micromark/lib/postprocess.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/remark-rehype/node_modules/micromark-util-character/index.js","../../node_modules/remark-rehype/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/remark-rehype/node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","../../node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","../../node_modules/mdast-util-definitions/node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-definitions/lib/index.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/unist-util-generated/lib/index.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/stringify-entities/lib/core.js","../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","../../node_modules/stringify-entities/lib/util/to-decimal.js","../../node_modules/character-entities-html4/index.js","../../node_modules/stringify-entities/lib/constant/dangerous.js","../../node_modules/stringify-entities/lib/util/to-named.js","../../node_modules/stringify-entities/lib/util/format-smart.js","../../node_modules/stringify-entities/lib/index.js","../../node_modules/trim-lines/index.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/schema.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/merge.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/normalize.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/info.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/types.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/defined-info.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/create.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/xlink.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/xml.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/xmlns.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/aria.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/html.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/svg.js","../../node_modules/hast-util-to-html/node_modules/property-information/index.js","../../node_modules/hast-util-to-html/node_modules/property-information/lib/find.js","../../node_modules/hast-util-to-html/node_modules/hast-util-whitespace/index.js","../../node_modules/hast-util-to-html/lib/omission/util/siblings.js","../../node_modules/hast-util-to-html/lib/omission/omission.js","../../node_modules/hast-util-to-html/lib/omission/closing.js","../../node_modules/hast-util-to-html/lib/omission/opening.js","../../node_modules/hast-util-to-html/lib/handle/element.js","../../node_modules/hast-util-to-html/lib/handle/text.js","../../node_modules/hast-util-to-html/lib/handle/index.js","../../node_modules/hast-util-to-html/lib/handle/comment.js","../../node_modules/hast-util-to-html/lib/handle/doctype.js","../../node_modules/hast-util-to-html/lib/handle/raw.js","../../node_modules/hast-util-to-html/lib/handle/root.js","../../node_modules/hast-util-to-html/lib/index.js","../../node_modules/rehype-stringify/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","const hexadecimalRegex = /[\\dA-Fa-f]/\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","const decimalRegex = /\\d/\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !decimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\nconst notAlphanumericRegex = /[^\\dA-Za-z]/\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          notAlphanumericRegex.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('../../types.js').Parent} Parent\n * @typedef {import('../../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @param {Parent | null | undefined} parent\n   * @param {number | null | undefined} index\n   * @param {boolean | null | undefined} [includeWhitespace=false]\n   * @returns {Content}\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : []\n    let offset = (index || 0) + increment\n    let next = siblings && siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    return next\n  }\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  html,\n  head: headOrColgroupOrCaption,\n  body,\n  p,\n  li,\n  dt,\n  dd,\n  rt: rubyElement,\n  rp: rubyElement,\n  optgroup,\n  option,\n  menuitem,\n  colgroup: headOrColgroupOrCaption,\n  caption: headOrColgroupOrCaption,\n  thead,\n  tbody,\n  tfoot,\n  tr,\n  td: cells,\n  th: cells\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\n// eslint-disable-next-line complexity\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</menuitem>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction menuitem(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'menuitem' ||\n        next.tagName === 'hr' ||\n        next.tagName === 'menu'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array<string>} */\n  const seen = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'col'\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'tr'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {opening} from '../omission/opening.js'\nimport {closing} from '../omission/closing.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: constants.unquoted[x][y],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @typedef {import('../types.js').Comment} Comment\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').DocType} DocType\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {DocType} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @typedef {import('../types.js').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {handle} from './handle/index.js'\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nexport function toHtml(tree, options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>}\n */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n"],"names":["emptyOptions","one","value","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","hasOwnProperty","syntaxExtension","extension","hook","left","call","undefined","right","code","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","this","parser","contentInitial","lineStart","previous","token","contentType","next","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","includes","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","decodeNamedCharacterReference","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","parse","options","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","settings","toString","lang","title","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","remarkParse","Parser","doc","normalizeUri","skip","encodeURIComponent","pointStart","pointEnd","definitions","cache","visitor","reverse","visitParents","parents","parent","indexOf","visit","id","clean","footnoteReference","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","handlers","blockquote","wrap","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","trimLines","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","augment","hName","hProperties","hChildren","ctx","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","JSON","stringify","footer","destination","file","run","error","bridge","mutate","defaultSubsetRegex","surrogatePairsRegex","controlCharactersRegex","regexEscapeRegex","subsetToRegexCache","WeakMap","core","subset","cached","get","groups","RegExp","charactersToExpression","set","charactersToExpressionCached","basic","escapeOnly","pair","format","character","hexadecimalRegex","decimalRegex","characterEntitiesHtml4","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","rang","loz","spades","clubs","hearts","diams","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","characters","notAlphanumericRegex","formatSmart","named","omit","toHexadecimal","omitOptionalSemicolons","useNamedReferences","useShortestReferences","attribute","characterEntitiesLegacy","toNamed","decimal","toDecimal","stringifyEntities","tab","space","source","last","lines","trimLine","codePointAt","Schema","constructor","property","normal","merge","normalize","prototype","Info","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","style","tabIndex","target","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","kebab","camelcase","charAt","whitespace","thing","siblingAfter","siblingBefore","includeWhitespace","omission","closing","headOrColgroupOrCaption","p","li","dt","dd","rt","rubyElement","rp","optgroup","option","menuitem","colgroup","caption","thead","tbody","tfoot","tr","td","th","opening","constants","split","unquoted","single","double","serializeAttribute","schema","Type","rest","dashes","find","allowParseErrors","allowDangerousCharacters","quote","isNaN","characterReferences","commas","spaces","padLeft","tightCommaSeparatedLists","collapseEmptyAttributes","preferUnquoted","quoteSmart","ccount","alternative","handle","zwitch","invalid","unknown","_1","_2","bogusComments","doctype","_3","upperDoctype","tightDoctype","element","omitOptionalTags","selfClosing","closeEmptyElements","voids","parts","attrs","tightAttributes","serializeAttributes","closeSelfClosing","tightSelfClosing","rehypeStringify","processorSettings","Compiler","options_","htmlVoidElements","entities","toHtml"],"sourceRoot":""}