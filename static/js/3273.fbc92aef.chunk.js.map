{"version":3,"file":"static/js/3273.fbc92aef.chunk.js","mappings":"ygBAAaA,EAAc,SAACC,GAAqB,WAAV,IAAXA,IAAAA,EAAc,IACxC,IAAMC,GAE0E,OAD9E,EAAAD,EACGE,MAAM,4EAAqE,EAD9EC,EAEIC,KAAKC,SAAAA,GAAC,OAAKA,EAAEC,MAAM,EAAG,GAAGC,cAAgBF,EAAEC,MAAM,GAAGE,aAAa,IAClEC,KAAK,MAAO,GACjB,OAAOR,EAAEK,MAAM,EAAG,GAAGE,cAAgBP,EAAEK,MAAM,EAC/C,EAEaI,EAAc,SAACV,GAAW,MAAK,YAAL,IAAXA,IAAAA,EAAc,IAEsC,OAFpC,EAC1CA,EACGE,MAAM,4EAAqE,EAD9ES,EAEIP,KAAKC,SAAAA,GAAC,OAAKA,EAAEG,aAAa,IAC3BC,KAAK,IAAI,EAEDG,EAAc,SAACZ,GAAW,MAAK,YAAL,IAAXA,IAAAA,EAAc,IAEsC,OAFpC,EAC1CA,EACGE,MAAM,4EAAqE,EAD9EW,EAEIT,KAAKC,SAAAA,GAAC,OAAKA,EAAEG,aAAa,IAC3BC,KAAK,IAAI,EAEDK,EAAc,SAACd,GAAW,MAAK,YAAL,IAAXA,IAAAA,EAAc,IAEsC,OAFpC,EAC1CA,EACGE,MAAM,4EAAqE,EAD9Ea,EAEIX,KAAKC,SAAAA,GAAC,OAAKA,EAAEW,OAAO,GAAGT,cAAgBF,EAAEC,MAAM,EAAE,IAClDG,KAAK,IAAI,EAEDQ,EAAe,SAACjB,GAAW,MAAK,YAAL,IAAXA,IAAAA,EAAc,IAEqC,OAFnC,EAC3CA,EACGE,MAAM,4EAAqE,EAD9EgB,EAEId,KAAKC,SAAAA,GAAC,OAAKA,EAAEW,OAAO,GAAGT,cAAgBF,EAAEC,MAAM,GAAGE,aAAa,IAChEC,KAAK,GAAG,EAEAU,EAAW,SAACnB,GAAgB,YAAL,IAAXA,IAAAA,EAAc,KACrC,OAAIA,GAAKI,KAAKgB,SAAAA,GAAC,OAAMA,IAAMA,EAAEZ,cAAgBY,EAAEb,cAAgBa,EAAEZ,aAAc,IAAEC,KAAK,GAAG,EAE9EY,EAAa,SAACrB,GAAgB,YAAL,IAAXA,IAAAA,EAAc,IAAOA,EAAIsB,QAAQ,MAAO,IAAI,EAE1Df,EAAc,SAACP,GAAgB,YAAL,IAAXA,IAAAA,EAAc,IAAOA,EAAIuB,mBAAmB,EAC3Df,EAAc,SAACR,GAAgB,YAAL,IAAXA,IAAAA,EAAc,IAAOA,EAAIwB,mBAAmB,EAC3DC,EAAY,SAACzB,GAAgB,YAAL,IAAXA,IAAAA,EAAc,IAAOA,EAAIsB,QAAQ,mBAAoB,IAAI,E,WCrBnF,SAASI,EAAOC,EAA2CC,GACzD,YADsE,IAAbA,IAAAA,EAAgB,IAClEA,EACJC,MAAM,MACNC,OAAOC,SACP3B,KAAKJ,SAAAA,GAAG,OAAK2B,EAAI3B,EAAI,IACrBS,KAAK,KACV,CAEe,SAASuB,IACtB,OAA0BC,EAAAA,EAAAA,YAAkB,eAArCL,EAAK,KAAEM,EAAQ,KAChBC,EAAYT,EAAO3B,EAAa6B,GAChCQ,EAAaV,EAAOT,EAAcW,GAClCS,EAAYX,EAAOhB,EAAakB,GAChCU,EAAYZ,EAAOd,EAAagB,GAChCW,EAAYb,EAAOZ,EAAac,GAChCY,EAAcd,EAAOP,EAAUS,GAC/Ba,EAAWf,EAAOL,EAAYO,GAC9Bc,EAAYhB,EAAOnB,EAAaqB,GAChCe,EAAYjB,EAAOlB,EAAaoB,GAChCgB,EAAUlB,EAAOD,EAAWG,GAClC,OACEiB,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAM,QACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,EACPC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBAAMpB,EA5BpB,2BA4BqC,EAAAa,SAAAA,WACvCnB,IAASoB,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOA,OAEhCmB,UAEDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAQ,CACPC,YAAY,EACZ7B,MAAOA,EACP8B,QAAUC,SAAAA,GAAG,OAAKzB,EAAUyB,EAAIC,OAA+BhC,MAAK,OAGxEoB,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACC,MAAM,SAAQH,UAC1BF,EAAAA,EAAAA,MAAAA,MAAAA,CAAKgB,MAAO,CAAEC,OAAQ,QAASf,SAAAA,EAC7BC,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOhB,IAAaa,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOO,IAAcY,SACjFZ,KAEHa,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,cAAcC,MAAOf,IAAcY,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOQ,IAAeW,SACpFX,KAEHY,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOd,IAAaW,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOS,IAAcU,SACjFV,KAEHW,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOb,IAAaU,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOU,IAAcS,SACjFT,KAEHU,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOZ,IAAaS,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOW,IAAcQ,SACjFR,KAEHS,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,YAAYC,MAAOX,IAAeQ,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOY,IAAgBO,SACpFP,KAEHQ,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,YAAYC,MAAOV,IAAYO,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOa,IAAaM,SAC9EN,KAEHO,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOT,IAAaM,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOc,IAAcK,SACjFL,KAEHM,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,aAAaC,MAAOR,IAAaK,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOe,IAAcI,SACjFJ,KAEHK,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CAACb,MAAM,WAAWC,MAAOP,IAAWI,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAC3B,MAAOgB,IAAYG,SAC3EH,WAMb,C","sources":["../../packages/text-case/src/utils.ts","../../packages/text-case/src/index.tsx"],"sourcesContent":["export const toCamelCase = (str: string = '') => {\n  const s =\n    str\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n      ?.map((x) => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase())\n      .join('') || '';\n  return s.slice(0, 1).toLowerCase() + s.slice(1);\n};\n\nexport const toSnakeCase = (str: string = '') =>\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    ?.map((x) => x.toLowerCase())\n    .join('_');\n\nexport const toKebabCase = (str: string = '') =>\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    ?.map((x) => x.toLowerCase())\n    .join('-');\n\nexport const toTitleCase = (str: string = '') =>\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    ?.map((x) => x.charAt(0).toUpperCase() + x.slice(1))\n    .join(' ');\n\nexport const toPascalCase = (str: string = '') =>\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    ?.map((x) => x.charAt(0).toUpperCase() + x.slice(1).toLowerCase())\n    .join('');\n\nexport const swapCase = (str: string = '') =>\n  [...str].map((c) => (c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase())).join('');\n\nexport const toPathCase = (str: string = '') => str.replace(/\\s/g, '/');\n\nexport const toUpperCase = (str: string = '') => str.toLocaleUpperCase();\nexport const toLowerCase = (str: string = '') => str.toLocaleLowerCase();\nexport const toDotCase = (str: string = '') => str.replace(/(-|_|\\s|\\+|\\/)+/g, '.');\n","import { Fragment, useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton, ResultCode, Button } from '@wcj/tools-react-components';\nimport {\n  toCamelCase,\n  toPascalCase,\n  toSnakeCase,\n  toKebabCase,\n  toTitleCase,\n  toUpperCase,\n  toDotCase,\n  toLowerCase,\n  toPathCase,\n  swapCase,\n} from './utils';\n\nexport * from './utils';\n\nconst sample = `Hello World!\\nCamel Case`;\n\nfunction handle(fun: (val?: string) => string | undefined, value: string = '') {\n  return value\n    .split('\\n')\n    .filter(Boolean)\n    .map((str) => fun(str))\n    .join('\\n');\n}\n\nexport default function TextCase() {\n  const [value, setValue] = useState<string>();\n  const camelCase = handle(toCamelCase, value);\n  const pascalCase = handle(toPascalCase, value);\n  const snakeCase = handle(toSnakeCase, value);\n  const kebabCase = handle(toKebabCase, value);\n  const titleCase = handle(toTitleCase, value);\n  const swapCaseStr = handle(swapCase, value);\n  const pathCase = handle(toPathCase, value);\n  const upperCase = handle(toUpperCase, value);\n  const lowerCase = handle(toLowerCase, value);\n  const dotCase = handle(toDotCase, value);\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"Input\"\n        extra={\n          <Fragment>\n            <Button onClick={() => setValue(sample)}>Sample</Button>\n            {value && <CopyButton value={value} />}\n          </Fragment>\n        }\n      >\n        <Textarea\n          spellCheck={false}\n          value={value}\n          onInput={(evn) => setValue((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"Result\">\n        <div style={{ height: '100%' }}>\n          <ResultCode title=\"Camel Case\" extra={camelCase && <CopyButton value={camelCase} />}>\n            {camelCase}\n          </ResultCode>\n          <ResultCode title=\"Pascal Case\" extra={pascalCase && <CopyButton value={pascalCase} />}>\n            {pascalCase}\n          </ResultCode>\n          <ResultCode title=\"Snake Case\" extra={snakeCase && <CopyButton value={snakeCase} />}>\n            {snakeCase}\n          </ResultCode>\n          <ResultCode title=\"Kebab Case\" extra={kebabCase && <CopyButton value={kebabCase} />}>\n            {kebabCase}\n          </ResultCode>\n          <ResultCode title=\"Title Case\" extra={titleCase && <CopyButton value={titleCase} />}>\n            {titleCase}\n          </ResultCode>\n          <ResultCode title=\"Swap Case\" extra={swapCaseStr && <CopyButton value={swapCaseStr} />}>\n            {swapCaseStr}\n          </ResultCode>\n          <ResultCode title=\"Path Case\" extra={pathCase && <CopyButton value={pathCase} />}>\n            {pathCase}\n          </ResultCode>\n          <ResultCode title=\"Upper Case\" extra={upperCase && <CopyButton value={upperCase} />}>\n            {upperCase}\n          </ResultCode>\n          <ResultCode title=\"Lower Case\" extra={lowerCase && <CopyButton value={lowerCase} />}>\n            {lowerCase}\n          </ResultCode>\n          <ResultCode title=\"Dot Case\" extra={dotCase && <CopyButton value={dotCase} />}>\n            {dotCase}\n          </ResultCode>\n        </div>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["toCamelCase","str","s","match","_str$match","map","x","slice","toUpperCase","toLowerCase","join","toSnakeCase","_str$match2","toKebabCase","_str$match3","toTitleCase","_str$match4","charAt","toPascalCase","_str$match5","swapCase","c","toPathCase","replace","toLocaleUpperCase","toLocaleLowerCase","toDotCase","handle","fun","value","split","filter","Boolean","TextCase","useState","setValue","camelCase","pascalCase","snakeCase","kebabCase","titleCase","swapCaseStr","pathCase","upperCase","lowerCase","dotCase","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","CopyButton","Textarea","spellCheck","onInput","evn","target","style","height","ResultCode"],"sourceRoot":""}