{"version":3,"file":"static/js/637.e2c88308.chunk.js","mappings":"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","sources":["../../packages/json-xml/src/index.tsx","../../packages/json-xml/src/sample.ts"],"sourcesContent":["import React, { createContext, Fragment, useRef, useContext, useEffect, useReducer, useState } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, Button, ErrorLayout } from '@wcj/tools-react-components';\nimport { XMLParser, XMLBuilder, XMLValidator } from 'fast-xml-parser';\nimport CodeMirror, { ReactCodeMirrorRef, EditorView } from '@uiw/react-codemirror';\nimport { json } from '@codemirror/lang-json';\nimport { xml } from '@codemirror/lang-xml';\nimport * as sample from './sample';\n\nconst borderRadius = EditorView.theme({\n  '.cm-scroller, &': {\n    borderRadius: '3px',\n  },\n  '&': {\n    border: '1px solid var(--color-border-default)',\n  },\n});\n\ninterface ValueContextData extends InitialState {\n  dispatch?: React.Dispatch<InitialState>;\n}\ntype Theme = 'dark' | 'light';\ninterface InitialState {\n  xml?: string;\n  json?: string;\n  error?: string;\n  theme?: Theme;\n  input?: 'xml' | 'json';\n}\nconst defalutTheme = document.documentElement.getAttribute('data-color-mode') as Theme;\nconst ValueContext = createContext<ValueContextData>({ theme: defalutTheme });\nconst useValue = () => {\n  return useContext(ValueContext);\n};\nconst reducer = (state: InitialState, action: InitialState) => {\n  return {\n    ...state,\n    ...action,\n  };\n};\n\nexport default function JSONToXML() {\n  const [state, dispatch] = useReducer(reducer, { xml: '', json: '' });\n\n  useEffect(() => {\n    const theme = document.documentElement.getAttribute('data-color-mode') as Theme;\n    dispatch!({ theme });\n    document.addEventListener('colorschemechange', (e) => {\n      dispatch!({ theme: (e as any).detail.colorScheme });\n    });\n  }, []);\n  return (\n    <ValueContext.Provider value={{ ...state, dispatch }}>\n      <Wrapper>\n        <LeftLayout />\n        <RightLayout />\n      </Wrapper>\n      <ErrorLayout>{state.error}</ErrorLayout>\n    </ValueContext.Provider>\n  );\n}\n\nfunction LeftLayout() {\n  const { json: jsonStr, input, theme, dispatch } = useValue();\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  function handleInput(val: string) {\n    try {\n      const jsonobj = JSON.parse(val);\n      const builder = new XMLBuilder({ format: true });\n      const xmlStr = builder.build(jsonobj);\n      dispatch!({ input: 'json', json: val, xml: xmlStr, error: '' });\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch!({ error: err.message });\n      }\n    }\n  }\n\n  return (\n    <StyledLayout\n      title=\"JSON\"\n      extra={\n        <Fragment>\n          {jsonStr && <CopyButton value={jsonStr} />}\n          <Button\n            onClick={() => {\n              editor.current?.view?.focus();\n              handleInput(sample.JSON);\n            }}\n          >\n            Sample\n          </Button>\n        </Fragment>\n      }\n    >\n      <CodeMirror\n        value={jsonStr}\n        ref={editor}\n        theme={theme}\n        readOnly={input !== 'json'}\n        height=\"calc(100vh - 90px)\"\n        extensions={[json(), borderRadius]}\n        onFocus={() => {\n          dispatch && dispatch({ input: 'json' });\n        }}\n        onChange={(val) => {\n          if (input === 'json') {\n            handleInput(val);\n          }\n        }}\n      />\n    </StyledLayout>\n  );\n}\n\nfunction RightLayout() {\n  const { xml: xmlStr, input, theme, dispatch } = useValue();\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const validator = (xml: string = '') => {\n    const val = XMLValidator.validate(xml, {});\n    if (typeof val !== 'boolean' && val.err) {\n      dispatch!({ error: `${val.err.msg}, line: ${val.err.line}, col: ${val.err.col}` });\n    }\n  };\n  function handleInput(val: string) {\n    const parser = new XMLParser({});\n    const jsonStr = parser.parse(val);\n    if (val) {\n      validator(val);\n    }\n    dispatch!({ input: 'xml', xml: val, json: JSON.stringify(jsonStr, null, 2) });\n  }\n\n  return (\n    <StyledLayout\n      title=\"XML\"\n      extra={\n        <Fragment>\n          {xmlStr && <CopyButton value={xmlStr} />}\n          <Button\n            onClick={() => {\n              editor.current?.view?.focus();\n              handleInput(sample.XML);\n            }}\n          >\n            Sample\n          </Button>\n        </Fragment>\n      }\n    >\n      <CodeMirror\n        value={xmlStr}\n        ref={editor}\n        theme={theme}\n        readOnly={input !== 'xml'}\n        height=\"calc(100vh - 90px)\"\n        extensions={[xml(), borderRadius]}\n        onFocus={() => dispatch!({ input: 'xml' })}\n        onChange={(val, viewUpdate) => {\n          if (input === 'xml') {\n            handleInput(val);\n          }\n        }}\n      />\n    </StyledLayout>\n  );\n}\n","export const JSON = `{\n  \"any_name\": {\n    \"person\": {\n      \"phone\": [\n          122233344553,\n          122233344554\n      ],\n      \"name\": \"Boris\",\n      \"age\": 34,\n      \"married\": \"Yes\",\n      \"birthday\": \"Mon, 31 Aug 1970 02:03:04 +0300\",\n      \"address\": [\n          {\n              \"city\": \"Moscow\",\n              \"street\": \"Kahovka\",\n              \"buildingNo\": 1,\n              \"flatNo\": 2\n          },\n          {\n              \"city\": \"Tula\",\n              \"street\": \"Lenina\",\n              \"buildingNo\": 3,\n              \"flatNo\": 78\n          }\n      ]\n    }\n  }\n}`;\n\nexport const XML = `<any_name>\n  <person>\n    <phone>+122233344550</phone>\n    <name>Jack</name>\n    <phone>+122233344551</phone>\n    <age>33</age>\n    <married firstTime=\"No\">Yes</married>\n    <birthday>Wed, 28 Mar 1979 12:13:14 +0300</birthday>\n    <address>\n      <city>New York</city>\n      <street>Park Ave</street>\n      <buildingNo>1</buildingNo>\n      <flatNo>1</flatNo>\n    </address>\n    <address>\n      <city>Boston</city>\n      <street>Centre St</street>\n      <buildingNo>33</buildingNo>\n      <flatNo>24</flatNo>\n    </address>\n  </person>\n  <person>\n    <phone>+122233344553</phone>\n    <name>Boris</name>\n    <phone>+122233344554</phone>\n    <age>34</age>\n    <married firstTime=\"Yes\">Yes</married>\n    <birthday>Mon, 31 Aug 1970 02:03:04 +0300</birthday>\n    <address>\n      <city>Moscow</city>\n      <street>Kahovka</street>\n      <buildingNo>1</buildingNo>\n      <flatNo>2</flatNo>\n    </address>\n    <address>\n      <city>Tula</city>\n      <street>Lenina</street>\n      <buildingNo>3</buildingNo>\n      <flatNo>78</flatNo>\n    </address>\n  </person>\n</any_name>`;\n"],"names":["borderRadius","EditorView","border","defalutTheme","document","documentElement","getAttribute","ValueContext","createContext","theme","useValue","useContext","reducer","state","action","JSONToXML","useReducer","xml","json","dispatch","useEffect","addEventListener","e","detail","colorScheme","_jsxs","Provider","value","children","Wrapper","_jsx","LeftLayout","RightLayout","ErrorLayout","error","jsonStr","input","editor","useRef","handleInput","val","jsonobj","JSON","parse","xmlStr","XMLBuilder","format","build","err","Error","message","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","current","view","focus","CodeMirror","ref","readOnly","height","extensions","onFocus","onChange","XMLParser","XMLValidator","msg","line","col","validator","stringify","viewUpdate"],"sourceRoot":""}