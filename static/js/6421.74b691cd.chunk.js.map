{"version":3,"file":"static/js/6421.74b691cd.chunk.js","mappings":"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","sources":["../../packages/pdf-to-img/src/index.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { Wrapper, Spacing, StyledLayout, CopyButton, Button } from '@wcj/tools-react-components';\nimport * as PDF from 'pdfjs-dist';\nimport styled, { css } from 'styled-components';\n\n// @ts-ignore\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\nPDF.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nexport interface ImageProps\n  extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {\n  ref?: React.LegacyRef<HTMLImageElement>;\n  error?: boolean;\n}\n\nconst InputPDF = styled.input``;\nconst Canvas = styled.canvas`\n  border: 1px solid var(--color-border-default);\n`;\n\nexport default function QRCodeGenerator() {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const [type, setType] = useState<'png' | 'jpg'>('png');\n  const [saveAll, setSaveAll] = useState<boolean>(false);\n  const [pdf, setPdf] = useState<PDF.PDFDocumentProxy>();\n  const [name, setName] = useState<string>();\n  const [pageNum, setPageNum] = useState<number>(1);\n  const [pageNumInfo, setPageNumInfo] = useState<string>();\n  const [loading, setLoading] = useState<boolean>();\n\n  useEffect(() => {\n    if (saveAll) {\n      renderPage(() => {\n        if (pageNum >= pdf!.numPages) {\n          setSaveAll(false);\n          return;\n        }\n        save();\n        setPageNum(pageNum + 1);\n        setSaveAll(true);\n      });\n    } else if (pdf && pageNum) {\n      renderPage();\n    }\n  }, [pdf, pageNum, saveAll]);\n\n  function renderPage(callback?: () => void) {\n    pdf?.getPage(pageNum).then((page) => {\n      let scale = 1.5;\n      let viewport = page.getViewport({ scale: scale });\n      canvas.current!.height = viewport.height;\n      canvas.current!.width = viewport.width;\n      canvas.current!.style.width = `${viewport.width}px`;\n      canvas.current!.style.height = `${viewport.height}px`;\n      const context = canvas.current!.getContext('2d');\n      let renderContext = {\n        canvasContext: context!,\n        viewport: viewport,\n      };\n      page.render(renderContext).promise.then(callback);\n    });\n    setPageNumInfo(`${pageNum} / ${pdf!.numPages}`);\n  }\n\n  function showPDF(url: string) {\n    let loadingTask = PDF.getDocument(url);\n    loadingTask.promise.then(\n      (doc) => {\n        setLoading(false);\n        setPdf(doc);\n        setPageNum(1);\n      },\n      (reason) => {\n        alert(reason);\n      },\n    );\n  }\n  const handleInput = (evn: React.ChangeEvent<HTMLInputElement>) => {\n    if (!evn.target.files) return;\n    const file = evn.target.files[0];\n    setLoading(true);\n    setPageNumInfo('');\n    setName(file.name);\n    let reader = new FileReader();\n    reader.onload = (e) => showPDF(e.target?.result as string);\n    reader.readAsDataURL(file);\n  };\n  function save() {\n    let a = document.createElement('a');\n    let event = new MouseEvent('click');\n    a.download = name + '-' + pageNum + '.' + type;\n    a.href = canvas.current!.toDataURL(type === 'png' ? 'image/png' : 'image/jpeg');\n    a.dispatchEvent(event);\n  }\n  const savePage = () => {\n    if (pageNum > pdf!.numPages) {\n      alert('All saved successfully');\n      return;\n    }\n    save();\n  };\n  function prevPage() {\n    if (pageNum <= 1) {\n      return;\n    }\n    setPageNum(pageNum - 1);\n  }\n\n  function nextPage() {\n    if (pageNum >= pdf!.numPages) {\n      return;\n    }\n    setPageNum(pageNum + 1);\n  }\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Selected PDF File\" overflow=\"initial\">\n        <Spacing>\n          <InputPDF type=\"file\" accept=\"application/pdf\" onChange={handleInput} />\n          {pageNumInfo && (\n            <Spacing direction=\"row\">\n              <Button onClick={prevPage} disabled={pageNum === 1}>\n                Previous page\n              </Button>\n              <Button onClick={nextPage} disabled={!pdf || pageNum >= pdf.numPages}>\n                Next page\n              </Button>\n              <Button onClick={savePage}>Save this page</Button>\n              <Button\n                onClick={() => {\n                  setPageNum(1);\n                  setSaveAll(true);\n                }}\n              >\n                Save all\n              </Button>\n            </Spacing>\n          )}\n          {pageNumInfo && (\n            <div>\n              {name}, Page: {pageNumInfo}\n            </div>\n          )}\n          {loading === true && <div>Loading...</div>}\n          {loading === false && <Canvas ref={canvas} />}\n        </Spacing>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["PDF","pdfjsWorker","InputPDF","styled","_templateObject","Canvas","_templateObject2","QRCodeGenerator","canvas","useRef","useState","type","saveAll","setSaveAll","pdf","setPdf","name","setName","pageNum","setPageNum","pageNumInfo","setPageNumInfo","loading","setLoading","renderPage","callback","getPage","then","page","viewport","getViewport","scale","current","height","width","style","renderContext","canvasContext","getContext","render","promise","numPages","useEffect","save","a","document","createElement","event","MouseEvent","download","href","toDataURL","dispatchEvent","_jsx","Wrapper","children","StyledLayout","title","overflow","_jsxs","Spacing","accept","onChange","evn","target","files","file","reader","FileReader","onload","e","url","_e$target","result","doc","reason","alert","readAsDataURL","direction","Button","onClick","disabled","ref"],"sourceRoot":""}