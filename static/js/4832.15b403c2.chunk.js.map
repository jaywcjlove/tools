{"version":3,"file":"static/js/4832.15b403c2.chunk.js","mappings":"kMAeO,SAASA,EAAIC,EAAGC,GAarB,IAVA,IAAMC,EAAQD,EAAOE,UAAY,GAE3BC,EAAS,GACXC,GAAS,EACTC,EAASJ,EAAMI,OACfC,EAAQL,EAAMG,EAAQ,GAKnBE,GAAwB,YAAfA,EAAMC,MAAwC,OAAlBD,EAAME,SAEhDF,EAAQL,IADRG,EACsB,GAKxB,IAFAE,EAAQL,EAAMI,EAAS,GAGrBA,EAAS,EAAID,GACbE,GACe,YAAfA,EAAMC,MACY,OAAlBD,EAAME,SAGNF,EAAQL,IADRI,EACuB,GAGzB,OAASD,EAAQC,GAAQ,CAEvB,IAAMI,EAASC,EAAIX,EAAGE,EAAMG,GAAQJ,GAEhCW,MAAMC,QAAQH,GAChBN,EAAOU,KAAP,MAAAV,GAAM,OAASM,IACNA,GACTN,EAAOU,KAAKJ,EAEf,CAED,OAAON,CACR,CCzDM,IAAMW,EAAM,CAAC,EAAEC,eCSf,SAASC,EAASjB,EAAGkB,GAC1B,OAAOlB,EAAEiB,SAAWC,EAAQA,EAAMC,QAAQ,YAAa,IACxD,CCOM,SAASR,EAAIX,EAAGoB,EAAMnB,GAE3B,IAAIoB,EAEJ,GAAkB,YAAdD,EAAKZ,KAAoB,CAC3B,GAAIY,EAAKE,YAA4C,WAA9BF,EAAKE,WAAWC,UACrC,OAGER,EAAIS,KAAKxB,EAAEyB,SAAUL,EAAKX,WAC5BY,EAAKrB,EAAEyB,SAASL,EAAKX,SAExB,MAAUM,EAAIS,KAAKxB,EAAEyB,SAAUL,EAAKZ,QACnCa,EAAKrB,EAAEyB,SAASL,EAAKZ,OAGvB,MAAkB,oBAAPa,EACFA,EAAGrB,EAAGoB,EAAMnB,GAUvB,SAAiBD,EAAGoB,GAElB,GAA0B,kBAAfA,EAAKF,MAEd,OAAOlB,EAAEoB,EAAM,OAAQH,EAASjB,EAAGoB,EAAKF,QAG1C,OAAOnB,EAAIC,EAAGoB,EACf,CAfQM,CAAQ1B,EAAGoB,EACnB,C,0BC5BYO,GAAWC,EAAAA,EAAAA,GAAQ,CAC9B,QACA,SACA,WACA,WACA,oBACA,QACA,iBACA,aACA,OACA,gBACA,SACA,S,8BCXK,SAASC,EAAK3B,GACnB,OAAO4B,EAAK5B,GAMZ,SAAoBA,GAClB,IAAM6B,EAAO7B,EAAM,GAEnB,GACmB,IAAjBA,EAAMI,QACQ,SAAdyB,EAAKvB,OACW,MAAfuB,EAAKb,OAAgC,OAAfa,EAAKb,OAE5B,MAAO,GAGT,MAAO,CAACV,KAAM,YAAaL,SAAUD,EACtC,GACF,CAUM,SAAS8B,EAAW9B,GAKzB,IAJA,IAEIkB,EAFAf,GAAS,IAIJA,EAAQH,EAAMI,QAGrB,GAFAc,EAAOlB,EAAMG,IAERsB,EAASP,IAAU,aAAcA,GAAQY,EAAWZ,EAAKjB,UAC5D,OAAO,EAIX,OAAO,CACR,CASD,SAAS2B,EAAK5B,EAAO+B,EAAYC,GAY/B,IAXA,IAOIC,EAEAf,EATEgB,EAAcF,GAAiBG,EAE/BC,EAsCR,SAAiBpC,GAEf,IAGIkB,EAHAkB,EAAY,GACZjC,GAAS,EAIb,OAASA,EAAQH,EAAMI,QAaJ,YAZjBc,EAAOlB,EAAMG,IAYLG,MAAmC,SAAdY,EAAKZ,OAChCwB,EAAWZ,EAAKjB,UAIhBmC,EAAUxB,KAAKM,GAFfkB,EAAYA,EAAUC,OAAOC,EAAMpB,IAMvC,OAAOkB,CACR,CApEmBG,CAAQvC,GAEtBQ,EAAS,GACTL,GAAS,IAMJA,EAAQiC,EAAUhC,QACzBc,EAAOkB,EAAUjC,GAEbsB,EAASP,IACNe,IAAOA,EAAQ,IACpBA,EAAMrB,KAAKM,KAEPe,IACFzB,EAASA,EAAO6B,OAAON,EAAWE,IAClCA,OAAQO,GAGVhC,EAASA,EAAO6B,OAAOH,EAAYhB,KAQvC,OAJIe,IACFzB,EAASA,EAAO6B,OAAON,EAAWE,KAG7BzB,CACR,CA4CD,SAAS8B,EAAMpB,GAEb,OAAOU,EAAKV,EAAKjB,UA6BjB,SAAoBD,GAEUkB,EAArBjB,SAAP,IAAoBwC,GAApB,OAA4BvB,EAA5B,GAEA,OAAO,kBAAIwB,GAAO,EAAM,CAAC,EAAGD,IAA5B,IAAmCxC,SAAUD,GAC9C,IAxBD,SAAuBK,GACrB,GAAI,aAAcA,GAAS,aAAca,EAAM,CACjBA,EAArBjB,SAAP,IAAoBwC,GAApB,OAA4BvB,EAA5B,GACA,OAAO,kBACFb,GADL,IAGEJ,SAAU,EAAC,kBAAIyC,GAAO,EAAM,CAAC,EAAGD,IAAtB,IAA6BxC,SAAUI,EAAMJ,aAE1D,CAED,OAAO,UAAII,EACZ,GAcF,CAOD,SAAS8B,EAASQ,GAChB,OAAOA,CACR,CC9KM,SAASC,EAAa9C,EAAGoB,GAC9B,OAAOS,EAAK9B,EAAIC,EAAGoB,GACpB,CCPM,SAAS2B,EAAQ/C,EAAGgD,GACzB,OAAY,OAARA,QAAwBN,IAARM,EACX,GAGLhD,EAAEiD,cACGC,OAAO,IAAIC,IAAIH,EAAKhD,EAAEiD,gBAGxBD,CACR,C,eCRUI,EAcP,SAAUnD,EAAQI,EAAOgD,GACvB,IAAIC,GAAK1B,EAAAA,EAAAA,GAAQyB,GAEjB,IAAKpD,IAAWA,EAAOO,OAASP,EAAOE,SACrC,MAAM,IAAIoD,MAAM,wBAGlB,GAAqB,kBAAVlD,GACT,GAAIA,EAAQ,GAAKA,IAAUmD,OAAOC,kBAChC,MAAM,IAAIF,MAAM,iDAKlB,IAFAlD,EAAQJ,EAAOE,SAASuD,QAAQrD,IAEpB,EACV,MAAM,IAAIkD,MAAM,gCAIpB,OAASlD,EAAQJ,EAAOE,SAASG,QAC/B,GAAIgD,EAAGrD,EAAOE,SAASE,GAAQA,EAAOJ,GACpC,OAAOA,EAAOE,SAASE,GAI3B,OAAO,IACR,ECnBCsD,EAAkB,MAClBC,EAAoB,UAEpBC,GAAKC,EAAAA,EAAAA,GAAe,MACpBC,GAAID,EAAAA,EAAAA,GAAe,KACnBE,GAAOF,EAAAA,EAAAA,GAAe,CAAC,KAAM,OAC7BG,GAAMH,EAAAA,EAAAA,GAAe,MAIrBI,GAAcJ,EAAAA,EAAAA,GAAe,CAEjC,WACA,OACA,UACA,WACA,WACA,KACA,SACA,QACA,WACA,QA0dF,SAAgB1C,GACd,OAAO+C,SAAS/C,EAAKE,YAAc,CAAC,GAAG8C,OACxC,EAGD,SAAsBhD,GACpB,MAAwB,WAAjBA,EAAKX,WAA0BW,EAAKE,YAAc,CAAC,GAAG+C,IAC9D,IAzdKC,GAAiBR,EAAAA,EAAAA,GAAe,CACpC,UACA,UACA,QACA,aACA,OACA,UACA,SACA,KACA,SACA,MACA,KACA,KACA,MACA,SACA,aACA,SACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,SACA,KACA,OACA,SACA,UACA,OACA,OACA,MACA,KACA,IACA,YACA,MACA,UACA,KACA,QAaK,SAASS,EAAOnD,GAAoB,IAYrCoD,EAEAtD,EAEAuD,EAhBuBC,EAAc,uDAAJ,CAAC,EAGhCvE,EAAWiB,EAAKjB,UAAY,GAC5BwE,EAAQL,EAAelD,GACvBwD,EAAaC,EAAgBzD,EAAM,CACvCwD,WAAYF,EAAQE,YAAc,SAClCE,aAAa,EACbC,YAAY,IAEV1E,GAAS,EAgBb,GAAkB,SAAde,EAAKZ,MAAiC,YAAdY,EAAKZ,KAC/B,OAAOwE,EAAY5D,EAAM,CAACwD,WAAAA,EAAYE,aAAa,EAAMC,YAAY,IAiBvE,IAHAP,EAAU,KAGDnE,EAAQF,EAASG,QAMxBkE,EAAUA,EAAQjC,OAEhB0C,EAAoB9E,EAASE,GAAQe,EAAM,CACzCwD,WAAAA,EACAE,YAAazE,EAAQ,KAAOsE,EAC5BI,WACE1E,EAAQF,EAASG,OAAS,EAAIuD,EAAG1D,EAASE,EAAQ,IAAMsE,KAYhEtE,GAAS,EAIT,IAFA,IAAMK,EAAS,KAENL,EAAQmE,EAAQlE,QAGF,kBAFrBY,EAAQsD,EAAQnE,SAGAqC,IAAV+B,GAAuBvD,EAAQuD,IAAOA,EAAQvD,GACzCA,IACLuD,GAAO/D,EAAOI,KAAK,KAAKoE,OAAOT,IACnCA,EAAQ,EACR/D,EAAOI,KAAKI,IAKhB,OAAOR,EAAOyE,KAAK,GACpB,CAUD,SAASF,EAAoB7D,EAAMnB,EAAQyE,GACzC,MAAkB,YAAdtD,EAAKZ,KAsBX,SAAwBY,EAAMnB,EAAQyE,GAEpC,IAMIU,EAEAC,EARET,EAAaC,EAAgBzD,EAAMsD,GACnCvE,EAAWiB,EAAKjB,UAAY,GAC9BE,GAAS,EAETiF,EAAQ,GAQZ,GAAIpB,EAAY9C,GACd,OAAOkE,EAmBLzB,EAAGzC,IAYE6C,EAAI7C,IAASgC,EAAUnD,EAAQmB,EAAM6C,GAX5CoB,EAAS,KAiBFtB,EAAE3C,IACTgE,EAAS,EACTC,EAAS,GAMFf,EAAelD,KACtBgE,EAAS,EACTC,EAAS,GAMX,OAAShF,EAAQF,EAASG,QACxBgF,EAAQA,EAAM/C,OACZ0C,EAAoB9E,EAASE,GAAQe,EAAM,CACzCwD,WAAAA,EACAE,YAAazE,OAAQqC,EAAY0C,EACjCL,WACE1E,EAAQF,EAASG,OAAS,EAAIuD,EAAG1D,EAASE,EAAQ,IAAMgF,KAW5DrB,EAAK5C,IAASgC,EAAUnD,EAAQmB,EAAM4C,IACxCsB,EAAMxE,KAAK,MAITsE,GAAQE,EAAMC,QAAQH,GACtBC,GAAQC,EAAMxE,KAAKuE,GAEvB,OAAOC,CACR,CAnHUE,CAAepE,EAAMnB,EAAQyE,GAGpB,SAAdtD,EAAKZ,KACA,CACkB,WAAvBkE,EAAQE,WACJI,EAAY5D,EAAMsD,GAClBe,EAAerE,IAIhB,EACR,CA8HD,SAAS4D,EAAY5D,EAAMsD,GAezB,IAdA,IAQIgB,EAEAC,EAEAR,EAZEjE,EAAQgC,OAAO9B,EAAKF,OAEpB0E,EAAQ,GAERlF,EAAS,GACXmF,EAAQ,EACRxF,GAAS,EAQNwF,EAAQ3E,EAAMZ,QACnBqD,EAAgBmC,UAAYD,EAG5BF,GAFAD,EAAQ/B,EAAgBoC,KAAK7E,IAEfwE,EAAMrF,MAAQa,EAAMZ,OAElCsF,EAAM9E,KAGJkF,EAIE9E,EACG+E,MAAMJ,EAAOF,GACbxE,QAAQ,kDAAmD,IAC9DuD,EAAQI,YACRJ,EAAQK,aAIZc,EAAQF,EAAM,EAQhB,OAAStF,EAAQuF,EAAMtF,QAKkC,OAArDsF,EAAMvF,GAAO6F,WAAWN,EAAMvF,GAAOC,OAAS,IAC7CD,EAAQuF,EAAMtF,OAAS,GACa,OAAnCsF,EAAMvF,EAAQ,GAAG6F,WAAW,IAE9BxF,EAAOI,KAAK8E,EAAMvF,IAClB8E,EAAO,IAmBAS,EAAMvF,KACT8E,GAAMzE,EAAOI,KAAKqE,GACtBzE,EAAOI,KAAK8E,EAAMvF,IAClB8E,EAAO,KAIX,OAAOzE,EAAOyE,KAAK,GACpB,CAMD,SAASM,EAAerE,GACtB,OAAO8B,OAAO9B,EAAKF,MACpB,CAeD,SAAS8E,EAA6B9E,EAAO4D,EAAaC,GASxD,IAPA,IAGIW,EAEAC,EALEjF,EAAS,GACXmF,EAAQ,EAMLA,EAAQ3E,EAAMZ,QACnBsD,EAAkBkC,UAAYD,EAG9BF,GAFAD,EAAQ9B,EAAkBmC,KAAK7E,IAEjBwE,EAAMrF,MAAQa,EAAMZ,OAI7BuF,GAAUF,IAAOD,GAAUZ,GAC9BpE,EAAOI,KAAK,IAGV+E,IAAUF,GACZjF,EAAOI,KAAKI,EAAM+E,MAAMJ,EAAOF,IAGjCE,EAAQH,EAAQC,EAAMD,EAAM,GAAGpF,OAASqF,EAW1C,OAJIE,IAAUF,GAAQZ,GACpBrE,EAAOI,KAAK,IAGPJ,EAAOyE,KAAK,IACpB,CASD,SAASN,EAAgBzD,EAAMsD,GAE7B,IAAIyB,EAEJ,GAAkB,YAAd/E,EAAKZ,KAEP,OADA2F,EAAQ/E,EAAKE,YAAc,CAAC,EACpBF,EAAKX,SACX,IAAK,UACL,IAAK,YACL,IAAK,MACH,MAAO,MACT,IAAK,OACH,MAAO,SACT,IAAK,MACH,OAAO0F,EAAMtE,KAAO,WAAa,MACnC,IAAK,KACL,IAAK,KACH,OAAOsE,EAAMC,OAAS,SAAW1B,EAAQE,WAC3C,IAAK,WACH,MAAO,WAKb,OAAOF,EAAQE,UAChB,CCjgBD,IAAMQ,EAAS,YAETiB,GAAMvC,EAAAA,EAAAA,GAAe,OACrBwC,GAASxC,EAAAA,EAAAA,GAAe,QAMvB,SAASyC,EAAKvG,EAAGoB,GACtB,IAGIoF,EAEAC,ECpB4BvF,EDe1Bf,EAAWiB,EAAKjB,SAClBE,GAAS,EAMb,GAAIgG,EAAIjF,GACN,OAASf,EAAQF,EAASG,QAAQ,CAChC,IAAMC,EAAQJ,EAASE,GAEvB,GACEiG,EAAO/F,IACPA,EAAMe,YACNf,EAAMe,WAAWoF,WACjB9F,MAAMC,QAAQN,EAAMe,WAAWoF,WAC/B,CACAF,EAAYjG,EAAMe,WAAWoF,UAC7B,KACD,CACF,CAGH,GAAIF,EAGF,IAFAnG,GAAS,IAEAA,EAAQmG,EAAUlG,QACzB,GAAI4C,OAAOsD,EAAUnG,IAAQ4F,MAAM,EAAGb,EAAO9E,UAAY8E,EAAQ,CAC/DqB,EAAOvD,OAAOsD,EAAUnG,IAAQ4F,MAAMb,EAAO9E,QAC7C,KACD,CAIL,OAAON,EACLoB,EACA,OACA,CAACqF,KAAMA,GAAQ,KAAME,KAAM,OCpDGzF,EDqDZD,EAASjB,EAAGuE,EAAOnD,ICpDhC8B,OAAOhC,GAAOC,QAAQ,OAAQ,KDsDtC,CElDM,SAASyF,EAAI5G,EAAGoB,GACrB,OAAOpB,EAAEoB,EAAM,SAAUrB,EAAIC,EAAGoB,GACjC,CCLM,SAASyF,EAAgB1G,GAC9B,IAAIE,GAAS,EAEb,GAAIF,EAASG,OAAS,EACpB,OAASD,EAAQF,EAASG,QACxB,GAAIH,EAASE,GAAOyG,OAClB,OAAO,EAKb,OAAO,CACR,CCNM,SAASC,EAAc/G,EAAGoB,GAI/B,IAHA,IAAMjB,EAAWJ,EAAIC,EAAGoB,GACpBf,GAAS,IAEJA,EAAQF,EAASG,QAAQ,CAChC,IAAMC,EAAQJ,EAASE,GACJ,aAAfE,EAAMC,OACRL,EAASE,GAAS,CAChBG,KAAM,WACNsG,QAAQ,EACRE,QAAS,KAET7G,SAAU,CAACI,IAGhB,CAGD,OAAOJ,CACR,CCdD,IAAM8G,GAAMnD,EAAAA,EAAAA,GAAe,OACrBoD,GAAKpD,EAAAA,EAAAA,GAAe,MACpBqD,GAAKrD,EAAAA,EAAAA,GAAe,MAmF1B,SAASsD,EAAOpH,EAAGG,GACjB,IAAMD,EAAQ6G,EAAc/G,EAAG,CAACQ,KAAM,UAAWC,QAAS,IAAKN,SAAAA,IAE/D,OAAqB,IAAjBD,EAAMI,OACD,GAGY,IAAjBJ,EAAMI,OACDJ,EAAM,GAAGC,SAGX,CACL,CACEK,KAAM,OACN6G,SAAS,EACTxB,MAAO,KACPiB,OAAQD,EAAgB3G,GACxBC,SAAUD,GAGf,CCjHM,SAASoH,EAAGtH,EAAGoB,GACpB,OAAOpB,EAAEoB,EAAM,WAAYrB,EAAIC,EAAGoB,GACnC,CCDM,SAASmG,EAAQvH,EAAGoB,GAGzB,IAAMoG,EAAQhE,OAAOpC,EAAKX,QAAQgH,OAAO,KAAO,EAC1C5F,EAAO7B,EAAEiB,SAEfjB,EAAEiB,UAAW,EACb,IAAMP,EAASV,EAAEoB,EAAM,UAAW,CAACoG,MAAAA,GAAQzH,EAAIC,EAAGoB,IAGlD,OAFApB,EAAEiB,SAAWY,EAENnB,CACR,CCXM,SAASgH,EAAI1H,EAAGoB,GAGrB,IAAM+E,EAAQ/E,EAAKE,WACnB,OAAOtB,EAAEoB,EAAM,QAAS,CACtB4B,IAAKD,EAAQ/C,EAAGkD,OAAOiD,EAAMwB,KAAO,KAAO,MAC3CC,MAAOzB,EAAMyB,OAAS,KACtBC,IAAK1B,EAAM0B,KAAO,IAErB,CCTM,SAASC,GAAW9H,EAAGoB,GAC5B,OAAOpB,EAAEoB,EAAM,aAAcH,EAASjB,EAAGuE,EAAOnD,IACjD,C,gBCDK2G,IAASjE,EAAAA,EAAAA,GAAe,UAQvB,SAASkE,GAAoBhI,EAAGoB,EAAME,GAc3C,IAXA,IAAM6E,EAAQ7E,GAAcF,EAAKE,WAC7BoD,EAAUuD,GAAY7G,GACpB8G,EACJC,KAAKC,IAAI5E,OAAO6E,SAASnF,OAAOiD,EAAM+B,MAAO,IAAK,KACjD/B,EAAMmC,SAAW,EAAI,GACpBjI,GAAS,EAEPkI,EAAkB,GAElBnI,EAAS,KAENC,EAAQqE,EAAQpE,SACnBkI,EAAAA,GAAAA,GAAY9D,EAAQrE,GAAQ,aAC9BkI,EAAgBzH,KAAK4D,EAAQrE,IAQjC,IAHAqE,GADa6D,EAAgBjI,OAAS,EAAIiI,EAAkB7D,GAC7CuB,MAAM,EAAGiC,GACxB7H,GAAS,IAEAA,EAAQqE,EAAQpE,QAAQ,CAC/B,IAAMyH,EAASrD,EAAQrE,GACjBoI,EAAUxH,EAASjB,EAAGuE,EAAOwD,IAG7B5B,EAAQ4B,EAAOzG,WACfoH,EAAQD,GAAWvF,OAAOiD,EAAMuC,OAAS,IACzCxH,EAAQgC,OAAOiD,EAAMjF,OAAS,KAAOuH,EAC3CrI,EAAOU,KAAK,CAACI,EAAOwH,IAAUxH,EAAQ,KAAOwH,GAC9C,CAED,OAAOtI,CACR,CAKD,SAAS6H,GAAY7G,GAQnB,IAPA,IAKIb,EALEJ,EAAWiB,EAAKjB,SAClBE,GAAS,EAETmE,EAAU,KAILnE,EAAQF,EAASG,QACxBC,EAAQJ,EAASE,GAGbO,MAAMC,QAAQN,EAAMJ,YAEtBqE,EAAUA,EAAQjC,OAAO0F,GAAY1H,KAGnCwH,GAAOxH,MAAWiI,EAAAA,GAAAA,GAAYjI,EAAO,aACvCiE,EAAQ1D,KAAKP,GAIjB,OAAOiE,CACR,CCxED,IAAMmE,IAAW7E,EAAAA,EAAAA,GAAe,YCHhC,IAAMC,IAAID,EAAAA,EAAAA,GAAe,KACnB8E,IAAQ9E,EAAAA,EAAAA,GAAe,SAMtB,SAAS+E,GAAG7I,EAAGoB,GACpB,IAII0H,EAEAC,EANEhH,EAAOX,EAAKjB,SAAS,GAEvB6G,EAAU,KAOVjD,GAAEhC,KACJ+G,EAAW/G,EAAK5B,SAAS,GAGvByI,GAAME,IACNA,EAASxH,aACqB,aAA7BwH,EAASxH,WAAWd,MACU,UAA7BsI,EAASxH,WAAWd,QAEtBwG,EAAU7C,QAAQ2E,EAASxH,WAAW0F,SACtC+B,GAAQ,kBACH3H,GADA,IAEHjB,SAAU,EAAC,kBACL4B,GADE,IACI5B,SAAU4B,EAAK5B,SAAS8F,MAAM,MADlC,eAEH7E,EAAKjB,SAAS8F,MAAM,SAM/B,IAAMwC,EAAU3F,EAAa9C,EAAG+I,GAAS3H,GAEzC,OAAOpB,EAAEoB,EAAM,WAAY,CAAC0F,OAAQ2B,EAAQnI,OAAS,EAAG0G,QAAAA,GAAUyB,EACnE,CCxCD,IAAMO,IAAKlF,EAAAA,EAAAA,GAAe,MAMnB,SAASmF,GAAKjJ,EAAGoB,GACtB,IAAMiG,EAAU2B,GAAG5H,GACbjB,EAAW4G,EAAc/G,EAAGoB,GAE9ByE,EAAQ,KASZ,OAPIwB,IACFxB,GAAQ2C,EAAAA,GAAAA,GAAYpH,EAAM,SAEtBoC,OAAO6E,SAASnF,OAAO9B,EAAKE,WAAWuE,OAAQ,IAC/C,GAGC7F,EACLoB,EACA,OACA,CAACiG,QAAAA,EAASxB,MAAAA,EAAOiB,OAAQD,EAAgB1G,IACzCA,EAEH,C,2BCrBK+I,IAASpF,EAAAA,EAAAA,GAAe,UACxBqF,IAAQrF,EAAAA,EAAAA,GAAe,SAMtB,SAASsF,GAAMpJ,EAAGoB,GACvB,IAUIb,EAVAL,EAAQH,EAAIC,EAAGoB,GAGbE,EAAaF,EAAKE,WAClB+H,EAASF,GAAM/H,IAAS8B,OAAO5B,EAAW+H,QAAU,IACtD1B,EAAMzE,OAAO5B,EAAWqG,KAAO,IAC/BtH,GAAS,EAETiJ,GAAwB,EAO5B,IAHAC,EAAAA,EAAAA,IAAM,CAAC/I,KAAM,OAAQL,SAAUD,GAAQ,QAsCvC,WAEE,OADAoJ,GAAwB,EACjBE,GAAAA,EACR,IAtCGF,GAAyBtH,EAAW9B,GACtC,OAAOA,EAIT,MAAQyH,KAAStH,EAAQe,EAAKjB,SAASG,QACrCC,EAAQa,EAAKjB,SAASE,GAClB6I,GAAO3I,KAEToH,EAAMzE,OAAO3C,EAAMe,WAAWqG,KAAO,KAiBzC,OAZI0B,IACFnJ,EAAQ,CACN,CACEM,KAAM,QACNoH,MAAO,KACP5E,IAAKD,EAAQ/C,EAAGqJ,GAChBxB,KAAK4B,EAAAA,GAAAA,GAAS,CAACtJ,SAAUD,OAMxB,CACLM,KAAM,OAENoH,MAAOxG,EAAKE,WAAWsG,OAAS,KAChC5E,IAAKD,EAAQ/C,EAAG2H,GAEhBxH,SAAUD,EAOb,CCjEM,SAAS6D,GAAE/D,EAAGoB,GACnB,IAAMlB,EAAQH,EAAIC,EAAGoB,GAErB,GAAIlB,EAAMI,OAAS,EACjB,OAAON,EAAEoB,EAAM,YAAalB,EAE/B,CCNM,SAASwJ,GAAO1J,EAAGoB,GACxB,OAAOpB,EAAEoB,EAAM,SAAUrB,EAAIC,EAAGoB,GACjC,CCDM,SAASuI,GAAU3J,EAAGoB,GAC3B,IAAMS,EAAO7B,EAAEiB,SAEfjB,EAAEiB,UAAW,EAEb,IAAMP,EAASV,EAAEoB,EAAM,YAAarB,EAAIC,EAAGoB,IAE3C,GAAIA,EAAKE,aAAeF,EAAKE,WAAWsI,SAAWxI,EAAKE,WAAWuI,SAAU,CAC3E,IAAMC,EAAOpJ,EAAOoJ,OAASpJ,EAAOoJ,KAAO,CAAC,GACxC1I,EAAKE,WAAWsI,UAASE,EAAKF,QAAUxI,EAAKE,WAAWsI,SACxDxI,EAAKE,WAAWuI,UAASC,EAAKD,QAAUzI,EAAKE,WAAWuI,QAC7D,CAID,OAFA7J,EAAEiB,SAAWY,EAENnB,CACR,CCTD,IAAMqJ,IAAQjG,EAAAA,EAAAA,GAAe,SACvBkG,IAAKlG,EAAAA,EAAAA,GAAe,MACpBE,IAAOF,EAAAA,EAAAA,GAAe,CAAC,KAAM,OAqLnC,SAASmG,GAAQ9J,GASf,IAPA,IAGIiB,EAEAe,EAmBO,EAxBLjC,EAAQ,GACVG,GAAS,IAMJA,EAAQF,EAASG,QAGxB,GAAkB,eAFlBc,EAAOjB,EAASE,IAEPG,KAAsB,CAClB,MAAX,GAAI2B,GACF,EAAAf,EAAKjB,UAASoF,QAAd,gBAAyBpD,IACzBA,OAAQO,EAGVxC,EAAMY,KAAKM,EACZ,MACMe,IAAOA,EAAQ,IAEpBA,EAAMrB,KAAKM,GAIXe,KACFf,EAAOlB,EAAMA,EAAMI,OAAS,MAG1Bc,EAAO,CAACZ,KAAM,YAAaL,SAAU,IACrCD,EAAMY,KAAKM,KAGb,EAAAA,EAAKjB,UAASW,KAAd,gBAAsBqB,KAGxB,OAAOjC,CACR,CChNM,IAAMuB,GAAW,CACtByI,KCrBK,SAAclK,EAAGoB,GACtB,IAAIjB,EAAWJ,EAAIC,EAAGoB,GAMtB,OAJIpB,EAAEmK,UAAYnI,EAAW7B,MAC3BA,EAAW0B,EAAK1B,IAGXH,EAAEoB,EAAM,OAAQjB,EACxB,EDcCiK,KEvBK,SAAcpK,EAAGoB,GACtB,OAAOpB,EAAEoB,EAAM,OAAQH,EAASjB,EAAGoB,EAAKF,OACzC,EFsBCmJ,QGzBK,SAAiBrK,EAAGoB,GACzB,OAAOpB,EAAEoB,EAAM,OAAQ,UAASH,EAASjB,EAAGoB,EAAKF,OAAS,SAC3D,EHwBCoJ,QAASC,GAETC,OAAQD,GACRE,KAAMF,GACNG,SAAUH,GACVI,QAASJ,GACTK,QAASL,GACTM,IAAKN,GACLO,SAAUP,GACVQ,QAASR,GACT9B,QAAS8B,GACT5B,SAAU4B,GACVS,OAAQT,GACRU,QAASV,GACTW,MAAOX,GACPY,MAAOZ,GACPa,SAAUb,GACVc,QAASd,GACTe,OAAQf,GACRgB,KAAMhB,GACNiB,KAAMjB,GACNkB,KAAMlB,GACNmB,SAAUnB,GACV5D,KAAM4D,GACNoB,OAAQpB,GACRqB,QAASrB,GACTsB,SAAUtB,GACVuB,SAAUvB,GACVxC,OAAQwC,GACRwB,MAAOxB,GACPyB,OAAQzB,GACR0B,OAAQ1B,GACRrB,OAAQqB,GACR2B,OAAQ3B,GACR4B,MAAO5B,GACP6B,IAAK7B,GACL8B,SAAU9B,GACV3C,MAAO2C,GACP+B,MAAO/B,GAEPgC,KAAMxM,EACNyM,QAASzM,EACT0M,IAAK1M,EACL2M,IAAK3M,EACL4M,IAAK5M,EACL6M,MAAO7M,EACP8M,OAAQ9M,EACR+M,OAAQ/M,EACRgN,KAAMhN,EACN+J,KAAM/J,EACNiN,QAASjN,EACTkN,IAAKlN,EACLmN,KAAMnN,EACNoN,IAAKpN,EACL2I,MAAO3I,EACPqN,IAAKrN,EACLsN,QAAStN,EACTuN,MAAOvN,EACPwN,KAAMxN,EACNyN,SAAUzN,EACV0N,OAAQ1N,EACR2N,OAAQ3N,EACR4N,SAAU5N,EACV6N,GAAI7N,EACJ8N,IAAK9N,EACL+N,GAAI/N,EACJgO,GAAIhO,EACJiO,IAAKjO,EACLkO,KAAMlO,EACNmO,KAAMnO,EACNoO,MAAOpO,EACPqO,KAAMrO,EACNsO,IAAKtO,EACLuO,IAAKvO,EACLwO,MAAOxO,EACPyO,MAAOzO,EACPgK,MAAOhK,EACP0O,KAAM1O,EAEN2O,QAAS5L,EACT6L,QAAS7L,EACT8L,MAAO9L,EACP+L,KAAM/L,EACNgM,OAAQhM,EACRmE,IAAKnE,EACLiM,SAAUjM,EACVkM,WAAYlM,EACZmM,OAAQnM,EACRoM,KAAMpM,EACNqM,OAAQrM,EACRsM,OAAQtM,EACRuM,OAAQvM,EACRwM,KAAMxM,EACNyM,OAAQzM,EACR0M,KAAM1M,EACN2M,SAAU3M,EACV4M,IAAK5M,EACL6M,QAAS7M,EACT8M,QAAS9M,EAET+M,EI3HK,SAAW7P,EAAGoB,GAGnB,IAAM+E,EAAQ/E,EAAKE,WACnB,OAAOtB,EACLoB,EACA,OACA,CACEwG,MAAOzB,EAAMyB,OAAS,KACtB5E,IAAKD,EAAQ/C,EAAGkD,OAAOiD,EAAM2J,MAAQ,KAAO,OAE9C/P,EAAIC,EAAGoB,GAEV,EJ+GC2O,MAAO3G,GACP4G,EAAGtG,GACHuG,KKlIK,SAAcjQ,EAAGoB,GACjBpB,EAAEkQ,YACLlQ,EAAEiD,cACAC,OAAQ9B,EAAKE,YAAcF,EAAKE,WAAWwO,MAAS,KAAO,KAC7D9P,EAAEkQ,WAAY,EAEjB,EL6HCC,WMjIK,SAAoBnQ,EAAGoB,GAC5B,OAAOpB,EAAEoB,EAAM,aAAc0B,EAAa9C,EAAGoB,GAC9C,ENgICyC,GOpIK,SAAY7D,EAAGoB,GACpB,OAAOpB,EAAEiB,SAAWjB,EAAEoB,EAAM,SAAWpB,EAAEoB,EAAM,OAAQ,IACxD,EPmICmF,KAAMuB,GACNsI,IAAKnH,GACLoH,GdrHK,SAAYrQ,EAAGoB,GAepB,IAdA,IASIb,EAEAG,EAXEP,EAAWiB,EAAKjB,SAClBE,GAAS,EAETiQ,EAAQ,GAENC,EAAS,GAEXC,EAAQ,CAACC,OAAQ,GAAIC,YAAa,MAO7BrQ,EAAQF,EAASG,QACxBC,EAAQJ,EAASE,GACjBiQ,EAAQA,EAAM/N,OAAO0E,EAAI1G,GAASA,EAAMJ,SAAWI,GAMrD,IAHAF,GAAS,IAGAA,EAAQiQ,EAAMhQ,QACrBC,EAAQ+P,EAAMjQ,GAEV6G,EAAG3G,IACD4G,EAAGmJ,EAAMjQ,EAAQ,MACnBkQ,EAAOzP,KAAK0P,GACZA,EAAQ,CAACC,OAAQ,GAAIC,YAAa,KAGpCF,EAAMC,OAAO3P,KAAKP,IAElBiQ,EAAME,YAAY5P,KAAKP,GAI3BgQ,EAAOzP,KAAK0P,GAGZnQ,GAAS,EAIT,IAFA,IAAMoI,EAAU,KAEPpI,EAAQkQ,EAAOjQ,SACtBI,EAAS,GAAH,eACD0G,EAAOpH,EAAGuQ,EAAOlQ,GAAOoQ,UADvB,OAEDrJ,EAAOpH,EAAGuQ,EAAOlQ,GAAOqQ,gBAGlBpQ,OAAS,GAClBmI,EAAQ3H,KAAK,CACXN,KAAM,WACNsG,OAAQpG,EAAOJ,OAAS,EACxB0G,QAAS,KACT7G,SAAUO,IAMhB,GAAI+H,EAAQnI,OAAS,EACnB,OAAON,EACLoB,EACA,OACA,CAACiG,SAAS,EAAOxB,MAAO,KAAMiB,OAAQD,EAAgB4B,IACtDA,EAGL,EcgDCvB,GAAI2B,GACJ1B,GAAI0B,GACJjC,IAAAA,EACAU,GAAAA,EACAqJ,GAAIpJ,EACJqJ,GAAIrJ,EACJsJ,GAAItJ,EACJuJ,GAAIvJ,EACJwJ,GAAIxJ,EACJyJ,GAAIzJ,EACJ0J,GQlJK,SAAYjR,EAAGoB,GACpB,OAAOpB,EAAEoB,EAAM,gBAChB,ERiJC8P,EAAG5J,EACH6J,OShJK,SAAgBnR,EAAGoB,GAGxB,IAAM+E,EAAQ/E,EAAKE,WACbqG,EAAMzE,OAAOiD,EAAMwB,KAAO,IAC1BC,EAAQ1E,OAAOiD,EAAMyB,OAAS,IAMpC,GAAID,GAAOC,EACT,MAAO,CACLpH,KAAM,OACNoH,MAAO,KACP5E,IAAKD,EAAQ/C,EAAG2H,GAChBxH,SAAU,CAAC,CAACK,KAAM,OAAQU,MAAOD,EAASjB,EAAG4H,KAGlD,ET8HCF,IAAAA,EACA0J,MAAO1J,EACPkB,MR5IK,SAAe5I,EAAGoB,GAGvB,IAUI6H,EAVE9C,EAAQ/E,EAAKE,WACfJ,EAAQgC,OAAOiD,EAAMjF,OAASiF,EAAMkL,aAAe,IAEjD7M,EAAU,GAEV8M,EAAQ,GAEVlR,EAAS,GACTC,GAAS,EAIb,IAAI8F,EAAMoL,UAA2B,WAAfpL,EAAM3F,MAAoC,SAAf2F,EAAM3F,KAAvD,CAIA,GAAmB,aAAf2F,EAAM3F,MAAsC,UAAf2F,EAAM3F,KACrC,OAAOR,EACLoB,EACA,OACAH,EAASjB,EAAGA,EAAEmG,EAAMa,QAAU,UAAY,eAI9C,GAAmB,UAAfb,EAAM3F,KACR,OAAO2F,EAAM0B,KAAO3G,EAChBlB,EAAEoB,EAAM,QAAS,CACf4B,IAAKD,EAAQ/C,EAAGkD,OAAOiD,EAAMwB,KAAO,KAAO,MAC3CC,MAAO3G,EAASjB,EAAGkD,OAAOiD,EAAMyB,OAAS,MAAQ,KACjDC,IAAK5G,EAASjB,EAAGkD,OAAOiD,EAAM0B,KAAO3G,MAEvC,GAqBN,GAlBIA,EACFd,EAAS,CAAC,CAACc,EAAO,OAGH,aAAfiF,EAAM3F,MACS,SAAf2F,EAAM3F,MACS,WAAf2F,EAAM3F,MACS,UAAf2F,EAAM3F,MACS,WAAf2F,EAAM3F,MACN2F,EAAM8C,OAENA,EAAO/F,OAAOiD,EAAM8C,MAAMuI,cAEtBzQ,EAAIS,KAAKxB,EAAEyR,SAAUxI,IAASN,GAAS3I,EAAEyR,SAASxI,MACpD7I,EAAS4H,GAAoBhI,EAAGA,EAAEyR,SAASxI,GAAO9C,KAIhC,IAAlB/F,EAAOE,OAAX,CAUA,GALmB,aAAf6F,EAAM3F,OAERJ,EAAO,GAAK,CAAC,SAAI8E,OAAO9E,EAAO,GAAG,GAAGE,QAAS,OAG7B,QAAf6F,EAAM3F,MAAiC,UAAf2F,EAAM3F,KAAkB,CAClD,OAASH,EAAQD,EAAOE,QACtBY,EAAQ6B,EAAQ/C,EAAGI,EAAOC,GAAO,IAEjCmE,EAAQ1D,KACNd,EACEoB,EACA,OACA,CACEwG,MAAO,KACP5E,IAAK/B,EAASjB,EAAkB,UAAfmG,EAAM3F,KAAmB,UAAYU,EAAQA,IAEhE,CAAC,CAACV,KAAM,OAAQU,MAAOD,EAASjB,EAAGI,EAAOC,GAAO,IAAMa,OAIvDb,IAAUD,EAAOE,OAAS,GAC5BkE,EAAQ1D,KAAK,CAACN,KAAM,OAAQU,MAAO,OAIvC,OAAOsD,CACR,CAED,OAASnE,EAAQD,EAAOE,QACtBgR,EAAMxQ,KACJV,EAAOC,GAAO,GACVD,EAAOC,GAAO,GAAK,KAAOD,EAAOC,GAAO,GAAK,IAC7CD,EAAOC,GAAO,IAItB,OAAOL,EAAEoB,EAAM,OAAQH,EAASjB,EAAGsR,EAAMnM,KAAK,OAxC7C,CAxCA,CAiFF,EQ2CCuM,IAAK5J,GACLe,GAAAA,GACA8I,QAASpL,EACTqL,KAAMtK,EACN0B,GAAIC,GACJlF,EAAAA,GACA8N,UAAWtL,EACXF,IAAKE,EACLuL,EU7JK,SAAW9R,EAAGoB,GACnB,IAAM2Q,EAAW/R,EAAEgS,OAAOhS,EAAEiS,SAAWjS,EAAEgS,OAAO1R,QAEhDN,EAAEiS,WACF,IAAMC,EAAWnS,EAAIC,EAAGoB,GAUxB,OATApB,EAAEiS,WAEFC,EAAS3M,QAAQ,CAAC/E,KAAM,OAAQU,MAAO6Q,EAAStK,OAAO,KAEvDyK,EAASpR,KAAK,CACZN,KAAM,OACNU,MAAO6Q,EAASzR,OAAS,EAAIyR,EAAStK,OAAO,GAAKsK,IAG7CG,CACR,EV+ICC,EAAGvL,EACHwL,KAAMtK,GACNuK,OWhKK,SAAgBrS,EAAGoB,GAQxB,IAPA,IAKIF,EALEd,EAAS4H,GAAoBhI,EAAGoB,GAClCf,GAAS,EAEPmE,EAAU,KAIPnE,EAAQD,EAAOE,QACtBY,EAAQd,EAAOC,GACfmE,EAAQ1D,KAAKI,EAAM,GAAKA,EAAM,GAAK,KAAOA,EAAM,GAAK,IAAMA,EAAM,IAGnE,GAAIsD,EAAQlE,OAAS,EACnB,OAAON,EAAEoB,EAAM,OAAQH,EAASjB,EAAGwE,EAAQW,KAAK,OAEnD,EXiJCmN,OAAQ1L,EACR8C,OAAAA,GACA6I,QAASxO,GACTyO,MDrJK,SAAexS,EAAGoB,GACvB,GAAIpB,EAAEyS,QACJ,OAAOzS,EAAEoB,EAAM,OAAQH,EAASjB,EAAGuE,EAAOnD,KAG5CpB,EAAEyS,SAAU,EAOZ,IALA,MA8EF,SAAiBrR,GACf,IAAIsR,GAAW,EACXC,EAAW,EACXC,EAAY,EAEVC,EAAQ,CAAC,MA2Bf,OAzBAtJ,EAAAA,EAAAA,IAAMnI,EAAM,WAAW,SAACb,GACtB,GAAsB,UAAlBA,EAAME,SAAuBW,IAASb,EACxC,OAAOuS,GAAAA,GAIL9O,GAAKzD,IAAUA,EAAMe,YAClBuR,EAAMD,KACTC,EAAMD,GAAa1P,OAAO3C,EAAMe,WAAWuR,OAAS,KAAO,MAIzDH,GAAYC,EAAW,GAAuB,OAAlBpS,EAAME,UACpCiS,GAAW,GAGbE,KACS7I,GAAMxJ,GACfmS,GAAW,EACF1I,GAAGzJ,KACZoS,IACAC,EAAY,EAEf,IAEM,CAACC,MAAAA,EAAOH,SAAAA,EAChB,CA/G2BK,CAAQ3R,GAA3BsR,EAAP,EAAOA,SAAUG,EAAjB,EAAiBA,MACXG,EAuHR,SAAgB7S,EAAUuS,GACxB,IAIIvQ,EAwBO,EA5BP9B,GAAS,EAEPH,EAAQ,GAKVwS,GACFxS,EAAMY,KAAK,CAACN,KAAM,WAAYL,SAAU,KAG1C,OAASE,EAAQF,EAASG,QAAQ,CAChC,IAAMc,EAAOjB,EAASE,GAEtB,GAAkB,aAAde,EAAKZ,KAAqB,CACjB,MAAX,GAAI2B,GACF,EAAAf,EAAKjB,UAASoF,QAAd,gBAAyBpD,IACzBA,OAAQO,EAGVxC,EAAMY,KAAKM,EACZ,MACMe,IAAOA,EAAQ,IAEpBA,EAAMrB,KAAKM,EAEd,CAEGe,IACF,EAAAjC,EAAMA,EAAMI,OAAS,GAAGH,UAASW,KAAjC,gBAAyCqB,IAG3C9B,GAAS,EAET,OAASA,EAAQH,EAAMI,QACrBJ,EAAMG,GAAOF,SAAW8J,GAAQ/J,EAAMG,GAAOF,UAG/C,OAAOD,CACR,CA/Jc+S,CAAOlT,EAAIC,EAAGoB,GAAOsR,GAC9BQ,EAAU,EACVP,GAAY,IAEPA,EAAWK,EAAK1S,QAAQ,CAI/B,IAHA,IAAM6S,EAAQH,EAAKL,GAAUxS,SACzByS,GAAa,IAERA,EAAYO,EAAM7S,QAAQ,CACjC,IAAM0D,EAAOmP,EAAMP,GAEnB,GAAI5O,EAAK8F,KAAM,CACb,IAAMD,EAAUrG,OAAO6E,SAASnF,OAAOc,EAAK8F,KAAKD,SAAU,KAAO,EAC5DD,EAAUpG,OAAO6E,SAASnF,OAAOc,EAAK8F,KAAKF,SAAU,KAAO,EAElE,GAAIC,EAAU,GAAKD,EAAU,EAG3B,IAFA,IAAIwJ,EAAgBT,EAAW,IAEtBS,EAAgBT,EAAW/I,GAGlC,IAFA,IAAIyJ,EAAWT,EAAY,IAElBS,EAAWT,EAAY/I,GAAS,OACvC,IAAKmJ,EAAKI,GAGR,MAIF,IAAME,EAAW,GAEbF,IAAkBT,GAAYU,IAAaT,GAC7CU,EAASxS,KAAK,CAACN,KAAM,YAAaL,SAAU,MAG9C,EAAA6S,EAAKI,GAAejT,UAASoT,OAA7B,SAAoCF,EAAU,GAA9C,OAAoDC,GACrD,CAKD,YAAatP,EAAK8F,aAAa9F,EAAK8F,KAAKD,QACzC,YAAa7F,EAAK8F,aAAa9F,EAAK8F,KAAKF,QACP,IAAlC4J,OAAOC,KAAKzP,EAAK8F,MAAMxJ,eAAqB0D,EAAK8F,IACtD,CACF,CAEGqJ,EAAM7S,OAAS4S,IAASA,EAAUC,EAAM7S,OAC7C,CAKD,IAFAqS,GAAY,IAEHA,EAAWK,EAAK1S,QAGvB,IAFA,IAAM6S,EAAQH,EAAKL,GAAUxS,SACzByS,EAAYO,EAAM7S,OAAS,IACtBsS,EAAYM,GACnBC,EAAMrS,KAAK,CAACN,KAAM,YAAaL,SAAU,KAK7C,IADA,IAAIuT,EAAab,EAAMvS,OAAS,IACvBoT,EAAaR,GACpBL,EAAM/R,KAAK,MAKb,OAFAd,EAAEyS,SAAU,EAELzS,EAAEoB,EAAM,QAAS,CAACyR,MAAAA,GAAQG,EAClC,ECyECW,GAAIhK,GACJiK,SYtKK,SAAkB5T,EAAGoB,GAC1B,OAAOpB,EAAEoB,EAAM,OAAQH,EAASjB,EAAGuE,EAAOnD,IAC3C,EZqKCyS,GAAIlK,GACJK,GazKK,SAAkBhK,EAAGoB,GAC1B,OAAOpB,EAAEoB,EAAM,WAAYrB,EAAIC,EAAGoB,GACnC,EbwKC0S,GAAIhM,GACJiM,EAAGzM,EACH0M,GAAI/K,GACJgL,IAAKnM,GACLqB,MAAOC,GACP8K,IcjLK,SAAalU,EAAGoB,GACrB,OAAOpB,EAAEoB,EAAM,OAAQ,SACxB,EdgLC+S,IAAK5N,GAGP,SAASgE,KAAW,CetKpB,IAAM5F,IAAQ/C,EAAAA,EAAAA,GAAQ,CAAC,UAAW,YAAa,SAMxC,SAASwS,GAAQC,GAAoB,IAItCC,EAJwB5P,EAAc,uDAAJ,CAAC,EAEjC6P,EAAO,CAAC,EAORvU,EAAIwT,OAAOgB,QAWb,SAACpT,EAAMZ,EAAM2F,EAAOhG,GAElB,IAAImB,EAEiB,kBAAV6E,GAAsBvF,MAAMC,QAAQsF,IAC7ChG,EAAWgG,EACX7E,EAAa,CAAC,GAEdA,EAAa6E,EAKf,IAAMzF,GAAS,QAACF,KAAAA,GAASc,GAczB,MAZwB,kBAAbnB,EAETO,EAAOQ,MAAQf,EACNA,IAETO,EAAOP,SAAWA,GAGhBiB,EAAKqT,WACP/T,EAAO+T,SAAWrT,EAAKqT,UAGlB/T,CACR,GAEH,CACE+Q,SAAU8C,EACVrE,WAAW,EACXuC,SAAS,EACTxR,UAAU,EAEVgC,cAAe,KACfgP,SAAU,EACVxQ,SAAUiD,EAAQjD,UAAR,kBACFA,IAAaiD,EAAQjD,UACzBA,GACJ0I,SAAUzF,EAAQyF,SAClBnD,QAAStC,EAAQsC,SAAW,MAC5B0N,UAAWhQ,EAAQgQ,WAAa,MAChC1C,OAAQtN,EAAQsN,QAAU,CAAC,QAI/BzI,EAAAA,EAAAA,IAAM8K,EAAM,WAAW,SAACjT,GACtB,IAAMuT,EACJvT,EAAKE,YACL,OAAQF,EAAKE,YACb4B,OAAO9B,EAAKE,WAAWqT,IAAInD,cAEzBmD,IAAO5T,EAAIS,KAAK+S,EAAMI,KACxBJ,EAAKI,GAAMvT,EAEd,KAGDwT,EAAAA,EAAAA,GAAuB,CAACC,UAA+B,IAArBnQ,EAAQmQ,UAA1CD,CAA8DP,GAE9D,IAAM3T,EAASC,EAAIX,EAAGqU,OAAM3R,GAY5B,OAPE4R,EAHG5T,EAEME,MAAMC,QAAQH,GACf,CAACF,KAAM,OAAQL,SAAUO,GAEzBA,EAJA,CAACF,KAAM,OAAQL,SAAU,KAOnCoJ,EAAAA,EAAAA,IAAM+K,EAAO,OAAQQ,GAEdR,EAWP,SAASQ,EAAO1T,EAAMf,EAAOJ,GAE3B,GAAc,OAAVI,GAAmBJ,EAAvB,CAIA,IAAM8U,EAAW9U,EAAOE,SAASE,EAAQ,GAEzC,OAAI0U,GAAYA,EAASvU,OAASY,EAAKZ,MACrCuU,EAAS7T,OAASE,EAAKF,MACvBjB,EAAOE,SAASoT,OAAOlT,EAAO,GAE1B0U,EAASN,UAAYrT,EAAKqT,WAC5BM,EAASN,SAAS9O,IAAMvE,EAAKqT,SAAS9O,KAIjCtF,EAAQ,IAGjBe,EAAKF,MAAQE,EAAKF,MAAMC,QAAQ,yBAA0B,MAItDlB,GAAU0E,GAAM1E,KACbI,IACHe,EAAKF,MAAQE,EAAKF,MAAMC,QAAQ,UAAW,KAGzCd,IAAUJ,EAAOE,SAASG,OAAS,IACrCc,EAAKF,MAAQE,EAAKF,MAAMC,QAAQ,UAAW,MAI1CC,EAAKF,WAAV,GACEjB,EAAOE,SAASoT,OAAOlT,EAAO,GACvBA,GAhCR,CAkCF,CACF,CCxJD,IA8BA,GArBI,SAAU2U,EAAatQ,GAErB,IAAIuQ,EAEAC,EAaJ,MAX2B,oBAAhBF,GACTE,EAAYF,EACZC,EAAWvQ,GAAW,CAAC,GAEvBuQ,EAAWD,GAAe,CAAC,OAGHtS,IAAtBuS,EAAS9K,UAAgD,OAAtB8K,EAAS9K,WAC9C8K,EAAWzB,OAAOgB,OAAO,CAAC,EAAGS,EAAU,CAAC9K,UAAU,KAG7C+K,EAYb,SAAgBF,EAAatQ,GAC3B,OAAO,SAACtD,EAAM+T,EAAMC,GAClBJ,EAAYK,IAAIjB,GAAQhT,EAAMsD,GAAUyQ,GAAM,SAACG,GAC7CF,EAAKE,EACN,GACF,CACF,CAlBwBC,CAAOL,EAAWD,GA0B3C,WAA8B,IAAdvQ,EAAc,uDAAJ,CAAC,EACzB,OAAO,SAACtD,GAEN,OADyCgT,GAAQhT,EAAMsD,EAExD,CACF,CA/BsD8Q,CAAOP,EACzD,C,gFCvCE,SAASQ,EAAUxF,EAAMyF,GAC9B,IAEIC,EAFAtV,GAAS,EAKb,GAAIqV,EAAUE,WACZ,OAASvV,EAAQqV,EAAUE,WAAWtV,QACpCmV,EAAUxF,EAAMyF,EAAUE,WAAWvV,IAIzC,IAAKsV,KAAOD,EACE,eAARC,IAEe,WAARA,GAA4B,SAARA,EAG7B1F,EAAK0F,GAAL,kBAAiB1F,EAAK0F,IAAQ,KAA9B,OAAuCD,EAAUC,IAAQ,KACxC,aAARA,EACT1F,EAAK0F,GAAOnC,OAAOgB,OAAOvE,EAAK0F,GAAMD,EAAUC,IAAQ,CAAC,GAGxD1F,EAAKvL,QAAQiR,GAAOD,EAAUC,IAIlC,OAAO1F,CACR,C,mCCVD,SAAS7C,EAAIyI,EAAMC,EAAGC,GACpB,MAAO,KAAOA,EAAQ,GAAK,KAAOF,CACnC,C,eCnBM,SAASG,EAAUF,EAAGG,EAAIC,EAASC,GAGxC,IAFA,IAAI9V,GAAS,IAEJA,EAAQ6V,EAAQE,OAAO9V,QAG9B,GACsC,OAApC4V,EAAQE,OAAO/V,GAAOgW,YACtBC,EAAAA,EAAAA,GAAeJ,EAAQK,MAAOL,EAAQE,OAAO/V,IAE7C,MAAO,QAAQgD,KAAK8S,EAAKK,QAAU,GAAK,IAI5C,MAAO,MACR,C,eChBM,SAASC,EAAqBrV,EAAM8U,GACzC,OAAO/R,SACJ+R,EAAQxR,QAAQgS,QACftV,EAAKF,QAEJE,EAAKqF,MAEN,WAAWpD,KAAKjC,EAAKF,SAEpB,0CAA0CmC,KAAKjC,EAAKF,OAE1D,C,eCqDD,SAASkM,EAAIyI,EAAMC,EAAGC,GACpB,OAAQA,EAAQ,GAAK,QAAUF,CAChC,C,eCnEM,SAASc,EAAWT,GACzB,IAAMU,EAASV,EAAQxR,QAAQmS,OAAS,IAExC,GAAe,MAAXD,GAA6B,MAAXA,EACpB,MAAM,IAAIrT,MACR,gCACEqT,EACA,gDAIN,OAAOA,CACR,C,eCFM,SAASE,EAAS1V,EAAM0U,EAAGI,EAASa,GACzC,IAAMH,ECXD,SAAuBV,GAC5B,IAAMU,EAASV,EAAQxR,QAAQoS,UAAY,IAE3C,GAAe,MAAXF,GAA6B,MAAXA,EACpB,MAAM,IAAIrT,MACR,mCACEqT,EACA,kDAIN,OAAOA,CACR,CDDgBI,CAAcd,GACvBe,EAAOf,EAAQgB,MAAM,YACrBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAKR,GAUzB,OATA1V,GAASiW,EAAQC,MACfC,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QACfM,OAAQtV,EACRoW,MAAOV,GACJO,EAAQI,aAGfrW,GAASiW,EAAQC,KAAKR,GACtBK,IACO/V,CACR,CAzBD4V,EAASU,KA+BT,SAAsB1B,EAAGG,EAAIC,GAC3B,OAAOA,EAAQxR,QAAQoS,UAAY,GACpC,E,mCE7BM,SAASW,EAAsBrW,EAAM8U,GAC1C,IAAIwB,GAAmB,EAcvB,OAVAnO,EAAAA,EAAAA,IAAMnI,GAAM,SAACA,GACX,GACG,UAAWA,GAAQ,WAAWiC,KAAKjC,EAAKF,QAC3B,UAAdE,EAAKZ,KAGL,OADAkX,GAAmB,EACZlO,EAAAA,EAEV,IAEMrF,UACH/C,EAAKoG,OAASpG,EAAKoG,MAAQ,KAC3BiC,EAAAA,EAAAA,GAASrI,KACR8U,EAAQxR,QAAQiT,QAAUD,GAEhC,CCtBM,SAASpI,EAAKlO,GACnB,OAAOA,EAAKF,OAAS,EACtB,CCEM,SAASkQ,EAAMhQ,EAAM0U,EAAGI,EAASa,GACtC,IAAMF,EAAQF,EAAWT,GACnB7Q,EAAmB,MAAVwR,EAAgB,QAAU,aACnCI,EAAOf,EAAQgB,MAAM,SACvBU,EAAU1B,EAAQgB,MAAM,SACtBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAK,MAmDzB,OAlDAlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKyG,KAAf,QAAqB2O,OAAQtV,EAAOoW,MAAO,KAAQH,EAAQI,aAEjErW,GAASiW,EAAQC,KAAK,MAEtBQ,KAIIxW,EAAK4B,KAAO5B,EAAKwG,OAEnB,eAAevE,KAAKjC,EAAK4B,MAEzB4U,EAAU1B,EAAQgB,MAAM,sBACxBhW,GAASiW,EAAQC,KAAK,KACtBlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QAAqBwT,OAAQtV,EAAOoW,MAAO,KAAQH,EAAQI,aAEjErW,GAASiW,EAAQC,KAAK,OAGtBQ,EAAU1B,EAAQgB,MAAM,kBACxBhW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QACFwT,OAAQtV,EACRoW,MAAOlW,EAAKwG,MAAQ,IAAM,KACvBuP,EAAQI,cAKjBK,IAEIxW,EAAKwG,QACPgQ,EAAU1B,EAAQgB,MAAM,QAAU7R,GAClCnE,GAASiW,EAAQC,KAAK,IAAMP,GAC5B3V,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKwG,OAAf,QACF4O,OAAQtV,EACRoW,MAAOT,GACJM,EAAQI,aAGfrW,GAASiW,EAAQC,KAAKP,GACtBe,KAGF1W,GAASiW,EAAQC,KAAK,KACtBH,IAEO/V,CACR,CC1DM,SAAS2W,EAAezW,EAAM0U,EAAGI,EAASa,GAC/C,IAAMvW,EAAOY,EAAK0W,cACZb,EAAOf,EAAQgB,MAAM,kBACvBU,EAAU1B,EAAQgB,MAAM,SACtBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAK,MACnBvP,GAAMsO,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKyG,KAAf,QACd2O,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,YAEbrW,GAASiW,EAAQC,KAAKvP,EAAM,MAE5B+P,IAEA,IAAMrB,EAAQL,EAAQK,MACtBL,EAAQK,MAAQ,GAChBqB,EAAU1B,EAAQgB,MAAM,aAKxB,IAAMa,GAAY5B,EAAAA,EAAAA,GAAKD,GAAS8B,EAAAA,EAAAA,GAAY5W,IAAtB,QACpBoV,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,YAeb,OAbAK,IACA1B,EAAQK,MAAQA,EAChBU,IAEa,SAATzW,GAAoBqH,GAAOA,IAAQkQ,EAEnB,aAATvX,EAETU,EAAQA,EAAM+E,MAAM,GAAI,GAExB/E,GAASiW,EAAQC,KAAK,KALtBlW,GAASiW,EAAQC,KAAKW,EAAY,KAQ7B7W,CACR,CFnDDoO,EAAKkI,KAaL,WACE,MAAO,GACR,ECXDpG,EAAMoG,KAqEN,WACE,MAAO,GACR,ECvEDK,EAAeL,KAoDf,WACE,MAAO,GACR,E,eCnDM,SAASS,EAAqB7W,EAAM8U,GACzC,IAAMgC,GAAMzO,EAAAA,EAAAA,GAASrI,GAErB,OAAO+C,SACJ+R,EAAQxR,QAAQyT,cAEf/W,EAAK4B,MAEJ5B,EAAKwG,OAENxG,EAAKjB,UACoB,IAAzBiB,EAAKjB,SAASG,QACY,SAA1Bc,EAAKjB,SAAS,GAAGK,OAEhB0X,IAAQ9W,EAAK4B,KAAO,UAAYkV,IAAQ9W,EAAK4B,MAE9C,oBAAoBK,KAAKjC,EAAK4B,OAG7B,iBAAiBK,KAAKjC,EAAK4B,KAEjC,CCfM,SAASuI,EAAKnK,EAAM0U,EAAGI,EAASa,GACrC,IAIIE,EAEAW,EANEf,EAAQF,EAAWT,GACnB7Q,EAAmB,MAAVwR,EAAgB,QAAU,aACnCM,GAAU7K,EAAAA,EAAAA,GAAMyK,GAMtB,GAAIkB,EAAqB7W,EAAM8U,GAAU,CAEvC,IAAMK,EAAQL,EAAQK,MACtBL,EAAQK,MAAQ,GAChBU,EAAOf,EAAQgB,MAAM,YACrB,IAAIhW,EAAQiW,EAAQC,KAAK,KAWzB,OAVAlW,GAASiW,EAAQC,MACfC,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QACfM,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,aAGfrW,GAASiW,EAAQC,KAAK,KACtBH,IACAf,EAAQK,MAAQA,EACTrV,CACR,CAED+V,EAAOf,EAAQgB,MAAM,QACrBU,EAAU1B,EAAQgB,MAAM,SACxB,IAAIhW,EAAQiW,EAAQC,KAAK,KAsDzB,OArDAlW,GAASiW,EAAQC,MACfC,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QACfM,OAAQtV,EACRoW,MAAO,MACJH,EAAQI,aAGfrW,GAASiW,EAAQC,KAAK,MACtBQ,KAIIxW,EAAK4B,KAAO5B,EAAKwG,OAEnB,eAAevE,KAAKjC,EAAK4B,MAEzB4U,EAAU1B,EAAQgB,MAAM,sBACxBhW,GAASiW,EAAQC,KAAK,KACtBlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QAAqBwT,OAAQtV,EAAOoW,MAAO,KAAQH,EAAQI,aAEjErW,GAASiW,EAAQC,KAAK,OAGtBQ,EAAU1B,EAAQgB,MAAM,kBACxBhW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QACFwT,OAAQtV,EACRoW,MAAOlW,EAAKwG,MAAQ,IAAM,KACvBuP,EAAQI,cAKjBK,IAEIxW,EAAKwG,QACPgQ,EAAU1B,EAAQgB,MAAM,QAAU7R,GAClCnE,GAASiW,EAAQC,KAAK,IAAMP,GAC5B3V,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKwG,OAAf,QACF4O,OAAQtV,EACRoW,MAAOT,GACJM,EAAQI,aAGfrW,GAASiW,EAAQC,KAAKP,GACtBe,KAGF1W,GAASiW,EAAQC,KAAK,KAEtBH,IACO/V,CACR,CCvFM,SAASkX,EAAchX,EAAM0U,EAAGI,EAASa,GAC9C,IAAMvW,EAAOY,EAAK0W,cACZb,EAAOf,EAAQgB,MAAM,iBACvBU,EAAU1B,EAAQgB,MAAM,SACtBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAK,KACnBhN,GAAOiN,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QAC5BM,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,YAEbrW,GAASiW,EAAQC,KAAKhN,EAAO,MAE7BwN,IAEA,IAAMrB,EAAQL,EAAQK,MACtBL,EAAQK,MAAQ,GAChBqB,EAAU1B,EAAQgB,MAAM,aAKxB,IAAMa,GAAY5B,EAAAA,EAAAA,GAAKD,GAAS8B,EAAAA,EAAAA,GAAY5W,IAAtB,QACpBoV,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,YAeb,OAbAK,IACA1B,EAAQK,MAAQA,EAChBU,IAEa,SAATzW,GAAoB4J,GAAQA,IAAS2N,EAErB,aAATvX,EAETU,EAAQA,EAAM+E,MAAM,GAAI,GAExB/E,GAASiW,EAAQC,KAAK,KALtBlW,GAASiW,EAAQC,KAAKW,EAAY,KAQ7B7W,CACR,CD7CDqK,EAAKiM,KAiGL,SAAkBpW,EAAM0U,EAAGI,GACzB,OAAO+B,EAAqB7W,EAAM8U,GAAW,IAAM,GACpD,ECrGDkC,EAAcZ,KAoDd,WACE,MAAO,GACR,E,eCvDM,SAASa,EAAmBnC,GACjC,IAAMU,EAASV,EAAQxR,QAAQ4T,eAAiB,IAEhD,GAAe,MAAX1B,GAA6B,MAAXA,EACpB,MAAM,IAAIrT,MACR,gCACEqT,EACA,sDAIN,OAAOA,CACR,CCZM,SAAS2B,EAAUrC,GACxB,IAAMU,EAASV,EAAQxR,QAAQ8T,MAAQ,IAEvC,GAAe,MAAX5B,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAIrT,MACR,gCACEqT,EACA,mDAIN,OAAOA,CACR,C,eCFM,SAASlN,EAAOtI,EAAM0U,EAAGI,EAASa,GACvC,IAAMH,ECXD,SAAqBV,GAC1B,IAAMU,EAASV,EAAQxR,QAAQgF,QAAU,IAEzC,GAAe,MAAXkN,GAA6B,MAAXA,EACpB,MAAM,IAAIrT,MACR,iCACEqT,EACA,gDAIN,OAAOA,CACR,CDDgB6B,CAAYvC,GACrBe,EAAOf,EAAQgB,MAAM,UACrBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAKR,EAASA,GAUlC,OATA1V,GAASiW,EAAQC,MACfC,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QACfM,OAAQtV,EACRoW,MAAOV,GACJO,EAAQI,aAGfrW,GAASiW,EAAQC,KAAKR,EAASA,GAC/BK,IACO/V,CACR,CAzBDwI,EAAO8N,KA+BP,SAAoB1B,EAAGG,EAAIC,GACzB,OAAOA,EAAQxR,QAAQgF,QAAU,GAClC,EEtBM,IAAMtC,EAAS,CACpB+I,WlBPK,SAAoB/O,EAAM0U,EAAGI,EAASa,GAC3C,IAAME,EAAOf,EAAQgB,MAAM,cACrBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GACtBI,EAAQC,KAAK,MACbD,EAAQuB,MAAM,GACd,IAAMxX,GAAQyX,EAAAA,EAAAA,IACZC,EAAAA,EAAAA,GAAcxX,EAAM8U,EAASiB,EAAQI,WACrCnK,GAGF,OADA6J,IACO/V,CACR,EkBHC2X,MAAO7C,EACPzP,KfLK,SAAcnF,EAAM0U,EAAGI,EAASa,GACrC,IAAMH,EgBVD,SAAoBV,GACzB,IAAMU,EAASV,EAAQxR,QAAQoU,OAAS,IAExC,GAAe,MAAXlC,GAA6B,MAAXA,EACpB,MAAM,IAAIrT,MACR,+BACEqT,EACA,kDAIN,OAAOA,CACR,ChBFgBmC,CAAW7C,GACpBgC,EAAM9W,EAAKF,OAAS,GACpBmE,EAAoB,MAAXuR,EAAiB,cAAgB,QAEhD,GAAIH,EAAqBrV,EAAM8U,GAAU,CACvC,IAAMe,EAAOf,EAAQgB,MAAM,gBACrBhW,GAAQyX,EAAAA,EAAAA,GAAYT,EAAK9K,GAE/B,OADA6J,IACO/V,CACR,CAED,IAAMiW,GAAU7K,EAAAA,EAAAA,GAAMyK,GAChBiC,EAAWpC,EAAO1R,OAAOiD,KAAK8Q,IiBrB/B,SAAuB/X,EAAOmV,GACnC,IAAMnN,EAAShG,OAAOhC,GAClBb,EAAQ6I,EAAOxF,QAAQ2S,GACvBtE,EAAW1R,EACXoE,EAAQ,EACRwU,EAAM,EAEV,GAAyB,kBAAd5C,GAA+C,IAArBA,EAAU/V,OAC7C,MAAM,IAAIiD,MAAM,sBAGlB,MAAkB,IAAXlD,GACDA,IAAU0R,IACNtN,EAAQwU,IACZA,EAAMxU,GAGRA,EAAQ,EAGVsN,EAAW1R,EAAQ,EACnBA,EAAQ6I,EAAOxF,QAAQ2S,EAAWtE,GAGpC,OAAOkH,CACR,CjBJyCC,CAAchB,EAAKtB,GAAU,EAAG,IAClEK,EAAOf,EAAQgB,MAAM,cACvBhW,EAAQiW,EAAQC,KAAK4B,GAEzB,GAAI5X,EAAKqF,KAAM,CACb,IAAMmR,EAAU1B,EAAQgB,MAAM,iBAAmB7R,GACjDnE,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKqF,MAAf,QACF+P,OAAQtV,EACRoW,MAAO,IACP6B,OAAQ,CAAC,MACNhC,EAAQI,aAGfK,GACD,CAED,GAAIxW,EAAKqF,MAAQrF,EAAKuF,KAAM,CAC1B,IAAMiR,EAAU1B,EAAQgB,MAAM,iBAAmB7R,GACjDnE,GAASiW,EAAQC,KAAK,KACtBlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKuF,MAAf,QACF6P,OAAQtV,EACRoW,MAAO,KACP6B,OAAQ,CAAC,MACNhC,EAAQI,aAGfK,GACD,CAUD,OARA1W,GAASiW,EAAQC,KAAK,MAElBc,IACFhX,GAASiW,EAAQC,KAAKc,EAAM,OAG9BhX,GAASiW,EAAQC,KAAK4B,GACtB/B,IACO/V,CACR,Ee/CCkY,WGVK,SAAoBhY,EAAM0U,EAAGI,EAASa,GAC3C,IAAMF,EAAQF,EAAWT,GACnB7Q,EAAmB,MAAVwR,EAAgB,QAAU,aACnCI,EAAOf,EAAQgB,MAAM,cACvBU,EAAU1B,EAAQgB,MAAM,SACtBC,GAAU7K,EAAAA,EAAAA,GAAMyK,GAClB7V,EAAQiW,EAAQC,KAAK,KAsDzB,OArDAlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,GAAS8B,EAAAA,EAAAA,GAAY5W,IAAtB,QACFoV,OAAQtV,EACRoW,MAAO,KACJH,EAAQI,aAGfrW,GAASiW,EAAQC,KAAK,OAEtBQ,KAIGxW,EAAK4B,KAEN,eAAeK,KAAKjC,EAAK4B,MAEzB4U,EAAU1B,EAAQgB,MAAM,sBACxBhW,GAASiW,EAAQC,KAAK,KACtBlW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QAAqBwT,OAAQtV,EAAOoW,MAAO,KAAQH,EAAQI,aAEjErW,GAASiW,EAAQC,KAAK,OAGtBQ,EAAU1B,EAAQgB,MAAM,kBACxBhW,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAK4B,KAAf,QACFwT,OAAQtV,EACRoW,MAAOlW,EAAKwG,MAAQ,IAAM,MACvBuP,EAAQI,cAKjBK,IAEIxW,EAAKwG,QACPgQ,EAAU1B,EAAQgB,MAAM,QAAU7R,GAClCnE,GAASiW,EAAQC,KAAK,IAAMP,GAC5B3V,GAASiW,EAAQC,MACfjB,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKwG,OAAf,QACF4O,OAAQtV,EACRoW,MAAOT,GACJM,EAAQI,aAGfrW,GAASiW,EAAQC,KAAKP,GACtBe,KAGFX,IAEO/V,CACR,EHlDC4V,SAAAA,EACAd,UAAAA,EACAzO,QIbK,SAAiBnG,EAAM0U,EAAGI,EAASa,GACxC,IAAMsC,EAAOlR,KAAK8Q,IAAI9Q,KAAKC,IAAI,EAAGhH,EAAKoG,OAAS,GAAI,GAC9C2P,GAAU7K,EAAAA,EAAAA,GAAMyK,GAEtB,GAAIU,EAAsBrW,EAAM8U,GAAU,CACxC,IAAMe,EAAOf,EAAQgB,MAAM,iBACrBU,EAAU1B,EAAQgB,MAAM,YACxBhW,GAAQmW,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QAAC,UAC3BiB,EAAQI,WADkB,IAE7Bf,OAAQ,KACRc,MAAO,QAKT,OAHAM,IACAX,IAGE/V,EACA,MACU,IAATmY,EAAa,IAAM,KAAKnU,OAEvBhE,EAAMZ,QAGH6H,KAAK8Q,IAAI/X,EAAMoY,YAAY,MAAOpY,EAAMoY,YAAY,OAAS,GAGrE,CAED,IAAMN,EAAW,IAAI9T,OAAOmU,GACtBpC,EAAOf,EAAQgB,MAAM,cACrBU,EAAU1B,EAAQgB,MAAM,YAM9BC,EAAQC,KAAK4B,EAAW,KAExB,IAAI9X,GAAQmW,EAAAA,EAAAA,GAAkBjW,EAAM8U,GAAP,QAC3BM,OAAQ,KACRc,MAAO,MACJH,EAAQI,YAqBb,MAlBI,SAASlU,KAAKnC,KAEhBA,EACE,MACAA,EAAMgF,WAAW,GAAGuD,SAAS,IAAI+H,cACjC,IACAtQ,EAAM+E,MAAM,IAGhB/E,EAAQA,EAAQ8X,EAAW,IAAM9X,EAAQ8X,EAErC9C,EAAQxR,QAAQ6U,WAClBrY,GAAS,IAAM8X,GAGjBpB,IACAX,IAEO/V,CACR,EJjDCoO,KAAAA,EACA8B,MAAAA,EACAyG,eAAAA,EACA/P,WAAAA,EAAAA,EACAyD,KAAAA,EACA6M,cAAAA,EACAnP,KKlBK,SAAc7H,EAAMnB,EAAQiW,EAASa,GAC1C,IAAME,EAAOf,EAAQgB,MAAM,QACrBsC,EAAgBtD,EAAQsD,cAE1BC,EAASrY,EAAKiG,QAAUgR,EAAmBnC,IAAWwD,EAAAA,EAAAA,GAAYxD,GAEhEyD,EAAcvY,EAAKiG,QCXpB,SAAiC6O,GACtC,IAAMoC,EAAgBD,EAAmBnC,GACnC0D,EAAqB1D,EAAQxR,QAAQkV,mBAE3C,IAAKA,EACH,MAAyB,MAAlBtB,EAAwB,IAAM,IAGvC,GAA2B,MAAvBsB,GAAqD,MAAvBA,EAChC,MAAM,IAAIrW,MACR,gCACEqW,EACA,iEAIN,GAAIA,IAAuBtB,EACzB,MAAM,IAAI/U,MACR,8BACE+U,EACA,iCACAsB,EACA,sBAIN,OAAOA,CACR,CDfKC,CAAwB3D,GEZvB,SAA0BA,GAC/B,IAAMuD,GAASC,EAAAA,EAAAA,GAAYxD,GACrByD,EAAczD,EAAQxR,QAAQiV,YAEpC,IAAKA,EACH,MAAkB,MAAXF,EAAiB,IAAM,IAGhC,GAAoB,MAAhBE,GAAuC,MAAhBA,GAAuC,MAAhBA,EAChD,MAAM,IAAIpW,MACR,gCACEoW,EACA,0DAIN,GAAIA,IAAgBF,EAClB,MAAM,IAAIlW,MACR,uBACEkW,EACA,0BACAE,EACA,sBAIN,OAAOA,CACR,CFdKG,CAAiB5D,GACf6D,EAAiB7D,EAAQ6D,eAC3BC,GAAqB,EAczB,GAXE/Z,IAECmB,EAAKiG,QACF6O,EAAQxR,QAAQkV,mBAChB1D,EAAQxR,QAAQiV,cACpBI,GACAN,IAAWM,IAEXC,GAAqB,IAGlB5Y,EAAKiG,QAAS,CACjB,IAAM4S,EAAgB7Y,EAAKjB,SAAWiB,EAAKjB,SAAS,QAAKuC,EAqCzD,GAzBc,MAAX+W,GAA6B,MAAXA,IAEnBQ,GACEA,EAAc9Z,UAAa8Z,EAAc9Z,SAAS,IAER,SAA5C+V,EAAQK,MAAML,EAAQK,MAAMjW,OAAS,IACO,aAA5C4V,EAAQK,MAAML,EAAQK,MAAMjW,OAAS,IACO,SAA5C4V,EAAQK,MAAML,EAAQK,MAAMjW,OAAS,IACO,aAA5C4V,EAAQK,MAAML,EAAQK,MAAMjW,OAAS,IAEiB,IAAtD4V,EAAQgE,WAAWhE,EAAQgE,WAAW5Z,OAAS,IACO,IAAtD4V,EAAQgE,WAAWhE,EAAQgE,WAAW5Z,OAAS,IACO,IAAtD4V,EAAQgE,WAAWhE,EAAQgE,WAAW5Z,OAAS,KAE/C0Z,GAAqB,GAWnBzB,EAAUrC,KAAauD,GAAUQ,EAGnC,IAFA,IAAI5Z,GAAS,IAEJA,EAAQe,EAAKjB,SAASG,QAAQ,CACrC,IAAM6Z,EAAO/Y,EAAKjB,SAASE,GAE3B,GACE8Z,GACc,aAAdA,EAAK3Z,MACL2Z,EAAKha,UACLga,EAAKha,SAAS,IACY,kBAA1Bga,EAAKha,SAAS,GAAGK,KACjB,CACAwZ,GAAqB,EACrB,KACD,CACF,CAEJ,CAEGA,IACFP,EAASE,GAGXzD,EAAQsD,cAAgBC,EACxB,IAAMvY,GAAQ0X,EAAAA,EAAAA,GAAcxX,EAAM8U,EAASa,GAI3C,OAHAb,EAAQ6D,eAAiBN,EACzBvD,EAAQsD,cAAgBA,EACxBvC,IACO/V,CACR,ELzECkZ,SAAAA,EAAAA,EACAC,UQzBK,SAAmBjZ,EAAM0U,EAAGI,EAASa,GAC1C,IAAME,EAAOf,EAAQgB,MAAM,aACrBU,EAAU1B,EAAQgB,MAAM,YACxBhW,GAAQmW,EAAAA,EAAAA,GAAkBjW,EAAM8U,EAASa,GAG/C,OAFAa,IACAX,IACO/V,CACR,ERmBCgJ,KS1BK,SAAc9I,EAAM0U,EAAGI,EAASa,GACrC,OAAO6B,EAAAA,EAAAA,GAAcxX,EAAM8U,EAASa,EACrC,ETyBCrN,OAAAA,EACAU,KU5BK,SAAchJ,EAAM0U,EAAGI,EAASa,GACrC,OAAOZ,EAAAA,EAAAA,GAAKD,EAAS9U,EAAKF,MAAO6V,EAClC,EV2BCuD,cW5BK,SAAuBxE,EAAGG,EAAIC,GACnC,IAAMhV,GACJqX,EAAUrC,IAAYA,EAAQxR,QAAQ6V,WAAa,IAAM,KACzDrV,OCNG,SAA6BgR,GAClC,IAAMsE,EAAatE,EAAQxR,QAAQ+V,gBAAkB,EAErD,GAAID,EAAa,EACf,MAAM,IAAIjX,MACR,2CACEiX,EACA,wDAIN,OAAOA,CACR,CDNUE,CAAoBxE,IAE7B,OAAOA,EAAQxR,QAAQ6V,WAAarZ,EAAM+E,MAAM,GAAI,GAAK/E,CAC1D,GEVYiE,EAAO,CAGpB,SAAsBwV,EAAMC,EAAO3a,EAAQiW,GAEzC,GACiB,SAAf0E,EAAMpa,MACNiW,EAAqBmE,EAAO1E,KACb,SAAdyE,EAAKna,MACHma,EAAKna,OAASoa,EAAMpa,MAAQiW,EAAqBkE,EAAMzE,IAE1D,OAAO,EAIT,GACgB,SAAdyE,EAAKna,MACLma,EAAKna,OAASoa,EAAMpa,MACpB2D,QAAQwW,EAAKtT,WAAalD,QAAQyW,EAAMvT,YACtCsT,EAAKtT,QACH6O,EAAQxR,QAAQkV,mBAChB1D,EAAQxR,QAAQiV,aAEpB,OAAO,EAKT,GAAI,WAAY1Z,GAAmC,mBAAlBA,EAAO6G,OAAsB,CAC5D,GACgB,cAAd6T,EAAKna,OAEJma,EAAKna,OAASoa,EAAMpa,MACJ,eAAfoa,EAAMpa,MAEU,YAAfoa,EAAMpa,MAAsBiX,EAAsBmD,EAAO1E,IAE5D,OAGF,OAAOjW,EAAO6G,OAAS,EAAI,CAC5B,CACF,GCxCD,IAAM+T,EAAoB,CACxB,WACA,qBACA,iBACA,YACA,aACA,mBAIWzE,EAAS,CACpB,CAACC,UAAW,KAAMiB,MAAO,WAAYwD,YAAa,YAClD,CAACzE,UAAW,KAAMG,OAAQ,WAAYsE,YAAa,YACnD,CACEzE,UAAW,KACXyE,YAAa,CAAC,4BAA6B,wBAE7C,CACEzE,UAAW,KACXyE,YAAa,CACX,4BACA,sBACA,4BACA,sBACA,qBACA,eAGJ,CACEzE,UAAW,KACXyE,YAAa,CACX,4BACA,sBACA,4BACA,sBACA,qBACA,eAGJ,CAACzE,UAAW,IAAKiB,MAAO,WAAYwD,YAAa,YACjD,CAACzE,UAAW,IAAKG,OAAQ,WAAYsE,YAAa,YAClD,CACEzE,UAAW,IACXyE,YAAa,CAAC,4BAA6B,wBAI7C,CACEzE,UAAW,IACXiB,MAAO,MACPwD,YAAa,WACbC,eAAgBF,GAGlB,CAACxE,UAAW,IAAKyE,YAAa,cAE9B,CAACE,SAAS,EAAM3E,UAAW,KAC3B,CAACA,UAAW,IAAKyE,YAAa,aAAcxD,MAAO,gBAGnD,CAACjB,UAAW,IAAKiB,MAAO,YAAawD,YAAa,YAElD,CAACzE,UAAW,IAAKyE,YAAa,mBAE9B,CAACzE,UAAW,IAAKyE,YAAa,kBAE9B,CACEtE,OAAQ,MACRH,UAAW,IACXyE,YAAa,WACbC,eAAgBF,GAIlB,CAACG,SAAS,EAAMxE,OAAQ,OAAQH,UAAW,KAC3C,CAACA,UAAW,IAAKyE,YAAa,kBAE9B,CAACE,SAAS,EAAM3E,UAAW,KAC3B,CAACA,UAAW,IAAKyE,YAAa,WAAYC,eAAgBF,GAE1D,CAACG,SAAS,EAAM3E,UAAW,KAG3B,CAAC2E,SAAS,EAAM3E,UAAW,KAE3B,CAAC2E,SAAS,EAAMxE,OAAQ,OAAQH,UAAW,IAAKiB,MAAO,mBAOvD,CAAC0D,SAAS,EAAM3E,UAAW,IAAKiB,MAAO,eACvC,CACEjB,UAAW,IACXiB,MAAO,cACPwD,YAAa,WACbC,eAAgBF,GAElB,CAACxE,UAAW,IAAKyE,YAAa,sBAE9B,CAACE,SAAS,EAAM3E,UAAW,KAG3B,CAAC2E,SAAS,EAAM3E,UAAW,KAC3B,CAACA,UAAW,IAAKyE,YAAa,sBAG9B,CAACE,SAAS,EAAM3E,UAAW,KAC3B,CAACA,UAAW,IAAKyE,YAAa,WAAYC,eAAgBF,GAC1D,CAACxE,UAAW,IAAKyE,YAAa,CAAC,QAAS,cAIxC,CAACzE,UAAW,KAAMiB,MAAO,WAAYwD,YAAa,YAElD,CAACzE,UAAW,IAAKyE,YAAa,CAAC,QAAS,cAGxC,CAACE,SAAS,EAAM3E,UAAW,KAC3B,CAACA,UAAW,IAAKyE,YAAa,WAAYC,eAAgBF,GAG1D,CAACG,SAAS,EAAM3E,UAAW,KAC3B,CACEA,UAAW,IACXyE,YAAa,CAAC,4BAA6B,8BAE7C,CAACzE,UAAW,IAAKyE,YAAa,WAAYC,eAAgBF,GAI1D,CAACG,SAAS,EAAM3E,UAAW,MC7D7B,SAAS4E,EAAQ/Z,GACf,MAAM,IAAIqC,MAAM,wBAA0BrC,EAAQ,mBACnD,CAMD,SAASQ,EAAQN,GACf,MAAM,IAAImC,MAAM,+BAAiCnC,EAAKZ,KAAO,IAC9D,CAGD,SAAS0a,EAAeP,EAAMC,GAE5B,GAAkB,eAAdD,EAAKna,MAAyBma,EAAKna,OAASoa,EAAMpa,KACpD,OAAO,CAEV,CCjGD,MCOe,SAAyBkE,GAAS,WAoB/C8O,OAAOgB,OAAO2G,KAAM,CAACC,SAlBJ,SAAC/G,GAEhB,IAAMY,EAAmC,EAAKnL,KAAK,YAEnD,OFKG,SAAoBuK,GAAoB,IAAd3P,EAAc,uDAAJ,CAAC,EAGpCwR,EAAU,CACdgB,MAAAA,EACAX,MAAO,GACPH,OAAQ,GACRjR,KAAM,GACN1D,SAAU,CAAC,EACXiD,QAAS,CAAC,EACVwV,WAAY,IAGdzE,EAAUS,EAAS,CAACE,OAAAA,EAAQjR,KAAAA,EAAM1D,SAAU2F,IAC5CqO,EAAUS,EAASxR,GAEfwR,EAAQxR,QAAQ2W,kBAClB5F,EAAUS,EAAS,CAAC/Q,KAAM,CAAC+V,KAI7BhF,EAAQ9O,QAASkU,EAAAA,EAAAA,GAAO,OAAQ,CAC9BL,QAAAA,EAEAvZ,QAAAA,EAEAD,SAAUyU,EAAQzU,WAGpB,IAAIf,EAASwV,EAAQ9O,OAAOiN,EAAM,KAAM6B,EAAS,CAC/CM,OAAQ,KACRc,MAAO,KACPiE,IAAK,CAAC1F,KAAM,EAAG2F,OAAQ,GACvBC,UAAW,IAWb,OAPE/a,GACyC,KAAzCA,EAAOwF,WAAWxF,EAAOJ,OAAS,IACO,KAAzCI,EAAOwF,WAAWxF,EAAOJ,OAAS,KAElCI,GAAU,MAGLA,EAGP,SAASwW,EAAMwE,GAEb,OADAxF,EAAQK,MAAMzV,KAAK4a,GAGnB,WACExF,EAAQK,MAAMoF,KACf,CACF,CACF,CE5DUC,CACLvH,EACAb,OAAOgB,OAAO,CAAC,EAAGS,EAAUvQ,EAAS,CAInCkR,WAEI,EAAK9L,KAAK,yBACP,KAGZ,GAGF,C","sources":["../../node_modules/hast-util-to-mdast/lib/all.js","../../node_modules/hast-util-to-mdast/lib/util/own.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-text.js","../../node_modules/hast-util-to-mdast/lib/one.js","../../node_modules/mdast-util-phrasing/index.js","../../node_modules/hast-util-to-mdast/lib/util/wrap.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-children.js","../../node_modules/hast-util-to-mdast/lib/util/resolve.js","../../node_modules/unist-util-find-after/index.js","../../node_modules/hast-util-to-text/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/code.js","../../node_modules/trim-trailing-lines/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/del.js","../../node_modules/hast-util-to-mdast/lib/util/list-items-spread.js","../../node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js","../../node_modules/hast-util-to-mdast/lib/handlers/dl.js","../../node_modules/hast-util-to-mdast/lib/handlers/em.js","../../node_modules/hast-util-to-mdast/lib/handlers/heading.js","../../node_modules/hast-util-to-mdast/lib/handlers/img.js","../../node_modules/hast-util-to-mdast/lib/handlers/inline-code.js","../../node_modules/hast-util-to-mdast/lib/util/find-selected-options.js","../../node_modules/hast-util-to-mdast/lib/handlers/input.js","../../node_modules/hast-util-to-mdast/lib/handlers/li.js","../../node_modules/hast-util-to-mdast/lib/handlers/list.js","../../node_modules/hast-util-to-mdast/lib/handlers/media.js","../../node_modules/hast-util-to-mdast/lib/handlers/p.js","../../node_modules/hast-util-to-mdast/lib/handlers/strong.js","../../node_modules/hast-util-to-mdast/lib/handlers/table-cell.js","../../node_modules/hast-util-to-mdast/lib/handlers/table.js","../../node_modules/hast-util-to-mdast/lib/handlers/index.js","../../node_modules/hast-util-to-mdast/lib/handlers/root.js","../../node_modules/hast-util-to-mdast/lib/handlers/text.js","../../node_modules/hast-util-to-mdast/lib/handlers/comment.js","../../node_modules/hast-util-to-mdast/lib/handlers/a.js","../../node_modules/hast-util-to-mdast/lib/handlers/base.js","../../node_modules/hast-util-to-mdast/lib/handlers/blockquote.js","../../node_modules/hast-util-to-mdast/lib/handlers/br.js","../../node_modules/hast-util-to-mdast/lib/handlers/hr.js","../../node_modules/hast-util-to-mdast/lib/handlers/iframe.js","../../node_modules/hast-util-to-mdast/lib/handlers/q.js","../../node_modules/hast-util-to-mdast/lib/handlers/select.js","../../node_modules/hast-util-to-mdast/lib/handlers/textarea.js","../../node_modules/hast-util-to-mdast/lib/handlers/table-row.js","../../node_modules/hast-util-to-mdast/lib/handlers/wbr.js","../../node_modules/hast-util-to-mdast/lib/index.js","../../node_modules/rehype-remark/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/configure.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-to-markdown/lib/join.js","../../node_modules/mdast-util-to-markdown/lib/unsafe.js","../../node_modules/mdast-util-to-markdown/lib/index.js","../../node_modules/remark-stringify/index.js","../../node_modules/remark-stringify/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {one} from './one.js'\n\n/**\n * @param {H} h\n * @param {Node} parent\n * @returns {Array.<MdastNode>}\n */\nexport function all(h, parent) {\n  /** @type {Array.<Node>} */\n  // @ts-expect-error Assume `parent` is a parent.\n  const nodes = parent.children || []\n  /** @type {Array.<MdastNode>} */\n  const values = []\n  let index = -1\n  let length = nodes.length\n  let child = nodes[index + 1]\n\n  // Trim initial and final `<br>`s.\n  // They’re not semantic per HTML, and they can’t be made in markdown things\n  // like paragraphs or headings.\n  while (child && child.type === 'element' && child.tagName === 'br') {\n    index++\n    child = nodes[index + 1]\n  }\n\n  child = nodes[length - 1]\n\n  while (\n    length - 1 > index &&\n    child &&\n    child.type === 'element' &&\n    child.tagName === 'br'\n  ) {\n    length--\n    child = nodes[length - 1]\n  }\n\n  while (++index < length) {\n    // @ts-expect-error assume `parent` is a parent.\n    const result = one(h, nodes[index], parent)\n\n    if (Array.isArray(result)) {\n      values.push(...result)\n    } else if (result) {\n      values.push(result)\n    }\n  }\n\n  return values\n}\n","export const own = {}.hasOwnProperty\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string} value\n * @returns {string}\n */\nexport function wrapText(h, value) {\n  return h.wrapText ? value : value.replace(/\\r?\\n|\\r/g, ' ')\n}\n","/**\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').MdastNode} MdastNode\n */\n\nimport {all} from './all.js'\nimport {own} from './util/own.js'\nimport {wrapText} from './util/wrap-text.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @param {Parent|undefined} parent\n * @returns {MdastNode|Array.<MdastNode>|void}\n */\nexport function one(h, node, parent) {\n  /** @type {Handle|undefined} */\n  let fn\n\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(h.handlers, node.tagName)) {\n      fn = h.handlers[node.tagName]\n    }\n  } else if (own.call(h.handlers, node.type)) {\n    fn = h.handlers[node.type]\n  }\n\n  if (typeof fn === 'function') {\n    return fn(h, node, parent)\n  }\n\n  return unknown(h, node)\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(h, node) {\n  // @ts-expect-error: Looks like a literal.\n  if (typeof node.value === 'string') {\n    // @ts-expect-error: Looks like a literal.\n    return h(node, 'text', wrapText(h, node.value))\n  }\n\n  return all(h, node)\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * @type {AssertPredicatePhrasing}\n */\n// @ts-ignore hush, it’s fine!\nexport const phrasing = convert([\n  'break',\n  'delete',\n  'emphasis',\n  'footnote',\n  'footnoteReference',\n  'image',\n  'imageReference',\n  'inlineCode',\n  'link',\n  'linkReference',\n  'strong',\n  'text'\n])\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n */\n\nimport extend from 'extend'\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Array.<MdastNode>} nodes\n */\nexport function wrap(nodes) {\n  return runs(nodes, onphrasing)\n\n  /**\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode|Array.<MdastNode>}\n   */\n  function onphrasing(nodes) {\n    const head = nodes[0]\n\n    if (\n      nodes.length === 1 &&\n      head.type === 'text' &&\n      (head.value === ' ' || head.value === '\\n')\n    ) {\n      return []\n    }\n\n    return {type: 'paragraph', children: nodes}\n  }\n}\n\n/**\n * Check if there are non-phrasing mdast nodes returned.\n * This is needed if a fragment is given, which could just be a sentence, and\n * doesn’t need a wrapper paragraph.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {boolean}\n */\nexport function wrapNeeded(nodes) {\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wrap all runs of mdast phrasing content in `paragraph` nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @param {(nodes: Array.<MdastPhrasingContent>) => MdastNode|Array.<MdastNode>} onphrasing\n * @param {(node: MdastNode) => MdastNode} [onnonphrasing]\n */\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  const nonphrasing = onnonphrasing || identity\n  /** @type {Array.<MdastNode>} */\n  const flattened = flatten(nodes)\n  /** @type {Array.<MdastNode>} */\n  let result = []\n  let index = -1\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < flattened.length) {\n    node = flattened[index]\n\n    if (phrasing(node)) {\n      if (!queue) queue = []\n      queue.push(node)\n    } else {\n      if (queue) {\n        result = result.concat(onphrasing(queue))\n        queue = undefined\n      }\n\n      result = result.concat(nonphrasing(node))\n    }\n  }\n\n  if (queue) {\n    result = result.concat(onphrasing(queue))\n  }\n\n  return result\n}\n\n/**\n * Flatten a list of nodes.\n *\n * @param {Array.<MdastNode>} nodes\n * @returns {Array.<MdastNode>}\n */\nfunction flatten(nodes) {\n  /** @type {Array.<MdastNode>} */\n  let flattened = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n\n  while (++index < nodes.length) {\n    node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      wrapNeeded(node.children)\n    ) {\n      flattened = flattened.concat(split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n/**\n * @param {MdastNode} node\n * @returns {Array.<MdastNode>}\n */\nfunction split(node) {\n  // @ts-expect-error Assume parent.\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  /**\n   * Use `child`, add `parent` as its first child, put the original children\n   * into `parent`.\n   * If `child` is not a parent, `parent` will not be added.\n   *\n   * @param {MdastNode} child\n   * @returns {MdastNode}\n   */\n  function onnonphrasing(child) {\n    if ('children' in child && 'children' in node) {\n      const {children, ...rest} = node\n      return {\n        ...child,\n        // @ts-expect-error: assume matching parent & child.\n        children: [{...extend(true, {}, rest), children: child.children}]\n      }\n    }\n\n    return {...child}\n  }\n\n  /**\n   * Use `parent`, put the phrasing run inside it.\n   *\n   * @param {Array.<MdastPhrasingContent>} nodes\n   * @returns {MdastNode}\n   */\n  function onphrasing(nodes) {\n    // @ts-expect-error: assume parent.\n    const {children, ...rest} = node\n    // @ts-expect-error: assume matching parent & child.\n    return {...extend(true, {}, rest), children: nodes}\n  }\n}\n\n/**\n * @template {unknown} T\n * @param {T} n\n * @returns {T}\n */\nfunction identity(n) {\n  return n\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @param {Node} node\n * @returns {Array.<MdastNode>}\n */\nexport function wrapChildren(h, node) {\n  return wrap(all(h, node))\n}\n","/**\n * @typedef {import('../types.js').H} H\n */\n\n/**\n * @param {H} h\n * @param {string|null|undefined} url\n * @returns {string}\n */\nexport function resolve(h, url) {\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  if (h.frozenBaseUrl) {\n    return String(new URL(url, h.frozenBaseUrl))\n  }\n\n  return url\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {import('unist-util-is').Type} Type\n * @typedef {import('unist-util-is').Props} Props\n * @typedef {import('unist-util-is').TestFunctionAnything} TestFunctionAnything\n */\n\nimport {convert} from 'unist-util-is'\n\nexport var findAfter =\n  /**\n   * @type {(\n   *  (<T extends Node>(node: Parent, index: Node|number, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>) => T|null) &\n   *  ((node: Parent, index: Node|number, test?: null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>) => Node|null)\n   * )}\n   */\n  (\n    /**\n     * @param {Parent} parent Parent node\n     * @param {Node|number} index Child of `parent`, or it’s index\n     * @param {null|undefined|Type|Props|TestFunctionAnything|Array<Type|Props|TestFunctionAnything>} [test] is-compatible test (such as a type)\n     * @returns {Node|null}\n     */\n    function (parent, index, test) {\n      var is = convert(test)\n\n      if (!parent || !parent.type || !parent.children) {\n        throw new Error('Expected parent node')\n      }\n\n      if (typeof index === 'number') {\n        if (index < 0 || index === Number.POSITIVE_INFINITY) {\n          throw new Error('Expected positive finite number as index')\n        }\n      } else {\n        index = parent.children.indexOf(index)\n\n        if (index < 0) {\n          throw new Error('Expected child node or index')\n        }\n      }\n\n      while (++index < parent.children.length) {\n        if (is(parent.children[index], index, parent)) {\n          return parent.children[index]\n        }\n      }\n\n      return null\n    }\n  )\n","/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Parent['children'][number]} HastChild\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {HastChild|HastRoot} HastNode\n * @typedef {HastRoot|HastElement} HastParent\n *\n * @typedef {'normal'|'pre'|'nowrap'|'pre-wrap'} Whitespace\n * @typedef {boolean} BreakValue\n * @typedef {1|2} BreakNumber\n * @typedef {'\\n'} BreakForce\n * @typedef {BreakValue|BreakNumber|undefined} BreakBefore\n * @typedef {BreakValue|BreakNumber|BreakForce|undefined} BreakAfter\n *\n * @typedef CollectionOptions\n * @property {Whitespace} whitespace\n * @property {BreakBefore} breakBefore\n * @property {BreakAfter} breakAfter\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Implementation of the `innerText` getter:\n * <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n * Note that we act as if `node` is being rendered, and as if we’re a\n * CSS-supporting user agent.\n *\n * @param {HastNode} node\n * @param {Options} [options={}]\n * @returns {string}\n */\nexport function toText(node, options = {}) {\n  /** @type {Array.<HastChild>} */\n  // @ts-ignore looks like a parent.\n  const children = node.children || []\n  const block = blockOrCaption(node)\n  const whitespace = inferWhitespace(node, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let results\n  /** @type {string|BreakNumber} */\n  let value\n  /** @type {number|undefined} */\n  let count\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {whitespace, breakBefore: true, breakAfter: true})\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = []\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(\n      // @ts-ignore Looks like a parent.\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? null : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1\n  /** @type {Array.<string>} */\n  const result = []\n\n  while (++index < results.length) {\n    value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count) result.push('\\n'.repeat(count))\n      count = 0\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {HastNode} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n * @returns {Array.<string|BreakNumber>}\n */\nfunction innerTextCollection(node, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, options)\n  }\n\n  if (node.type === 'text') {\n    return [\n      options.whitespace === 'normal'\n        ? collectText(node, options)\n        : collectPreText(node)\n    ]\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {HastElement} node\n * @param {HastParent} parent\n * @param {CollectionOptions} options\n */\nfunction collectElement(node, parent, options) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, options)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array.<string|BreakNumber>} */\n  let items = []\n  /** @type {BreakNumber|undefined} */\n  let prefix\n  /** @type {BreakNumber|BreakForce|undefined} */\n  let suffix\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {HastText|HastComment} node\n * @param {CollectionOptions} options\n * @returns {string}\n */\nfunction collectText(node, options) {\n  const value = String(node.value)\n  /** @type {Array.<string>} */\n  const lines = []\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  let index = -1\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n  /** @type {string|undefined} */\n  let join\n\n  while (start < value.length) {\n    searchLineFeeds.lastIndex = start\n    match = searchLineFeeds.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // [...] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        options.breakBefore,\n        options.breakAfter\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = ''\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (join) result.push(join)\n      result.push(lines[index])\n      join = ' '\n    }\n  }\n\n  return result.join('')\n}\n\n/**\n * @param {HastText|HastComment} node\n * @returns {string}\n */\nfunction collectPreText(node) {\n  return String(node.value)\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n * @param {BreakBefore} breakBefore\n * @param {BreakAfter} breakAfter\n * @returns {string}\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array.<string>} */\n  const result = []\n  let start = 0\n  /** @type {RegExpMatchArray|null} */\n  let match\n  /** @type {number} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    match = searchTabOrSpaces.exec(value)\n    // @ts-expect-error: `index` is set.\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  // @ts-expect-error: `end` is defined.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {HastNode} node\n * @param {CollectionOptions} options\n * @returns {Whitespace}\n */\nfunction inferWhitespace(node, options) {\n  /** @type {HastProperties} */\n  let props\n\n  if (node.type === 'element') {\n    props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return props.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return props.noWrap ? 'nowrap' : options.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return options.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {trimTrailingLines} from 'trim-trailing-lines'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst prefix = 'language-'\n\nconst pre = convertElement('pre')\nconst isCode = convertElement('code')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function code(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<string|number>|undefined} */\n  let classList\n  /** @type {string|undefined} */\n  let lang\n\n  if (pre(node)) {\n    while (++index < children.length) {\n      const child = children[index]\n\n      if (\n        isCode(child) &&\n        child.properties &&\n        child.properties.className &&\n        Array.isArray(child.properties.className)\n      ) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    index = -1\n\n    while (++index < classList.length) {\n      if (String(classList[index]).slice(0, prefix.length) === prefix) {\n        lang = String(classList[index]).slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  return h(\n    node,\n    'code',\n    {lang: lang || null, meta: null},\n    trimTrailingLines(wrapText(h, toText(node)))\n  )\n}\n","/**\n * Remove final newline characters from `value`.\n *\n * @param {unknown} value Value with trailing line feeds, coerced to string.\n * @return {string} Value without trailing newlines.\n */\nexport function trimTrailingLines(value) {\n  return String(value).replace(/\\n+$/, '')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function del(h, node) {\n  return h(node, 'delete', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\n/**\n * @param {Array.<MdastListContent>} children\n * @returns {boolean}\n */\nexport function listItemsSpread(children) {\n  let index = -1\n\n  if (children.length > 1) {\n    while (++index < children.length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n */\n\nimport {all} from '../all.js'\n\n/**\n * @param {H} h\n * @param {Child} node\n * @returns {Array.<MdastListContent>}\n */\nexport function wrapListItems(h, node) {\n  const children = all(h, node)\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (child.type !== 'listItem') {\n      children[index] = {\n        type: 'listItem',\n        spread: false,\n        checked: null,\n        // @ts-expect-error Assume `children[index]` is block content.\n        children: [child]\n      }\n    }\n  }\n\n  // @ts-expect-error Assume all `listItem`s\n  return children\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastListContent} MdastListContent\n * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent\n * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent\n *\n * @typedef Group\n * @property {Array.<Element>} titles\n * @property {Array.<ElementChild>} definitions\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst div = convertElement('div')\nconst dt = convertElement('dt')\nconst dd = convertElement('dd')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function dl(h, node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<ElementChild>} */\n  let clean = []\n  /** @type {Array.<Group>} */\n  const groups = []\n  /** @type {Group} */\n  let group = {titles: [], definitions: []}\n  /** @type {ElementChild} */\n  let child\n  /** @type {Array.<MdastBlockContent|MdastDefinitionContent>} */\n  let result\n\n  // Unwrap `<div>`s\n  while (++index < children.length) {\n    child = children[index]\n    clean = clean.concat(div(child) ? child.children : child)\n  }\n\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < clean.length) {\n    child = clean[index]\n\n    if (dt(child)) {\n      if (dd(clean[index - 1])) {\n        groups.push(group)\n        group = {titles: [], definitions: []}\n      }\n\n      group.titles.push(child)\n    } else {\n      group.definitions.push(child)\n    }\n  }\n\n  groups.push(group)\n\n  // Create items.\n  index = -1\n  /** @type {Array.<MdastListContent>} */\n  const content = []\n\n  while (++index < groups.length) {\n    result = [\n      ...handle(h, groups[index].titles),\n      ...handle(h, groups[index].definitions)\n    ]\n\n    if (result.length > 0) {\n      content.push({\n        type: 'listItem',\n        spread: result.length > 1,\n        checked: null,\n        children: result\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length > 0) {\n    return h(\n      node,\n      'list',\n      {ordered: false, start: null, spread: listItemsSpread(content)},\n      content\n    )\n  }\n}\n\n/**\n * @param {H} h\n * @param {Array.<ElementChild>} children\n * @returns {Array.<MdastBlockContent|MdastDefinitionContent>}\n */\nfunction handle(h, children) {\n  const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children})\n\n  if (nodes.length === 0) {\n    return []\n  }\n\n  if (nodes.length === 1) {\n    return nodes[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: listItemsSpread(nodes),\n      children: nodes\n    }\n  ]\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function em(h, node) {\n  return h(node, 'emphasis', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function heading(h, node) {\n  // `else` shouldn’t happen, of course…\n  /* c8 ignore next */\n  const depth = Number(node.tagName.charAt(1)) || 1\n  const wrap = h.wrapText\n\n  h.wrapText = false\n  const result = h(node, 'heading', {depth}, all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function img(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(node, 'image', {\n    url: resolve(h, String(props.src || '') || null),\n    title: props.title || null,\n    alt: props.alt || ''\n  })\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').H} H\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Child} Child\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {hasProperty} from 'hast-util-has-property'\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from './wrap-text.js'\n\nconst option = convertElement('option')\n\n/**\n * @param {H} h\n * @param {Element} node\n * @param {Properties} [properties]\n * @returns {Array.<[string, string|null]>}\n */\nexport function findSelectedOptions(h, node, properties) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` exist.\n  const props = properties || node.properties\n  let options = findOptions(node)\n  const size =\n    Math.min(Number.parseInt(String(props.size), 10), 0) ||\n    (props.multiple ? 4 : 1)\n  let index = -1\n  /** @type {Array.<Element>} */\n  const selectedOptions = []\n  /** @type {Array.<[string, string|null]>} */\n  const values = []\n\n  while (++index < options.length) {\n    if (hasProperty(options[index], 'selected')) {\n      selectedOptions.push(options[index])\n    }\n  }\n\n  const list = selectedOptions.length > 0 ? selectedOptions : options\n  options = list.slice(0, size)\n  index = -1\n\n  while (++index < options.length) {\n    const option = options[index]\n    const content = wrapText(h, toText(option))\n    /** @type {Properties} */\n    // @ts-expect-error: `props` exist.\n    const props = option.properties\n    const label = content || String(props.label || '')\n    const value = String(props.value || '') || content\n    values.push([value, label === value ? null : label])\n  }\n\n  return values\n}\n\n/**\n * @param {Parent} node\n */\nfunction findOptions(node) {\n  const children = node.children\n  let index = -1\n  /** @type {Array.<Element>} */\n  let results = []\n  /** @type {Child} */\n  let child\n\n  while (++index < children.length) {\n    child = children[index]\n\n    // @ts-expect-error Looks like a parent.\n    if (Array.isArray(child.children)) {\n      // @ts-expect-error Looks like a parent.\n      results = results.concat(findOptions(child))\n    }\n\n    if (option(child) && !hasProperty(child, 'disabled')) {\n      results.push(child)\n    }\n  }\n\n  return results\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {own} from '../util/own.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\nconst datalist = convertElement('datalist')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function input(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  let value = String(props.value || props.placeholder || '')\n  /** @type {Array.<MdastNode>} */\n  const results = []\n  /** @type {Array.<string>} */\n  const texts = []\n  /** @type {Array.<[string, string|null]>} */\n  let values = []\n  let index = -1\n  /** @type {string} */\n  let list\n\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\n    return\n  }\n\n  if (props.type === 'checkbox' || props.type === 'radio') {\n    return h(\n      node,\n      'text',\n      wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\n    )\n  }\n\n  if (props.type === 'image') {\n    return props.alt || value\n      ? h(node, 'image', {\n          url: resolve(h, String(props.src || '') || null),\n          title: wrapText(h, String(props.title || '')) || null,\n          alt: wrapText(h, String(props.alt || value))\n        })\n      : []\n  }\n\n  if (value) {\n    values = [[value, null]]\n  } else if (\n    // `list` is not supported on these types:\n    props.type !== 'password' &&\n    props.type !== 'file' &&\n    props.type !== 'submit' &&\n    props.type !== 'reset' &&\n    props.type !== 'button' &&\n    props.list\n  ) {\n    list = String(props.list).toUpperCase()\n\n    if (own.call(h.nodeById, list) && datalist(h.nodeById[list])) {\n      values = findSelectedOptions(h, h.nodeById[list], props)\n    }\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Hide password value.\n  if (props.type === 'password') {\n    // Passwords don’t support `list`.\n    values[0] = ['•'.repeat(values[0][0].length), null]\n  }\n\n  if (props.type === 'url' || props.type === 'email') {\n    while (++index < values.length) {\n      value = resolve(h, values[index][0])\n\n      results.push(\n        h(\n          node,\n          'link',\n          {\n            title: null,\n            url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)\n          },\n          [{type: 'text', value: wrapText(h, values[index][1] || value)}]\n        )\n      )\n\n      if (index !== values.length - 1) {\n        results.push({type: 'text', value: ', '})\n      }\n    }\n\n    return results\n  }\n\n  while (++index < values.length) {\n    texts.push(\n      values[index][1]\n        ? values[index][1] + ' (' + values[index][0] + ')'\n        : values[index][0]\n    )\n  }\n\n  return h(node, 'text', wrapText(h, texts.join(', ')))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').ElementChild} ElementChild\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {wrapChildren} from '../util/wrap-children.js'\n\nconst p = convertElement('p')\nconst input = convertElement('input')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function li(h, node) {\n  const head = node.children[0]\n  /** @type {boolean|null} */\n  let checked = null\n  /** @type {ElementChild} */\n  let checkbox\n  /** @type {Element|undefined} */\n  let clone\n\n  // Check if this node starts with a checkbox.\n  if (p(head)) {\n    checkbox = head.children[0]\n\n    if (\n      input(checkbox) &&\n      checkbox.properties &&\n      (checkbox.properties.type === 'checkbox' ||\n        checkbox.properties.type === 'radio')\n    ) {\n      checked = Boolean(checkbox.properties.checked)\n      clone = {\n        ...node,\n        children: [\n          {...head, children: head.children.slice(1)},\n          ...node.children.slice(1)\n        ]\n      }\n    }\n  }\n\n  const content = wrapChildren(h, clone || node)\n\n  return h(node, 'listItem', {spread: content.length > 1, checked}, content)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {listItemsSpread} from '../util/list-items-spread.js'\nimport {wrapListItems} from '../util/wrap-list-items.js'\n\nconst ol = convertElement('ol')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function list(h, node) {\n  const ordered = ol(node)\n  const children = wrapListItems(h, node)\n  /** @type {number|null} */\n  let start = null\n\n  if (ordered) {\n    start = hasProperty(node, 'start')\n      ? // @ts-expect-error: `props` exist.\n        Number.parseInt(String(node.properties.start), 10)\n      : 1\n  }\n\n  return h(\n    node,\n    'list',\n    {ordered, start, spread: listItemsSpread(children)},\n    children\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').ElementChild} ElementChild\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toString} from 'mdast-util-to-string'\nimport {visit, EXIT} from 'unist-util-visit'\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\nimport {wrapNeeded} from '../util/wrap.js'\n\nconst source = convertElement('source')\nconst video = convertElement('video')\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function media(h, node) {\n  let nodes = all(h, node)\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const properties = node.properties\n  const poster = video(node) && String(properties.poster || '')\n  let src = String(properties.src || '')\n  let index = -1\n  /** @type {boolean} */\n  let linkInFallbackContent = false\n  /** @type {ElementChild} */\n  let child\n\n  visit({type: 'root', children: nodes}, 'link', findLink)\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || wrapNeeded(nodes)) {\n    return nodes\n  }\n\n  // Find the source.\n  while (!src && ++index < node.children.length) {\n    child = node.children[index]\n    if (source(child)) {\n      // @ts-expect-error: `props` are defined.\n      src = String(child.properties.src || '')\n    }\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    nodes = [\n      {\n        type: 'image',\n        title: null,\n        url: resolve(h, poster),\n        alt: toString({children: nodes})\n      }\n    ]\n  }\n\n  // Link to the media resource.\n  return {\n    type: 'link',\n    // @ts-expect-error Types are broken.\n    title: node.properties.title || null,\n    url: resolve(h, src),\n    // @ts-expect-error Assume phrasing content.\n    children: nodes\n  }\n\n  function findLink() {\n    linkInFallbackContent = true\n    return EXIT\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function p(h, node) {\n  const nodes = all(h, node)\n\n  if (nodes.length > 0) {\n    return h(node, 'paragraph', nodes)\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableCell(h, node) {\n  const wrap = h.wrapText\n\n  h.wrapText = false\n\n  const result = h(node, 'tableCell', all(h, node))\n\n  if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {\n    const data = result.data || (result.data = {})\n    if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan\n    if (node.properties.colSpan) data.colSpan = node.properties.colSpan\n  }\n\n  h.wrapText = wrap\n\n  return result\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n * @typedef {import('../types.js').MdastTableContent} MdastTableContent\n * @typedef {import('../types.js').MdastRowContent} MdastRowContent\n * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent\n *\n * @typedef Info\n * @property {Array.<string|null>} align\n * @property {boolean} headless\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {toText} from 'hast-util-to-text'\nimport {visit, SKIP} from 'unist-util-visit'\nimport {wrapText} from '../util/wrap-text.js'\nimport {all} from '../all.js'\n\nconst thead = convertElement('thead')\nconst tr = convertElement('tr')\nconst cell = convertElement(['th', 'td'])\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function table(h, node) {\n  if (h.inTable) {\n    return h(node, 'text', wrapText(h, toText(node)))\n  }\n\n  h.inTable = true\n\n  const {headless, align} = inspect(node)\n  const rows = toRows(all(h, node), headless)\n  let columns = 1\n  let rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = -1\n\n    while (++cellIndex < cells.length) {\n      const cell = cells[cellIndex]\n\n      if (cell.data) {\n        const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1\n        const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1\n\n        if (colSpan > 1 || rowSpan > 1) {\n          let otherRowIndex = rowIndex - 1\n\n          while (++otherRowIndex < rowIndex + rowSpan) {\n            let colIndex = cellIndex - 1\n\n            while (++colIndex < cellIndex + colSpan) {\n              if (!rows[otherRowIndex]) {\n                // Don’t add rows that don’t exist.\n                // Browsers don’t render them either.\n                break\n              }\n\n              /** @type {Array.<MdastRowContent>} */\n              const newCells = []\n\n              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {\n                newCells.push({type: 'tableCell', children: []})\n              }\n\n              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells)\n            }\n          }\n        }\n\n        // Clean the data fields.\n        if ('colSpan' in cell.data) delete cell.data.colSpan\n        if ('rowSpan' in cell.data) delete cell.data.rowSpan\n        if (Object.keys(cell.data).length === 0) delete cell.data\n      }\n    }\n\n    if (cells.length > columns) columns = cells.length\n  }\n\n  // Add extra empty cells.\n  rowIndex = -1\n\n  while (++rowIndex < rows.length) {\n    const cells = rows[rowIndex].children\n    let cellIndex = cells.length - 1\n    while (++cellIndex < columns) {\n      cells.push({type: 'tableCell', children: []})\n    }\n  }\n\n  let alignIndex = align.length - 1\n  while (++alignIndex < columns) {\n    align.push(null)\n  }\n\n  h.inTable = false\n\n  return h(node, 'table', {align}, rows)\n}\n\n/**\n * Infer whether the HTML table has a head and how it aligns.\n *\n * @param {Element} node\n * @returns {Info}\n */\nfunction inspect(node) {\n  let headless = true\n  let rowIndex = 0\n  let cellIndex = 0\n  /** @type {Array.<string|null>} */\n  const align = [null]\n\n  visit(node, 'element', (child) => {\n    if (child.tagName === 'table' && node !== child) {\n      return SKIP\n    }\n\n    // If there is a `thead`, assume there is a header row.\n    if (cell(child) && child.properties) {\n      if (!align[cellIndex]) {\n        align[cellIndex] = String(child.properties.align || '') || null\n      }\n\n      // If there is a th in the first row, assume there is a header row.\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\n        headless = false\n      }\n\n      cellIndex++\n    } else if (thead(child)) {\n      headless = false\n    } else if (tr(child)) {\n      rowIndex++\n      cellIndex = 0\n    }\n  })\n\n  return {align, headless}\n}\n\n/**\n * Ensure the rows are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @param {boolean} headless\n * @returns {Array.<MdastTableContent>}\n */\nfunction toRows(children, headless) {\n  let index = -1\n  /** @type {Array.<MdastTableContent>} */\n  const nodes = []\n  /** @type {Array.<MdastRowContent>|undefined} */\n  let queue\n\n  // Add an empty header row.\n  if (headless) {\n    nodes.push({type: 'tableRow', children: []})\n  }\n\n  while (++index < children.length) {\n    const node = children[index]\n\n    if (node.type === 'tableRow') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume row content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    nodes[nodes.length - 1].children.push(...queue)\n  }\n\n  index = -1\n\n  while (++index < nodes.length) {\n    nodes[index].children = toCells(nodes[index].children)\n  }\n\n  return nodes\n}\n\n/**\n * Ensure the cells in a row are properly structured.\n *\n * @param {Array.<MdastNode>} children\n * @returns {Array.<MdastRowContent>}\n */\nfunction toCells(children) {\n  /** @type {Array.<MdastRowContent>} */\n  const nodes = []\n  let index = -1\n  /** @type {MdastNode} */\n  let node\n  /** @type {Array.<MdastPhrasingContent>|undefined} */\n  let queue\n\n  while (++index < children.length) {\n    node = children[index]\n\n    if (node.type === 'tableCell') {\n      if (queue) {\n        node.children.unshift(...queue)\n        queue = undefined\n      }\n\n      nodes.push(node)\n    } else {\n      if (!queue) queue = []\n      // @ts-expect-error Assume phrasing content.\n      queue.push(node)\n    }\n  }\n\n  if (queue) {\n    node = nodes[nodes.length - 1]\n\n    if (!node) {\n      node = {type: 'tableCell', children: []}\n      nodes.push(node)\n    }\n\n    node.children.push(...queue)\n  }\n\n  return nodes\n}\n","import {all} from '../all.js'\nimport {wrapChildren} from '../util/wrap-children.js'\nimport {a} from './a.js'\nimport {base} from './base.js'\nimport {blockquote} from './blockquote.js'\nimport {br} from './br.js'\nimport {code} from './code.js'\nimport {comment} from './comment.js'\nimport {del} from './del.js'\nimport {dl} from './dl.js'\nimport {em} from './em.js'\nimport {heading} from './heading.js'\nimport {hr} from './hr.js'\nimport {iframe} from './iframe.js'\nimport {img} from './img.js'\nimport {inlineCode} from './inline-code.js'\nimport {input} from './input.js'\nimport {li} from './li.js'\nimport {list} from './list.js'\nimport {media} from './media.js'\nimport {p} from './p.js'\nimport {q} from './q.js'\nimport {root} from './root.js'\nimport {select} from './select.js'\nimport {strong} from './strong.js'\nimport {tableCell} from './table-cell.js'\nimport {tableRow} from './table-row.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {textarea} from './textarea.js'\nimport {wbr} from './wbr.js'\n\nexport const handlers = {\n  root,\n  text,\n  comment,\n  doctype: ignore,\n\n  applet: ignore,\n  area: ignore,\n  basefont: ignore,\n  bgsound: ignore,\n  caption: ignore,\n  col: ignore,\n  colgroup: ignore,\n  command: ignore,\n  content: ignore,\n  datalist: ignore,\n  dialog: ignore,\n  element: ignore,\n  embed: ignore,\n  frame: ignore,\n  frameset: ignore,\n  isindex: ignore,\n  keygen: ignore,\n  link: ignore,\n  math: ignore,\n  menu: ignore,\n  menuitem: ignore,\n  meta: ignore,\n  nextid: ignore,\n  noembed: ignore,\n  noframes: ignore,\n  optgroup: ignore,\n  option: ignore,\n  param: ignore,\n  script: ignore,\n  shadow: ignore,\n  source: ignore,\n  spacer: ignore,\n  style: ignore,\n  svg: ignore,\n  template: ignore,\n  title: ignore,\n  track: ignore,\n\n  abbr: all,\n  acronym: all,\n  bdi: all,\n  bdo: all,\n  big: all,\n  blink: all,\n  button: all,\n  canvas: all,\n  cite: all,\n  data: all,\n  details: all,\n  dfn: all,\n  font: all,\n  ins: all,\n  label: all,\n  map: all,\n  marquee: all,\n  meter: all,\n  nobr: all,\n  noscript: all,\n  object: all,\n  output: all,\n  progress: all,\n  rb: all,\n  rbc: all,\n  rp: all,\n  rt: all,\n  rtc: all,\n  ruby: all,\n  slot: all,\n  small: all,\n  span: all,\n  sup: all,\n  sub: all,\n  tbody: all,\n  tfoot: all,\n  thead: all,\n  time: all,\n\n  address: wrapChildren,\n  article: wrapChildren,\n  aside: wrapChildren,\n  body: wrapChildren,\n  center: wrapChildren,\n  div: wrapChildren,\n  fieldset: wrapChildren,\n  figcaption: wrapChildren,\n  figure: wrapChildren,\n  form: wrapChildren,\n  footer: wrapChildren,\n  header: wrapChildren,\n  hgroup: wrapChildren,\n  html: wrapChildren,\n  legend: wrapChildren,\n  main: wrapChildren,\n  multicol: wrapChildren,\n  nav: wrapChildren,\n  picture: wrapChildren,\n  section: wrapChildren,\n\n  a,\n  audio: media,\n  b: strong,\n  base,\n  blockquote,\n  br,\n  code: inlineCode,\n  dir: list,\n  dl,\n  dt: li,\n  dd: li,\n  del,\n  em,\n  h1: heading,\n  h2: heading,\n  h3: heading,\n  h4: heading,\n  h5: heading,\n  h6: heading,\n  hr,\n  i: em,\n  iframe,\n  img,\n  image: img,\n  input,\n  kbd: inlineCode,\n  li,\n  listing: code,\n  mark: em,\n  ol: list,\n  p,\n  plaintext: code,\n  pre: code,\n  q,\n  s: del,\n  samp: inlineCode,\n  select,\n  strike: del,\n  strong,\n  summary: p,\n  table,\n  td: tableCell,\n  textarea,\n  th: tableCell,\n  tr: tableRow,\n  tt: inlineCode,\n  u: em,\n  ul: list,\n  var: inlineCode,\n  video: media,\n  wbr,\n  xmp: code\n}\n\nfunction ignore() {}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Root} Root\n */\n\nimport {all} from '../all.js'\nimport {wrap, wrapNeeded} from '../util/wrap.js'\n\n/**\n * @type {Handle}\n * @param {Root} node\n */\nexport function root(h, node) {\n  let children = all(h, node)\n\n  if (h.document || wrapNeeded(children)) {\n    children = wrap(children)\n  }\n\n  return h(node, 'root', children)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h(node, 'text', wrapText(h, node.value))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Comment} Comment\n */\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Comment} node\n */\nexport function comment(h, node) {\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {all} from '../all.js'\nimport {resolve} from '../util/resolve.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function a(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  return h(\n    node,\n    'link',\n    {\n      title: props.title || null,\n      url: resolve(h, String(props.href || '') || null)\n    },\n    all(h, node)\n  )\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function base(h, node) {\n  if (!h.baseFound) {\n    h.frozenBaseUrl =\n      String((node.properties && node.properties.href) || '') || null\n    h.baseFound = true\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {wrapChildren} from '../util/wrap-children.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrapChildren(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function br(h, node) {\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function hr(h, node) {\n  return h(node, 'thematicBreak')\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n */\n\nimport {resolve} from '../util/resolve.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function iframe(h, node) {\n  /** @type {Properties} */\n  // @ts-expect-error: `props` are defined.\n  const props = node.properties\n  const src = String(props.src || '')\n  const title = String(props.title || '')\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    return {\n      type: 'link',\n      title: null,\n      url: resolve(h, src),\n      children: [{type: 'text', value: wrapText(h, title)}]\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').MdastNode} MdastNode\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function q(h, node) {\n  const expected = h.quotes[h.qNesting % h.quotes.length]\n\n  h.qNesting++\n  const contents = all(h, node)\n  h.qNesting--\n\n  contents.unshift({type: 'text', value: expected.charAt(0)})\n\n  contents.push({\n    type: 'text',\n    value: expected.length > 1 ? expected.charAt(1) : expected\n  })\n\n  return contents\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {findSelectedOptions} from '../util/find-selected-options.js'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function select(h, node) {\n  const values = findSelectedOptions(h, node)\n  let index = -1\n  /** @type {Array.<string>} */\n  const results = []\n  /** @type {[string, string|null]} */\n  let value\n\n  while (++index < values.length) {\n    value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length > 0) {\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {toText} from 'hast-util-to-text'\nimport {wrapText} from '../util/wrap-text.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function textarea(h, node) {\n  return h(node, 'text', wrapText(h, toText(node)))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\nimport {all} from '../all.js'\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function tableRow(h, node) {\n  return h(node, 'tableRow', all(h, node))\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Element} Element\n */\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\nexport function wbr(h, node) {\n  return h(node, 'text', '\\u200B')\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Text} Text\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').H} H\n * @typedef {import('./types.js').HWithoutProps} HWithoutProps\n * @typedef {import('./types.js').HWithProps} HWithProps\n * @typedef {import('./types.js').MdastNode} MdastNode\n * @typedef {import('./types.js').MdastRoot} MdastRoot\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {convert} from 'unist-util-is'\nimport {visit} from 'unist-util-visit'\nimport {one} from './one.js'\nimport {handlers} from './handlers/index.js'\nimport {own} from './util/own.js'\n\nexport {one} from './one.js'\nexport {all} from './all.js'\n\nconst block = convert(['heading', 'paragraph', 'root'])\n\n/**\n * @param {Node} tree\n * @param {Options} [options]\n */\nexport function toMdast(tree, options = {}) {\n  /** @type {Object.<string, Element>} */\n  const byId = {}\n  /** @type {MdastNode|MdastRoot} */\n  let mdast\n\n  /**\n   * @type {H}\n   */\n  const h = Object.assign(\n    /**\n     * @type {HWithProps & HWithoutProps}\n     */\n    (\n      /**\n       * @param {Node} node\n       * @param {string} type\n       * @param {Properties|string|Array.<Node>} [props]\n       * @param {string|Array.<Node>} [children]\n       */\n      (node, type, props, children) => {\n        /** @type {Properties|undefined} */\n        let properties\n\n        if (typeof props === 'string' || Array.isArray(props)) {\n          children = props\n          properties = {}\n        } else {\n          properties = props\n        }\n\n        /** @type {Node} */\n        // @ts-expect-error Assume valid `type` and `children`/`value`.\n        const result = {type, ...properties}\n\n        if (typeof children === 'string') {\n          // @ts-expect-error: Looks like a literal.\n          result.value = children\n        } else if (children) {\n          // @ts-expect-error: Looks like a parent.\n          result.children = children\n        }\n\n        if (node.position) {\n          result.position = node.position\n        }\n\n        return result\n      }\n    ),\n    {\n      nodeById: byId,\n      baseFound: false,\n      inTable: false,\n      wrapText: true,\n      /** @type {string|null} */\n      frozenBaseUrl: null,\n      qNesting: 0,\n      handlers: options.handlers\n        ? {...handlers, ...options.handlers}\n        : handlers,\n      document: options.document,\n      checked: options.checked || '[x]',\n      unchecked: options.unchecked || '[ ]',\n      quotes: options.quotes || ['\"']\n    }\n  )\n\n  visit(tree, 'element', (node) => {\n    const id =\n      node.properties &&\n      'id' in node.properties &&\n      String(node.properties.id).toUpperCase()\n\n    if (id && !own.call(byId, id)) {\n      byId[id] = node\n    }\n  })\n\n  // @ts-expect-error: does return a transformer, that does accept any node.\n  rehypeMinifyWhitespace({newlines: options.newlines === true})(tree)\n\n  const result = one(h, tree, undefined)\n\n  if (!result) {\n    mdast = {type: 'root', children: []}\n  } else if (Array.isArray(result)) {\n    mdast = {type: 'root', children: result}\n  } else {\n    mdast = result\n  }\n\n  visit(mdast, 'text', ontext)\n\n  return mdast\n\n  /**\n   * Collapse text nodes, and fix whitespace.\n   * Most of this is taken care of by `rehype-minify-whitespace`, but\n   * we’re generating some whitespace too, and some nodes are in the end\n   * ignored.\n   * So clean up.\n   *\n   * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}\n   */\n  function ontext(node, index, parent) {\n    /* c8 ignore next 3 */\n    if (index === null || !parent) {\n      return\n    }\n\n    const previous = parent.children[index - 1]\n\n    if (previous && previous.type === node.type) {\n      previous.value += node.value\n      parent.children.splice(index, 1)\n\n      if (previous.position && node.position) {\n        previous.position.end = node.position.end\n      }\n\n      // Iterate over the previous node again, to handle its total value.\n      return index - 1\n    }\n\n    node.value = node.value.replace(/[\\t ]*(\\r?\\n|\\r)[\\t ]*/, '$1')\n\n    // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),\n    // as there the whitespace matters.\n    if (parent && block(parent)) {\n      if (!index) {\n        node.value = node.value.replace(/^[\\t ]+/, '')\n      }\n\n      if (index === parent.children.length - 1) {\n        node.value = node.value.replace(/[\\t ]+$/, '')\n      }\n    }\n\n    if (!node.value) {\n      parent.children.splice(index, 1)\n      return index\n    }\n  }\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast-util-to-mdast').Options} Options\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n */\n\nimport {toMdast} from 'hast-util-to-mdast'\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new mdast\n * tree (bridge-mode).\n * Without destination, returns the mdast tree: further plugins run on that\n * tree (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `hast-util-to-mdast`.\n */\nconst rehypeRemark =\n  /**\n   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}\n   */\n  (\n    /**\n     * @param {Processor|Options} [destination]\n     * @param {Options} [options]\n     */\n    function (destination, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {Processor|undefined} */\n      let processor\n\n      if (typeof destination === 'function') {\n        processor = destination\n        settings = options || {}\n      } else {\n        settings = destination || {}\n      }\n\n      if (settings.document === undefined || settings.document === null) {\n        settings = Object.assign({}, settings, {document: true})\n      }\n\n      return processor ? bridge(processor, settings) : mutate(settings)\n    }\n  )\n\nexport default rehypeRemark\n\n/**\n * Bridge-mode.\n * Runs the destination with the new mdast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toMdast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the mdast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}\n */\nfunction mutate(options = {}) {\n  return (node) => {\n    const result = /** @type {MdastRoot} */ (toMdast(node, options))\n    return result\n  }\n}\n","/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n */\n\n/**\n * @param {Context} base\n * @param {Options} extension\n * @returns {Context}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {string} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../util/indent-lines.js').Map} Map\n */\n\nimport {containerFlow} from '../util/container-flow.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {Blockquote} node\n */\nexport function blockquote(node, _, context, safeOptions) {\n  const exit = context.enter('blockquote')\n  const tracker = track(safeOptions)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = indentLines(\n    containerFlow(node, context, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('mdast').Break} Break\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @type {Handle}\n * @param {Break} _\n */\nexport function hardBreak(_, _1, context, safe) {\n  let index = -1\n\n  while (++index < context.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      context.unsafe[index].character === '\\n' &&\n      patternInScope(context.stack, context.unsafe[index])\n    ) {\n      return /[ \\t]/.test(safe.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Context} Context\n */\n\n/**\n * @param {Code} node\n * @param {Context} context\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, context) {\n  return Boolean(\n    !context.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../util/indent-lines.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {Code} node\n */\nexport function code(node, _, context, safeOptions) {\n  const marker = checkFence(context)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, context)) {\n    const exit = context.enter('codeIndented')\n    const value = indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = track(safeOptions)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = context.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = context.enter('codeFencedLang' + suffix)\n    value += tracker.move(\n      safe(context, node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = context.enter('codeFencedMeta' + suffix)\n    value += tracker.move(' ')\n    value += tracker.move(\n      safe(context, node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['quote'], undefined>}\n */\nexport function checkQuote(context) {\n  const marker = context.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {track} from '../util/track.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @type {Handle}\n * @param {Emphasis} node\n */\nexport function emphasis(node, _, context, safeOptions) {\n  const marker = checkEmphasis(context)\n  const exit = context.enter('emphasis')\n  const tracker = track(safeOptions)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    containerPhrasing(node, context, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @type {Handle}\n * @param {Emphasis} _\n */\nfunction emphasisPeek(_, _1, context) {\n  return context.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['emphasis'], undefined>}\n */\nexport function checkEmphasis(context) {\n  const marker = context.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {Context} context\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, context) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (context.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../types.js').Handle} Handle\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @type {Handle}\n * @param {HTML} node\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @type {Handle}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\nimage.peek = imagePeek\n\n/**\n * @type {Handle}\n * @param {Image} node\n */\nexport function image(node, _, context, safeOptions) {\n  const quote = checkQuote(context)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = context.enter('image')\n  let subexit = context.enter('label')\n  const tracker = track(safeOptions)\n  let value = tracker.move('![')\n  value += tracker.move(\n    safe(context, node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = context.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      safe(context, node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = context.enter('destinationRaw')\n    value += tracker.move(\n      safe(context, node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = context.enter('title' + suffix)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      safe(context, node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @type {Handle}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {association} from '../util/association.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @type {Handle}\n * @param {ImageReference} node\n */\nexport function imageReference(node, _, context, safeOptions) {\n  const type = node.referenceType\n  const exit = context.enter('imageReference')\n  let subexit = context.enter('label')\n  const tracker = track(safeOptions)\n  let value = tracker.move('![')\n  const alt = safe(context, node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = context.stack\n  context.stack = []\n  subexit = context.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = safe(context, association(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  context.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @type {Handle}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {Context} context\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, context) {\n  const raw = toString(node)\n\n  return Boolean(\n    !context.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\nlink.peek = linkPeek\n\n/**\n * @type {Handle}\n * @param {Link} node\n */\nexport function link(node, _, context, safeOptions) {\n  const quote = checkQuote(context)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = track(safeOptions)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, context)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = context.stack\n    context.stack = []\n    exit = context.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      containerPhrasing(node, context, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    context.stack = stack\n    return value\n  }\n\n  exit = context.enter('link')\n  subexit = context.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    containerPhrasing(node, context, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = context.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      safe(context, node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = context.enter('destinationRaw')\n    value += tracker.move(\n      safe(context, node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = context.enter('title' + suffix)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      safe(context, node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @type {Handle}\n * @param {Link} node\n */\nfunction linkPeek(node, _, context) {\n  return formatLinkAsAutolink(node, context) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {association} from '../util/association.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @type {Handle}\n * @param {LinkReference} node\n */\nexport function linkReference(node, _, context, safeOptions) {\n  const type = node.referenceType\n  const exit = context.enter('linkReference')\n  let subexit = context.enter('label')\n  const tracker = track(safeOptions)\n  let value = tracker.move('[')\n  const text = containerPhrasing(node, context, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = context.stack\n  context.stack = []\n  subexit = context.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = safe(context, association(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  context.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @type {Handle}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bulletOrdered'], undefined>}\n */\nexport function checkBulletOrdered(context) {\n  const marker = context.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['rule'], undefined>}\n */\nexport function checkRule(context) {\n  const marker = context.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {track} from '../util/track.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @type {Handle}\n * @param {Strong} node\n */\nexport function strong(node, _, context, safeOptions) {\n  const marker = checkStrong(context)\n  const exit = context.enter('strong')\n  const tracker = track(safeOptions)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    containerPhrasing(node, context, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @type {Handle}\n * @param {Strong} _\n */\nfunction strongPeek(_, _1, context) {\n  return context.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['strong'], undefined>}\n */\nexport function checkStrong(context) {\n  const marker = context.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['fence'], undefined>}\n */\nexport function checkFence(context) {\n  const marker = context.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Get the count of the longest repeating streak of `character` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} character\n *   Single character to look for.\n * @returns {number}\n *   Count of most frequent adjacent `character`s in `value`.\n */\nexport function longestStreak(value, character) {\n  const source = String(value)\n  let index = source.indexOf(character)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = source.indexOf(character, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {association} from '../util/association.js'\nimport {checkQuote} from '../util/check-quote.js'\nimport {safe} from '../util/safe.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {Definition} node\n */\nexport function definition(node, _, context, safeOptions) {\n  const quote = checkQuote(context)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = context.enter('definition')\n  let subexit = context.enter('label')\n  const tracker = track(safeOptions)\n  let value = tracker.move('[')\n  value += tracker.move(\n    safe(context, association(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = context.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      safe(context, node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = context.enter('destinationRaw')\n    value += tracker.move(\n      safe(context, node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = context.enter('title' + suffix)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      safe(context, node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {Heading} node\n */\nexport function heading(node, _, context, safeOptions) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = track(safeOptions)\n\n  if (formatHeadingAsSetext(node, context)) {\n    const exit = context.enter('headingSetext')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = context.enter('headingAtx')\n  const subexit = context.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = containerPhrasing(node, context, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (context.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {containerFlow} from '../util/container-flow.js'\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @type {Handle}\n * @param {List} node\n */\nexport function list(node, parent, context, safeOptions) {\n  const exit = context.enter('list')\n  const bulletCurrent = context.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(context) : checkBullet(context)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(context)\n    : checkBulletOther(context)\n  const bulletLastUsed = context.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? context.options.bulletOrderedOther\n      : context.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      context.stack[context.stack.length - 1] === 'list' &&\n      context.stack[context.stack.length - 2] === 'listItem' &&\n      context.stack[context.stack.length - 3] === 'list' &&\n      context.stack[context.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      context.indexStack[context.indexStack.length - 1] === 0 &&\n      context.indexStack[context.indexStack.length - 2] === 0 &&\n      context.indexStack[context.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(context) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  context.bulletCurrent = bullet\n  const value = containerFlow(node, context, safeOptions)\n  context.bulletLastUsed = bullet\n  context.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bulletOrdered'], undefined>}\n */\nexport function checkBulletOrderedOther(context) {\n  const bulletOrdered = checkBulletOrdered(context)\n  const bulletOrderedOther = context.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bullet'], undefined>}\n */\nexport function checkBulletOther(context) {\n  const bullet = checkBullet(context)\n  const bulletOther = context.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {containerPhrasing} from '../util/container-phrasing.js'\n\n/**\n * @type {Handle}\n * @param {Paragraph} node\n */\nexport function paragraph(node, _, context, safeOptions) {\n  const exit = context.enter('paragraph')\n  const subexit = context.enter('phrasing')\n  const value = containerPhrasing(node, context, safeOptions)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {containerFlow} from '../util/container-flow.js'\n\n/**\n * @type {Handle}\n * @param {Root} node\n */\nexport function root(node, _, context, safeOptions) {\n  return containerFlow(node, context, safeOptions)\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {safe} from '../util/safe.js'\n\n/**\n * @type {Handle}\n * @param {Text} node\n */\nexport function text(node, _, context, safeOptions) {\n  return safe(context, node.value, safeOptions)\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @type {Handle}\n * @param {ThematicBreak} _\n */\nexport function thematicBreak(_, _1, context) {\n  const value = (\n    checkRule(context) + (context.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(context))\n\n  return context.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['ruleRepetition'], undefined>}\n */\nexport function checkRuleRepetition(context) {\n  const repetition = context.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, context) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, context) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, context)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? context.options.bulletOrderedOther\n      : context.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, context)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').Unsafe} Unsafe\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\n\n/**\n * @param {Node} tree\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {Context} */\n  // @ts-expect-error: we’ll add `handle` later.\n  const context = {\n    enter,\n    stack: [],\n    unsafe: [],\n    join: [],\n    handlers: {},\n    options: {},\n    indexStack: []\n  }\n\n  configure(context, {unsafe, join, handlers: handle})\n  configure(context, options)\n\n  if (context.options.tightDefinitions) {\n    configure(context, {join: [joinDefinition]})\n  }\n\n  /** @type {Handle} */\n  context.handle = zwitch('type', {\n    invalid,\n    // @ts-expect-error: hush.\n    unknown,\n    // @ts-expect-error: hush.\n    handlers: context.handlers\n  })\n\n  let result = context.handle(tree, null, context, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Context['enter']} */\n  function enter(name) {\n    context.stack.push(name)\n    return exit\n\n    function exit() {\n      context.stack.pop()\n    }\n  }\n}\n\n/**\n * @type {Handle}\n * @param {unknown} value\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(node) {\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n","import remarkStringify from './lib/index.js'\n\nexport default remarkStringify\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/** @type {import('unified').Plugin<[Options]|void[], Node, string>} */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n"],"names":["all","h","parent","nodes","children","values","index","length","child","type","tagName","result","one","Array","isArray","push","own","hasOwnProperty","wrapText","value","replace","node","fn","properties","dataMdast","call","handlers","unknown","phrasing","convert","wrap","runs","head","wrapNeeded","onphrasing","onnonphrasing","queue","nonphrasing","identity","flattened","concat","split","flatten","undefined","rest","extend","n","wrapChildren","resolve","url","frozenBaseUrl","String","URL","findAfter","test","is","Error","Number","POSITIVE_INFINITY","indexOf","searchLineFeeds","searchTabOrSpaces","br","convertElement","p","cell","row","notRendered","Boolean","hidden","open","blockOrCaption","toText","results","count","options","block","whitespace","inferWhitespace","breakBefore","breakAfter","collectText","innerTextCollection","repeat","join","prefix","suffix","items","unshift","collectElement","collectPreText","match","end","lines","start","lastIndex","exec","trimAndCollapseSpacesAndTabs","slice","charCodeAt","props","noWrap","pre","isCode","code","classList","lang","className","meta","del","listItemsSpread","spread","wrapListItems","checked","div","dt","dd","handle","ordered","em","heading","depth","charAt","img","src","title","alt","inlineCode","option","findSelectedOptions","findOptions","size","Math","min","parseInt","multiple","selectedOptions","hasProperty","content","label","datalist","input","li","checkbox","clone","ol","list","source","video","media","poster","linkInFallbackContent","visit","EXIT","toString","strong","tableCell","rowSpan","colSpan","data","thead","tr","toCells","root","document","text","comment","doctype","ignore","applet","area","basefont","bgsound","caption","col","colgroup","command","dialog","element","embed","frame","frameset","isindex","keygen","link","math","menu","menuitem","nextid","noembed","noframes","optgroup","param","script","shadow","spacer","style","svg","template","track","abbr","acronym","bdi","bdo","big","blink","button","canvas","cite","details","dfn","font","ins","map","marquee","meter","nobr","noscript","object","output","progress","rb","rbc","rp","rt","rtc","ruby","slot","small","span","sup","sub","tbody","tfoot","time","address","article","aside","body","center","fieldset","figcaption","figure","form","footer","header","hgroup","html","legend","main","multicol","nav","picture","section","a","href","audio","b","base","baseFound","blockquote","dir","dl","clean","groups","group","titles","definitions","h1","h2","h3","h4","h5","h6","hr","i","iframe","image","placeholder","texts","disabled","toUpperCase","nodeById","kbd","listing","mark","plaintext","q","expected","quotes","qNesting","contents","s","samp","select","strike","summary","table","inTable","headless","rowIndex","cellIndex","align","SKIP","inspect","rows","toRows","columns","cells","otherRowIndex","colIndex","newCells","splice","Object","keys","alignIndex","td","textarea","th","tt","u","ul","var","wbr","xmp","toMdast","tree","mdast","byId","assign","position","unchecked","id","rehypeMinifyWhitespace","newlines","ontext","previous","destination","settings","processor","file","next","run","error","bridge","mutate","configure","extension","key","extensions","line","_","blank","hardBreak","_1","context","safe","unsafe","character","patternInScope","stack","before","formatCodeAsIndented","fences","checkQuote","marker","quote","emphasis","safeOptions","checkEmphasis","exit","enter","tracker","move","containerPhrasing","after","current","peek","formatHeadingAsSetext","literalWithBreak","setext","subexit","imageReference","referenceType","reference","association","formatLinkAsAutolink","raw","resourceLink","linkReference","checkBulletOrdered","bulletOrdered","checkRule","rule","checkStrong","shift","indentLines","containerFlow","break","fence","checkFence","sequence","max","longestStreak","encode","definition","rank","lastIndexOf","closeAtx","bulletCurrent","bullet","checkBullet","bulletOther","bulletOrderedOther","checkBulletOrderedOther","checkBulletOther","bulletLastUsed","useDifferentMarker","firstListItem","indexStack","item","listItem","paragraph","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","left","right","fullPhrasingSpans","inConstruct","notInConstruct","atBreak","invalid","joinDefinition","this","Compiler","tightDefinitions","zwitch","now","column","lineShift","name","pop","toMarkdown"],"sourceRoot":""}