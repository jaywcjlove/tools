{"version":3,"file":"static/js/5276.592240ac.chunk.js","mappings":"oGAIA,IAAIA,EAAc,GAsClB,SAASC,EAAOC,EAAQC,EAASC,GAC/B,IAAIC,EAAGC,EAAGC,EAAMC,EAAUC,EACtBC,EAAS,GAcb,IAZuB,kBAAZP,IAETC,EAAeD,EACfA,EAAUF,EAAOU,cAGQ,qBAAhBP,IACTA,GAAc,GAGhBK,EA9CF,SAAwBN,GACtB,IAAIE,EAAGO,EAAIH,EAAQT,EAAYG,GAC/B,GAAIM,EAAS,OAAOA,EAIpB,IAFAA,EAAQT,EAAYG,GAAW,GAE1BE,EAAI,EAAGA,EAAI,IAAKA,IACnBO,EAAKC,OAAOC,aAAaT,GAErB,cAAcU,KAAKH,GAErBH,EAAMO,KAAKJ,GAEXH,EAAMO,KAAK,KAAO,IAAMX,EAAEY,SAAS,IAAIC,eAAeC,OAAO,IAIjE,IAAKd,EAAI,EAAGA,EAAIF,EAAQiB,OAAQf,IAC9BI,EAAMN,EAAQkB,WAAWhB,IAAMF,EAAQE,GAGzC,OAAOI,EAyBCa,CAAenB,GAElBE,EAAI,EAAGC,EAAIJ,EAAOkB,OAAQf,EAAIC,EAAGD,IAGpC,GAFAE,EAAOL,EAAOmB,WAAWhB,GAErBD,GAAwB,KAATG,GAAyBF,EAAI,EAAIC,GAC9C,iBAAiBS,KAAKb,EAAOiB,MAAMd,EAAI,EAAGA,EAAI,IAChDK,GAAUR,EAAOiB,MAAMd,EAAGA,EAAI,GAC9BA,GAAK,OAKT,GAAIE,EAAO,IACTG,GAAUD,EAAMF,QAIlB,GAAIA,GAAQ,OAAUA,GAAQ,MAA9B,CACE,GAAIA,GAAQ,OAAUA,GAAQ,OAAUF,EAAI,EAAIC,IAC9CE,EAAWN,EAAOmB,WAAWhB,EAAI,KACjB,OAAUG,GAAY,MAAQ,CAC5CE,GAAUa,mBAAmBrB,EAAOG,GAAKH,EAAOG,EAAI,IACpDA,IACA,SAGJK,GAAU,iBAIZA,GAAUa,mBAAmBrB,EAAOG,IAGtC,OAAOK,EAGTT,EAAOU,aAAiB,uBACxBV,EAAOuB,eAAiB,YAGxBC,EAAOC,QAAUzB,G,maCvFJ0B,EAAU,CACrBC,SAIF,SAA2BC,GACzB,IAOIC,EAPEC,EAAeF,EAAQG,QAC3BC,KAAKC,OAAOC,WAAWC,gBAUzB,SAAoC7B,GAClC,GAAa,OAATA,EAEF,YADAsB,EAAQQ,QAAQ9B,GAOlB,OAHAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAASE,EAAc,iBAI7C,SAA0BxB,GAExB,OADAsB,EAAQS,MAAM,aACPG,EAAUlC,MAlBnB,OAAOwB,EAsBP,SAASU,EAAUlC,GACjB,IAAMmC,EAAQb,EAAQS,MAAM,YAAa,CACvCK,YAAa,OACbb,SAAAA,IAQF,OALIA,IACFA,EAASc,KAAOF,GAGlBZ,EAAWY,EACJG,EAAKtC,GAId,SAASsC,EAAKtC,GACZ,OAAa,OAATA,GACFsB,EAAQU,KAAK,aACbV,EAAQU,KAAK,kBACbV,EAAQQ,QAAQ9B,KAIduC,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,aACNE,IAGTZ,EAAQQ,QAAQ9B,GACTsC,M,cCxDEE,EAAW,CACtBnB,SASF,SAA4BC,GAC1B,IAOImB,EAGAC,EAGAC,EAbEC,EAAOlB,KAGPmB,EAAQ,GACVC,EAAY,EAUhB,OAAOC,EAGP,SAASA,EAAM/C,GAWb,GAAI8C,EAAYD,EAAMhC,OAAQ,CAC5B,IAAMmC,EAAOH,EAAMC,GAEnB,OADAF,EAAKK,eAAiBD,EAAK,GACpB1B,EAAQG,QACbuB,EAAK,GAAGE,aACRC,EACAC,EAHK9B,CAILtB,GAGJ,OAAOoD,EAAmBpD,GAI5B,SAASmD,EAAiBnD,GAKxB,GAJA8C,IAIIF,EAAKK,eAAeI,WAAY,CAClCT,EAAKK,eAAeI,gBAAaC,EAE7Bb,GACFc,IAUF,IANA,IAIIC,EAJEC,EAAmBb,EAAKc,OAAO7C,OACjC8C,EAAkBF,EAKfE,KACL,GACsC,SAApCf,EAAKc,OAAOC,GAAiB,IACY,cAAzCf,EAAKc,OAAOC,GAAiB,GAAGC,KAChC,CACAJ,EAAQZ,EAAKc,OAAOC,GAAiB,GAAGE,IACxC,MAIJC,EAAehB,GAIf,IAFA,IAAIiB,EAAQN,EAELM,EAAQnB,EAAKc,OAAO7C,QACzB+B,EAAKc,OAAOK,GAAO,GAAGF,IAAMG,OAAOC,OAAO,GAAIT,GAC9CO,IAWF,OARAG,EAAAA,EAAAA,GACEtB,EAAKc,OACLC,EAAkB,EAClB,EACAf,EAAKc,OAAO9C,MAAM6C,IAGpBb,EAAKc,OAAO7C,OAASkD,EACdX,EAAmBpD,GAG5B,OAAO+C,EAAM/C,GAIf,SAASoD,EAAmBpD,GAM1B,GAAI8C,IAAcD,EAAMhC,OAAQ,CAI9B,IAAK4B,EACH,OAAO0B,EAAkBnE,GAK3B,GAAIyC,EAAU2B,kBAAoB3B,EAAU2B,iBAAiBC,SAC3D,OAAOC,EAAUtE,GAKnB4C,EAAK2B,UAAYC,QACf/B,EAAU2B,mBAAqB3B,EAAUgC,+BAK7C,OADA7B,EAAKK,eAAiB,GACf3B,EAAQoD,MACbC,EACAC,EACAC,EAHKvD,CAILtB,GAIJ,SAAS4E,EAAqB5E,GAG5B,OAFIyC,GAAWc,IACfO,EAAehB,GACRqB,EAAkBnE,GAI3B,SAAS6E,EAAsB7E,GAG7B,OAFA4C,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,MAAQlC,IAAcD,EAAMhC,OACxD8B,EAAkBC,EAAKmC,MAAME,OACtBX,EAAUtE,GAInB,SAASmE,EAAkBnE,GAGzB,OADA4C,EAAKK,eAAiB,GACf3B,EAAQG,QACbkD,EACAO,EACAZ,EAHKhD,CAILtB,GAIJ,SAASkF,EAAkBlF,GAIzB,OAHA8C,IACAD,EAAMpC,KAAK,CAACmC,EAAKwB,iBAAkBxB,EAAKK,iBAEjCkB,EAAkBnE,GAI3B,SAASsE,EAAUtE,GACjB,OAAa,OAATA,GACEyC,GAAWc,IACfO,EAAe,QACfxC,EAAQQ,QAAQ9B,KAIlByC,EAAYA,GAAaG,EAAKjB,OAAOwD,KAAKvC,EAAKmC,OAC/CzD,EAAQS,MAAM,YAAa,CACzBK,YAAa,OACbb,SAAUmB,EACV0C,WAAY3C,IAEP4C,EAAarF,IAItB,SAASqF,EAAarF,GACpB,OAAa,OAATA,GACFsF,EAAahE,EAAQU,KAAK,cAAc,GACxC8B,EAAe,QACfxC,EAAQQ,QAAQ9B,KAIduC,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQQ,QAAQ9B,GAChBsF,EAAahE,EAAQU,KAAK,cAE1Bc,EAAY,EACZF,EAAK2B,eAAYjB,EACVP,IAGTzB,EAAQQ,QAAQ9B,GACTqF,GAQT,SAASC,EAAanD,EAAOoD,GAC3B,IAAMC,EAAS5C,EAAK6C,YAAYtD,GAwChC,GAvCIoD,GAAKC,EAAO/E,KAAK,MACrB0B,EAAMZ,SAAWmB,EACbA,IAAYA,EAAWL,KAAOF,GAClCO,EAAaP,EACbM,EAAUiD,WAAWvD,EAAMY,OAC3BN,EAAUkD,MAAMH,GAkCZ5C,EAAKjB,OAAOmD,KAAK3C,EAAMY,MAAMiC,MAAO,CAGtC,IAFA,IAAIjB,EAAQtB,EAAUiB,OAAO7C,OAEtBkD,KACL,GAEEtB,EAAUiB,OAAOK,GAAO,GAAGhB,MAAMkC,OAAStC,KACxCF,EAAUiB,OAAOK,GAAO,GAAGF,KAC3BpB,EAAUiB,OAAOK,GAAO,GAAGF,IAAIoB,OAAStC,GAI1C,OAcJ,IATA,IAIIiD,EAGApC,EAPEC,EAAmBb,EAAKc,OAAO7C,OACjC8C,EAAkBF,EAQfE,KACL,GACsC,SAApCf,EAAKc,OAAOC,GAAiB,IACY,cAAzCf,EAAKc,OAAOC,GAAiB,GAAGC,KAChC,CACA,GAAIgC,EAAM,CACRpC,EAAQZ,EAAKc,OAAOC,GAAiB,GAAGE,IACxC,MAGF+B,GAAO,EAQX,IAJA9B,EAAehB,GAEfiB,EAAQN,EAEDM,EAAQnB,EAAKc,OAAO7C,QACzB+B,EAAKc,OAAOK,GAAO,GAAGF,IAAMG,OAAOC,OAAO,GAAIT,GAC9CO,KAGFG,EAAAA,EAAAA,GACEtB,EAAKc,OACLC,EAAkB,EAClB,EACAf,EAAKc,OAAO9C,MAAM6C,IAGpBb,EAAKc,OAAO7C,OAASkD,GAQzB,SAASD,EAAe+B,GAGtB,IAFA,IAAI9B,EAAQlB,EAAMhC,OAEXkD,KAAU8B,GAAM,CACrB,IAAMC,EAAQjD,EAAMkB,GACpBnB,EAAKK,eAAiB6C,EAAM,GAC5BA,EAAM,GAAG9D,KAAK+D,KAAKnD,EAAMtB,GAG3BuB,EAAMhC,OAASgF,EAGjB,SAAStC,IACPd,EAAUkD,MAAM,CAAC,OACjBjD,OAAaY,EACbb,OAAYa,EACZV,EAAKK,eAAeI,gBAAaC,KA/U/BqB,EAAqB,CACzBtD,SAmVF,SAA2BC,EAAS0E,EAAIC,GACtC,OAAOhE,EAAAA,EAAAA,GACLX,EACAA,EAAQG,QAAQC,KAAKC,OAAOC,WAAWY,SAAUwD,EAAIC,GACrD,aACAvE,KAAKC,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBAAkB9C,EAAY,K,cCrWxE,SAAS+C,EAAY3C,GA0B1B,IAxBA,IAII4C,EAGAC,EAGAC,EAGAC,EAGAC,EAGAC,EAGAC,EAtBEC,EAAQ,GACV9C,GAAS,IAuBJA,EAAQL,EAAO7C,QAAQ,CAC9B,KAAOkD,KAAS8C,GACd9C,EAAQ8C,EAAM9C,GAMhB,GAHAuC,EAAQ5C,EAAOK,GAIbA,GACkB,cAAlBuC,EAAM,GAAG1C,MACqB,mBAA9BF,EAAOK,EAAQ,GAAG,GAAGH,QAGrB4C,EAAa,IADbG,EAAYL,EAAM,GAAGlB,WAAW1B,QAIP7C,QACW,oBAAlC8F,EAAUH,GAAY,GAAG5C,OAEzB4C,GAAc,GAIdA,EAAaG,EAAU9F,QACW,YAAlC8F,EAAUH,GAAY,GAAG5C,MAEzB,OAAS4C,EAAaG,EAAU9F,QACQ,YAAlC8F,EAAUH,GAAY,GAAG5C,MAIS,cAAlC+C,EAAUH,GAAY,GAAG5C,OAC3B+C,EAAUH,GAAY,GAAGM,6BAA8B,EACvDN,KAMR,GAAiB,UAAbF,EAAM,GACJA,EAAM,GAAGlE,cACX4B,OAAOC,OAAO4C,EAAOE,EAAWrD,EAAQK,IACxCA,EAAQ8C,EAAM9C,GACd6C,GAAO,QAGN,GAAIN,EAAM,GAAGU,WAAY,CAI5B,IAHAR,EAAazC,EACbwC,OAAYjD,EAELkD,MAIoB,gBAHzBC,EAAa/C,EAAO8C,IAGP,GAAG5C,MACS,oBAAvB6C,EAAW,GAAG7C,OAEQ,UAAlB6C,EAAW,KACTF,IACF7C,EAAO6C,GAAW,GAAG3C,KAAO,mBAG9B6C,EAAW,GAAG7C,KAAO,aACrB2C,EAAYC,GAOdD,IAEFD,EAAM,GAAGzC,IAAMG,OAAOC,OAAO,GAAIP,EAAO6C,GAAW,GAAGxD,QAEtD2D,EAAahD,EAAO9C,MAAM2F,EAAWxC,IAC1BkD,QAAQX,IACnBpC,EAAAA,EAAAA,GAAOR,EAAQ6C,EAAWxC,EAAQwC,EAAY,EAAGG,KAKvD,OAAQE,EAUV,SAASG,EAAWrD,EAAQwD,GA+B1B,IA9BA,IAiBI1B,EAGAjE,EApBEY,EAAQuB,EAAOwD,GAAY,GAC3BC,EAAUzD,EAAOwD,GAAY,GAC/BE,EAAgBF,EAAa,EAG3BG,EAAiB,GACjBC,EACJnF,EAAMiD,YAAc+B,EAAQxF,OAAOQ,EAAMC,aAAaD,EAAMY,OACxDwE,EAAcD,EAAU5D,OAGxBmD,EAAQ,GAGRW,EAAO,GAOTzD,GAAS,EAGT0D,EAAUtF,EACVuF,EAAS,EACT3E,EAAQ,EACN4E,EAAS,CAAC5E,GAGT0E,GAAS,CAEd,KAAO/D,IAAS0D,GAAe,KAAOK,IAItCJ,EAAe5G,KAAK2G,GAEfK,EAAQrC,aACXI,EAAS2B,EAAQ1B,YAAYgC,GAExBA,EAAQpF,MACXmD,EAAO/E,KAAK,MAGVc,GACF+F,EAAU5B,WAAW+B,EAAQ1E,OAG3B0E,EAAQX,8BACVQ,EAAUM,oCAAqC,GAGjDN,EAAU3B,MAAMH,GAEZiC,EAAQX,8BACVQ,EAAUM,wCAAqCtE,IAInD/B,EAAWkG,EACXA,EAAUA,EAAQpF,KAMpB,IAFAoF,EAAUtF,IAED4B,EAAQwD,EAAY1G,QAGC,SAA1B0G,EAAYxD,GAAO,IACW,UAA9BwD,EAAYxD,EAAQ,GAAG,IACvBwD,EAAYxD,GAAO,GAAGH,OAAS2D,EAAYxD,EAAQ,GAAG,GAAGH,MACzD2D,EAAYxD,GAAO,GAAGhB,MAAMiC,OAASuC,EAAYxD,GAAO,GAAGF,IAAImB,OAE/DjC,EAAQgB,EAAQ,EAChB4D,EAAOlH,KAAKsC,GAEZ0E,EAAQrC,gBAAa9B,EACrBmE,EAAQlG,cAAW+B,EACnBmE,EAAUA,EAAQpF,MAmBtB,IAfAiF,EAAU5D,OAAS,GAIf+D,GAEFA,EAAQrC,gBAAa9B,EACrBmE,EAAQlG,cAAW+B,GAEnBqE,EAAOE,MAIT9D,EAAQ4D,EAAO9G,OAERkD,KAAS,CACd,IAAMnD,EAAQ2G,EAAY3G,MAAM+G,EAAO5D,GAAQ4D,EAAO5D,EAAQ,IACxDhB,EAAQsE,EAAeQ,MAC7BhB,EAAMI,QAAQ,CAAClE,EAAOA,EAAQnC,EAAMC,OAAS,KAC7CqD,EAAAA,EAAAA,GAAOR,EAAQX,EAAO,EAAGnC,GAK3B,IAFAmD,GAAS,IAEAA,EAAQ8C,EAAMhG,QACrB2G,EAAKE,EAASb,EAAM9C,GAAO,IAAM2D,EAASb,EAAM9C,GAAO,GACvD2D,GAAUb,EAAM9C,GAAO,GAAK8C,EAAM9C,GAAO,GAAK,EAGhD,OAAOyD,ECtOF,IAAMpG,EAAU,CACrBC,SAsBF,SAAyBC,EAAS0E,GAEhC,IAAIzE,EACJ,OAGA,SAAevB,GAKb,OAJAsB,EAAQS,MAAM,WACdR,EAAWD,EAAQS,MAAM,eAAgB,CACvCK,YAAa,YAERE,EAAKtC,IAId,SAASsC,EAAKtC,GACZ,OAAa,OAATA,EACK8H,EAAW9H,IAGhBuC,EAAAA,EAAAA,IAAmBvC,GACdsB,EAAQoD,MACbqD,EACAC,EACAF,EAHKxG,CAILtB,IAGJsB,EAAQQ,QAAQ9B,GACTsC,GAIT,SAASwF,EAAW9H,GAGlB,OAFAsB,EAAQU,KAAK,gBACbV,EAAQU,KAAK,WACNgE,EAAGhG,GAIZ,SAASgI,EAAgBhI,GAQvB,OAPAsB,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,gBACbT,EAASc,KAAOf,EAAQS,MAAM,eAAgB,CAC5CK,YAAa,UACbb,SAAAA,IAEFA,EAAWA,EAASc,KACbC,IArET2F,QAeF,SAAwBvE,GAEtB,OADA2C,EAAY3C,GACLA,IAbHqE,EAAwB,CAC5B1G,SAqEF,SAA8BC,EAAS0E,EAAIC,GACzC,IAAMrD,EAAOlB,KACb,OAGA,SAAwB1B,GAKtB,OAJAsB,EAAQU,KAAK,gBACbV,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAAS4G,EAAU,eAIzC,SAASA,EAASlI,GAChB,GAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GACtC,OAAOiG,EAAIjG,GAGb,IAAMmI,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAE9C,OACG+B,EAAKjB,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,iBAC9C+B,GACiB,eAAjBA,EAAK,GAAGvE,MACRuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,QAAU,EAEzCmF,EAAGhG,GAGLsB,EAAQiD,UAAU3B,EAAKjB,OAAOC,WAAWuD,KAAMc,EAAKD,EAApD1E,CAAwDtB,KAlGjEqI,SAAS,GCbJ,IAAMlD,EAAO,CAClB9D,SAIF,SAAwBC,GACtB,IAAMsB,EAAOlB,KACP4G,EAAUhH,EAAQG,QAEtB8G,EAAAA,GAmBF,SAAuBvI,GACrB,GAAa,OAATA,EAEF,YADAsB,EAAQQ,QAAQ9B,GAQlB,OAJAsB,EAAQS,MAAM,mBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,mBACbY,EAAKwB,sBAAmBd,EACjBgF,IA3BPhH,EAAQG,QACNC,KAAKC,OAAOC,WAAW4G,YACvBC,GACAxG,EAAAA,EAAAA,GACEX,EACAA,EAAQG,QACNC,KAAKC,OAAOC,WAAWuD,KACvBsD,EACAnH,EAAQG,QAAQL,EAASqH,IAE3B,gBAIN,OAAOH,EAiBP,SAASG,EAAezI,GACtB,GAAa,OAATA,EASJ,OAJAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACbY,EAAKwB,sBAAmBd,EACjBgF,EARLhH,EAAQQ,QAAQ9B,MC9Cf,IAAM0I,EAAW,CACtBC,WAAYC,KAEDjJ,EAASkJ,EAAkB,UAC3BC,EAAOD,EAAkB,QAMtC,SAASA,EAAkBE,GACzB,MAAO,CACL1H,SAOF,SAAwBC,GACtB,IAAMsB,EAAOlB,KACPE,EAAaF,KAAKC,OAAOC,WAAWmH,GACpCD,EAAOxH,EAAQG,QAAQG,EAAYmB,EAAOiG,GAChD,OAAOjG,EAGP,SAASA,EAAM/C,GACb,OAAOiJ,EAAQjJ,GAAQ8I,EAAK9I,GAAQgJ,EAAQhJ,GAI9C,SAASgJ,EAAQhJ,GACf,GAAa,OAATA,EAOJ,OAFAsB,EAAQS,MAAM,QACdT,EAAQQ,QAAQ9B,GACTsC,EANLhB,EAAQQ,QAAQ9B,GAUpB,SAASsC,EAAKtC,GACZ,OAAIiJ,EAAQjJ,IACVsB,EAAQU,KAAK,QACN8G,EAAK9I,KAGdsB,EAAQQ,QAAQ9B,GACTsC,GAOT,SAAS2G,EAAQjJ,GACf,GAAa,OAATA,EACF,OAAO,EAGT,IAAMkJ,EAAOtH,EAAW5B,GACpB+D,GAAS,EAEb,GAAImF,EACF,OAASnF,EAAQmF,EAAKrI,QAAQ,CAC5B,IAAMmC,EAAOkG,EAAKnF,GAElB,IAAKf,EAAKzB,UAAYyB,EAAKzB,SAASwE,KAAKnD,EAAMA,EAAKrB,UAClD,OAAO,EAKb,OAAO,IA9DToH,WAAYC,EACA,SAAVG,EAAmBI,OAAyB7F,IAsElD,SAASsF,EAAeQ,GACtB,OAGA,SAAwB1F,EAAQyD,GAC9B,IAGIpF,EAHAgC,GAAS,EAMb,OAASA,GAASL,EAAO7C,aACTyC,IAAVvB,EACE2B,EAAOK,IAAoC,SAA1BL,EAAOK,GAAO,GAAGH,OACpC7B,EAAQgC,EACRA,KAEQL,EAAOK,IAAoC,SAA1BL,EAAOK,GAAO,GAAGH,OAExCG,IAAUhC,EAAQ,IACpB2B,EAAO3B,GAAO,GAAG8B,IAAMH,EAAOK,EAAQ,GAAG,GAAGF,IAC5CH,EAAOQ,OAAOnC,EAAQ,EAAGgC,EAAQhC,EAAQ,GACzCgC,EAAQhC,EAAQ,GAGlBA,OAAQuB,GAIZ,OAAO8F,EAAgBA,EAAc1F,EAAQyD,GAAWzD,GAe5D,SAASyF,EAAuBzF,EAAQyD,GAGtC,IAFA,IAAID,EAAa,IAERA,GAAcxD,EAAO7C,QAC5B,IACGqG,IAAexD,EAAO7C,QACU,eAA/B6C,EAAOwD,GAAY,GAAGtD,OACW,SAAnCF,EAAOwD,EAAa,GAAG,GAAGtD,KAC1B,CAUA,IATA,IAAMtB,EAAOoB,EAAOwD,EAAa,GAAG,GAC9BmC,EAASlC,EAAQ1B,YAAYnD,GAC/ByB,EAAQsF,EAAOxI,OACfyI,GAAe,EACfzD,EAAO,EAGP0D,OAAI,EAEDxF,KAAS,CACd,IAAMyF,EAAQH,EAAOtF,GAErB,GAAqB,kBAAVyF,EAAoB,CAG7B,IAFAF,EAAcE,EAAM3I,OAEyB,KAAtC2I,EAAM1I,WAAWwI,EAAc,IACpCzD,IACAyD,IAGF,GAAIA,EAAa,MACjBA,GAAe,OAEZ,IAAe,IAAXE,EACPD,GAAO,EACP1D,SACK,IAAe,IAAX2D,EAEJ,CAELzF,IACA,OAIJ,GAAI8B,EAAM,CACR,IAAM1D,EAAQ,CACZyB,KACEsD,IAAexD,EAAO7C,QAAU0I,GAAQ1D,EAAO,EAC3C,aACA,oBACN9C,MAAO,CACLiC,KAAM1C,EAAKuB,IAAImB,KACfyE,OAAQnH,EAAKuB,IAAI4F,OAAS5D,EAC1BZ,OAAQ3C,EAAKuB,IAAIoB,OAASY,EAC1B6D,OAAQpH,EAAKS,MAAM2G,OAAS3F,EAC5B4F,aAAc5F,EACVuF,EACAhH,EAAKS,MAAM4G,aAAeL,GAEhCzF,IAAKG,OAAOC,OAAO,GAAI3B,EAAKuB,MAE9BvB,EAAKuB,IAAMG,OAAOC,OAAO,GAAI9B,EAAMY,OAE/BT,EAAKS,MAAMkC,SAAW3C,EAAKuB,IAAIoB,OACjCjB,OAAOC,OAAO3B,EAAMH,IAEpBuB,EAAOQ,OACLgD,EACA,EACA,CAAC,QAAS/E,EAAOgF,GACjB,CAAC,OAAQhF,EAAOgF,IAElBD,GAAc,GAIlBA,IAIJ,OAAOxD,E,cC7KF,SAASkG,EAAgBjI,EAAQkI,EAAYC,GAElD,IAAItG,EAAQQ,OAAOC,OACjB6F,EACI9F,OAAOC,OAAO,GAAI6F,GAClB,CACE9E,KAAM,EACNyE,OAAQ,EACRxE,OAAQ,GAEd,CACEyE,OAAQ,EACRC,cAAe,IAKbI,EAAc,GAGdC,EAAuB,GAGzBX,EAAS,GAGTxG,EAAQ,GAUNvB,EAAU,CACdQ,QA2IF,SAAiB9B,IACXuC,EAAAA,EAAAA,IAAmBvC,IACrBwD,EAAMwB,OACNxB,EAAMiG,OAAS,EACfjG,EAAMyB,SAAoB,IAAVjF,EAAc,EAAI,EAClCiK,MACmB,IAAVjK,IACTwD,EAAMiG,SACNjG,EAAMyB,UAGJzB,EAAMmG,aAAe,EACvBnG,EAAMkG,UAENlG,EAAMmG,eAIFnG,EAAMmG,eAAiBN,EAAO7F,EAAMkG,QAAQ7I,SAC9C2C,EAAMmG,cAAgB,EACtBnG,EAAMkG,WAIVvC,EAAQ5F,SAAWvB,GAER,GApKX+B,MAwKF,SAAe6B,EAAMsG,GAGnB,IAAM/H,EAAQ+H,GAAU,GAKxB,OAJA/H,EAAMyB,KAAOA,EACbzB,EAAMY,MAAQgC,IACdoC,EAAQzD,OAAOjD,KAAK,CAAC,QAAS0B,EAAOgF,IACrCtE,EAAMpC,KAAK0B,GACJA,GA/KPH,KAmLF,SAAc4B,GACZ,IAAMzB,EAAQU,EAAMgF,MAGpB,OAFA1F,EAAM0B,IAAMkB,IACZoC,EAAQzD,OAAOjD,KAAK,CAAC,OAAQ0B,EAAOgF,IAC7BhF,GAtLPV,QAAS0I,GA8LX,SAA+BC,EAAWC,GACxCC,EAAUF,EAAWC,EAAKP,SA9L1BpF,MAAOyF,EAAiBI,GACxBhG,UAAW4F,EAAiBI,EAAmB,CAC7ChG,WAAW,KAST4C,EAAU,CACd5F,SAAU,KACVvB,KAAM,KACNiD,eAAgB,GAChBS,OAAQ,GACR/B,OAAAA,EACA8D,YAAAA,EACA2C,eA6CF,SAAwBjG,EAAOqI,GAC7B,OAsYJ,SAAyBnB,EAAQmB,GAC/B,IAMIC,EANA1G,GAAS,EAGP5D,EAAS,GAKf,OAAS4D,EAAQsF,EAAOxI,QAAQ,CAC9B,IAAM2I,EAAQH,EAAOtF,GAGjB2G,OAAK,EAET,GAAqB,kBAAVlB,EACTkB,EAAQlB,OAER,OAAQA,GACN,KAAM,EACJkB,EAAQ,KACR,MAGF,KAAM,EACJA,EAAQ,KACR,MAGF,KAAM,EACJA,EAAQ,OACR,MAGF,KAAM,EACJA,EAAQF,EAAa,IAAM,KAC3B,MAGF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1BC,EAAQ,IACR,MAGF,QAEEA,EAAQpK,OAAOC,aAAaiJ,GAIlCiB,GAAmB,IAAXjB,EACRrJ,EAAOM,KAAKiK,GAGd,OAAOvK,EAAOwK,KAAK,IA7bVC,CAAgBnF,EAAYtD,GAAQqI,IA7C3CzF,IAAAA,EACAW,WA0DF,SAAoBgF,GAClBX,EAAYW,EAAM1F,MAAQ0F,EAAMjB,OAChCQ,KA3DAtE,MAwBF,SAAe/E,GAIb,GAHAyI,GAAS5I,EAAAA,EAAAA,GAAK4I,EAAQzI,GACtBiK,IAEkC,OAA9BxB,EAAOA,EAAOxI,OAAS,GACzB,MAAO,GAMT,OAHAyJ,EAAUT,EAAY,GAEtB1C,EAAQzD,QAASiF,EAAAA,EAAAA,GAAWqB,EAAsB7C,EAAQzD,OAAQyD,GAC3DA,EAAQzD,SA3BboH,EAAQjB,EAAWxI,SAAS0E,KAAKoB,EAAS7F,GAa9C,OAJIuI,EAAWlB,YACbqB,EAAqBvJ,KAAKoJ,GAGrB1C,EA0BP,SAAS1B,EAAYtD,GACnB,OA6VJ,SAAqBkH,EAAQlH,GAC3B,IAMI4I,EANEC,EAAa7I,EAAMY,MAAM2G,OACzBuB,EAAmB9I,EAAMY,MAAM4G,aAC/BuB,EAAW/I,EAAM0B,IAAI6F,OACrByB,EAAiBhJ,EAAM0B,IAAI8F,aAK7BqB,IAAeE,EAEjBH,EAAO,CAAC1B,EAAO2B,GAAYpK,MAAMqK,EAAkBE,KAEnDJ,EAAO1B,EAAOzI,MAAMoK,EAAYE,GAE5BD,GAAoB,IAEtBF,EAAK,GAAKA,EAAK,GAAGnK,MAAMqK,IAGtBE,EAAiB,GAEnBJ,EAAKtK,KAAK4I,EAAO6B,GAAUtK,MAAM,EAAGuK,KAIxC,OAAOJ,EAvXEK,CAAY/B,EAAQlH,GAI7B,SAAS4C,IACP,OAAOf,OAAOC,OAAO,GAAIT,GAsB3B,SAASqH,IAIP,IAFA,IAAIQ,EAEG7H,EAAMkG,OAASL,EAAOxI,QAAQ,CACnC,IAAM2I,EAAQH,EAAO7F,EAAMkG,QAE3B,GAAqB,kBAAVF,EAOT,IANA6B,EAAa7H,EAAMkG,OAEflG,EAAMmG,aAAe,IACvBnG,EAAMmG,aAAe,GAIrBnG,EAAMkG,SAAW2B,GACjB7H,EAAMmG,aAAeH,EAAM3I,QAE3ByK,EAAG9B,EAAM1I,WAAW0C,EAAMmG,oBAG5B2B,EAAG9B,IAWT,SAAS8B,EAAGtL,QACCsD,EACItD,EACf8K,EAAQA,EAAM9K,GAmEhB,SAASuK,EAAkBgB,EAAGlB,GAC5BA,EAAKmB,UASP,SAASrB,EAAiBsB,EAAUvB,GAClC,OAWA,SAActI,EAAY8J,EAAaC,GAErC,IAAIC,EAGAC,EAGAzH,EAGAiG,EACJ,OAAOyB,MAAMC,QAAQnK,GAEjBoK,EAAuBpK,GACvB,aAAcA,EACdoK,EAAuB,CAACpK,IAS5B,SAA+BqK,GAC7B,OAAOlJ,EAGP,SAASA,EAAM/C,GACb,IAAMkM,EAAe,OAATlM,GAAiBiM,EAAIjM,GAC3BmM,EAAe,OAATnM,GAAiBiM,EAAI9F,KAQjC,OAAO6F,EAPM,GAAH,eAIJF,MAAMC,QAAQG,GAAOA,EAAMA,EAAM,CAACA,GAAO,KAJrC,OAKJJ,MAAMC,QAAQI,GAAOA,EAAMA,EAAM,CAACA,GAAO,KAExCH,CAA6BhM,IAtBpCoM,CAAsBxK,GAgC1B,SAASoK,EAAuB9C,GAI9B,OAHA0C,EAAmB1C,EACnB2C,EAAiB,EAEG,IAAhB3C,EAAKrI,OACA8K,EAGFU,EAAgBnD,EAAK2C,IAS9B,SAASQ,EAAgBjC,GACvB,OAGA,SAAepK,GAKbqK,EA4ER,WACE,IAAMiC,EAAavH,IACbwH,EAAgBpF,EAAQ5F,SACxBiL,EAAwBrF,EAAQ/C,iBAChCqI,EAAmBtF,EAAQzD,OAAO7C,OAClC6L,EAAaZ,MAAMhC,KAAKjH,GAC9B,MAAO,CACL2I,QAAAA,EACA1B,KAAM2C,GAQR,SAASjB,IACPhI,EAAQ8I,EACRnF,EAAQ5F,SAAWgL,EACnBpF,EAAQ/C,iBAAmBoI,EAC3BrF,EAAQzD,OAAO7C,OAAS4L,EACxB5J,EAAQ6J,EACRzC,KAlGW0C,GACPvI,EAAmBgG,EAEdA,EAAU/B,UACblB,EAAQ/C,iBAAmBgG,GAG7B,GACEA,EAAUwC,MACVzF,EAAQxF,OAAOC,WAAWsE,QAAQC,KAAKC,SAASgE,EAAUwC,MAE1D,OAAO3G,EAAIjG,GAGb,OAAOoK,EAAU/I,SAAS0E,KAIxBmE,EAASlG,OAAOC,OAAOD,OAAO6I,OAAO1F,GAAU+C,GAAU/C,EACzD7F,EACA0E,EACAC,EAPKmE,CAQLpK,IAKN,SAASgG,EAAGhG,GAGV,OAFW,EACXyL,EAASrH,EAAkBiG,GACpBqB,EAIT,SAASzF,EAAIjG,GAIX,OAHW,EACXqK,EAAKmB,YAECK,EAAiBD,EAAiB/K,OAC/BwL,EAAgBT,EAAiBC,IAGnCF,IAUb,SAASrB,EAAUF,EAAWN,GACxBM,EAAUzB,aAAeqB,EAAqB5D,SAASgE,IACzDJ,EAAqBvJ,KAAK2J,GAGxBA,EAAUnC,UACZ/D,EAAAA,EAAAA,GACEiD,EAAQzD,OACRoG,EACA3C,EAAQzD,OAAO7C,OAASiJ,EACxBM,EAAUnC,QAAQd,EAAQzD,OAAO9C,MAAMkJ,GAAO3C,IAI9CiD,EAAU0C,YACZ3F,EAAQzD,OAAS0G,EAAU0C,UAAU3F,EAAQzD,OAAQyD,IAyCzD,SAAS8C,IACHzG,EAAMwB,QAAQ+E,GAAevG,EAAMiG,OAAS,IAC9CjG,EAAMiG,OAASM,EAAYvG,EAAMwB,MACjCxB,EAAMyB,QAAU8E,EAAYvG,EAAMwB,MAAQ,I,cChenC+H,EAAgB,CAC3BH,KAAM,gBACNvL,SAIF,SAA+BC,EAAS0E,EAAIC,GAC1C,IAGI+G,EAHAnH,EAAO,EAIX,OAGA,SAAe7F,GAGb,OAFAsB,EAAQS,MAAM,iBACdiL,EAAShN,EACFiJ,EAAQjJ,IAIjB,SAASiJ,EAAQjJ,GACf,OAAIA,IAASgN,GACX1L,EAAQS,MAAM,yBACPkL,EAASjN,KAGdkN,EAAAA,EAAAA,IAAclN,IACTiC,EAAAA,EAAAA,GAAaX,EAAS2H,EAAS,aAA/BhH,CAA6CjC,GAGlD6F,EAAO,GAAe,OAAT7F,KAAkBuC,EAAAA,EAAAA,IAAmBvC,GAC7CiG,EAAIjG,IAGbsB,EAAQU,KAAK,iBACNgE,EAAGhG,IAIZ,SAASiN,EAASjN,GAChB,OAAIA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GAChB6F,IACOoH,IAGT3L,EAAQU,KAAK,yBACNiH,EAAQjJ,OCvCZ,IAAMkJ,EAAO,CAClB0D,KAAM,OACNvL,SAuBF,SAA2BC,EAAS0E,EAAIC,GACtC,IAAMrD,EAAOlB,KACPyG,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAC1CsM,EACFhF,GAAyB,eAAjBA,EAAK,GAAGvE,KACZuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,OACtC,EACFgF,EAAO,EACX,OAGA,SAAe7F,GACb,IAAMoN,EACJxK,EAAKK,eAAeW,OACV,KAAT5D,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eAEN,GACW,kBAAToN,GACKxK,EAAKK,eAAe+J,QAAUhN,IAAS4C,EAAKK,eAAe+J,QAC5DK,EAAAA,EAAAA,IAAWrN,GACf,CAQA,GAPK4C,EAAKK,eAAeW,OACvBhB,EAAKK,eAAeW,KAAOwJ,EAC3B9L,EAAQS,MAAMqL,EAAM,CAClBpG,YAAY,KAIH,kBAAToG,EAEF,OADA9L,EAAQS,MAAM,kBACE,KAAT/B,GAAwB,KAATA,EAClBsB,EAAQoD,MAAMqI,EAAe9G,EAAKqH,EAAlChM,CAA4CtB,GAC5CsN,EAAStN,GAGf,IAAK4C,EAAK2B,WAAsB,KAATvE,EAGrB,OAFAsB,EAAQS,MAAM,kBACdT,EAAQS,MAAM,iBACPwL,EAAOvN,GAIlB,OAAOiG,EAAIjG,IAIb,SAASuN,EAAOvN,GACd,OAAIqN,EAAAA,EAAAA,IAAWrN,MAAW6F,EAAO,IAC/BvE,EAAQQ,QAAQ9B,GACTuN,KAIL3K,EAAK2B,WAAasB,EAAO,KAC1BjD,EAAKK,eAAe+J,OACjBhN,IAAS4C,EAAKK,eAAe+J,OACpB,KAAThN,GAAwB,KAATA,IAEnBsB,EAAQU,KAAK,iBACNsL,EAAStN,IAGXiG,EAAIjG,GAMb,SAASsN,EAAStN,GAKhB,OAJAsB,EAAQS,MAAM,kBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,kBACbY,EAAKK,eAAe+J,OAASpK,EAAKK,eAAe+J,QAAUhN,EACpDsB,EAAQoD,MACb6D,EAAAA,EACA3F,EAAK2B,UAAY0B,EAAMuH,EACvBlM,EAAQG,QACNgM,EACAC,EACAC,IAMN,SAASH,EAAQxN,GAGf,OAFA4C,EAAKK,eAAe2K,kBAAmB,EACvCT,IACOO,EAAY1N,GAIrB,SAAS2N,EAAY3N,GACnB,OAAIkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQS,MAAM,4BACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,4BACN0L,GAGFzH,EAAIjG,GAIb,SAAS0N,EAAY1N,GAInB,OAHA4C,EAAKK,eAAe4C,KAClBsH,EACAvK,EAAKwF,eAAe9G,EAAQU,KAAK,mBAAmB,GAAMnB,OACrDmF,EAAGhG,KApIZkD,aAAc,CACZ7B,SA2IJ,SAAkCC,EAAS0E,EAAIC,GAC7C,IAAMrD,EAAOlB,KAEb,OADAkB,EAAKK,eAAeI,gBAAaC,EAC1BhC,EAAQoD,MAAM6D,EAAAA,GAGrB,SAAiBvI,GAMf,OALA4C,EAAKK,eAAe4K,kBAClBjL,EAAKK,eAAe4K,mBACpBjL,EAAKK,eAAe2K,kBAGf3L,EAAAA,EAAAA,GACLX,EACA0E,EACA,iBACApD,EAAKK,eAAe4C,KAAO,EAJtB5D,CAKLjC,MAIJ,SAAkBA,GAChB,GAAI4C,EAAKK,eAAe4K,qBAAsBX,EAAAA,EAAAA,IAAclN,GAG1D,OAFA4C,EAAKK,eAAe4K,uBAAoBvK,EACxCV,EAAKK,eAAe2K,sBAAmBtK,EAChCwK,EAAiB9N,GAK1B,OAFA4C,EAAKK,eAAe4K,uBAAoBvK,EACxCV,EAAKK,eAAe2K,sBAAmBtK,EAChChC,EAAQG,QAAQsM,EAAiB/H,EAAI8H,EAArCxM,CAAuDtB,MAIhE,SAAS8N,EAAiB9N,GAKxB,OAHA4C,EAAKK,eAAeI,YAAa,EAEjCT,EAAK2B,eAAYjB,GACVrB,EAAAA,EAAAA,GACLX,EACAA,EAAQG,QAAQyH,EAAMlD,EAAIC,GAC1B,aACArD,EAAKjB,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBACzC9C,EACA,EANCrB,CAOLjC,MAvLJgC,KAuNF,SAAyBV,GACvBA,EAAQU,KAAKN,KAAKuB,eAAeW,QApN7B6J,EAAoC,CACxCpM,SA0NF,SAA0CC,EAAS0E,EAAIC,GACrD,IAAMrD,EAAOlB,KACb,OAAOO,EAAAA,EAAAA,GACLX,GASF,SAAqBtB,GACnB,IAAMmI,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAC9C,QAAQqM,EAAAA,EAAAA,IAAclN,IACpBmI,GACiB,6BAAjBA,EAAK,GAAGvE,KACNoC,EAAGhG,GACHiG,EAAIjG,KAbR,2BACA4C,EAAKjB,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBACzC9C,EACA,IAjON+E,SAAS,GAIL0F,EAAkB,CACtB1M,SAoLF,SAAwBC,EAAS0E,EAAIC,GACnC,IAAMrD,EAAOlB,KACb,OAAOO,EAAAA,EAAAA,GACLX,GAOF,SAAqBtB,GACnB,IAAMmI,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAC9C,OAAOsH,GACY,mBAAjBA,EAAK,GAAGvE,MACRuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,SAAW+B,EAAKK,eAAe4C,KACnEG,EAAGhG,GACHiG,EAAIjG,KAXR,iBACA4C,EAAKK,eAAe4C,KAAO,IAzL7BwC,SAAS,GC3BJ,IAAM2F,EAAa,CACxBpB,KAAM,aACNvL,SAQF,SAAiCC,EAAS0E,EAAIC,GAC5C,IAAMrD,EAAOlB,KACb,OAGA,SAAe1B,GACb,GAAa,KAATA,EAAa,CACf,IAAM8K,EAAQlI,EAAKK,eAanB,OAXK6H,EAAMmD,OACT3M,EAAQS,MAAM,aAAc,CAC1BiF,YAAY,IAEd8D,EAAMmD,MAAO,GAGf3M,EAAQS,MAAM,oBACdT,EAAQS,MAAM,oBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,oBACNkM,EAGT,OAAOjI,EAAIjG,IAIb,SAASkO,EAAMlO,GACb,OAAIkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQS,MAAM,8BACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,8BACbV,EAAQU,KAAK,oBACNgE,IAGT1E,EAAQU,KAAK,oBACNgE,EAAGhG,MA5CZkD,aAAc,CACZ7B,SAgDJ,SAAwCC,EAAS0E,EAAIC,GACnD,OAAOhE,EAAAA,EAAAA,GACLX,EACAA,EAAQG,QAAQuM,EAAYhI,EAAIC,GAChC,aACAvE,KAAKC,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBAAkB9C,EAAY,KAnD7EtB,KAwDF,SAAcV,GACZA,EAAQU,KAAK,gBClDR,SAASmM,EACd7M,EACA0E,EACAC,EACArC,EACAwK,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAQD,GAAOE,OAAOC,kBACxBC,EAAU,EACd,OAGA,SAAe5O,GACb,GAAa,KAATA,EAMF,OALAsB,EAAQS,MAAM6B,GACdtC,EAAQS,MAAMqM,GACd9M,EAAQS,MAAMsM,GACd/M,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqM,GACNQ,EAGT,GAAa,OAAT7O,GAA0B,KAATA,IAAe8O,EAAAA,EAAAA,IAAa9O,GAC/C,OAAOiG,EAAIjG,GASb,OANAsB,EAAQS,MAAM6B,GACdtC,EAAQS,MAAMuM,GACdhN,EAAQS,MAAMwM,GACdjN,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAER2M,EAAe/O,IAIxB,SAAS6O,EAA0B7O,GACjC,OAAa,KAATA,GACFsB,EAAQS,MAAMsM,GACd/M,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqM,GACb/M,EAAQU,KAAKoM,GACb9M,EAAQU,KAAK4B,GACNoC,IAGT1E,EAAQS,MAAMwM,GACdjN,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAER4M,EAAoBhP,IAI7B,SAASgP,EAAoBhP,GAC3B,OAAa,KAATA,GACFsB,EAAQU,KAAK,eACbV,EAAQU,KAAKuM,GACNM,EAA0B7O,IAGtB,OAATA,GAA0B,KAATA,IAAeuC,EAAAA,EAAAA,IAAmBvC,GAC9CiG,EAAIjG,IAGbsB,EAAQQ,QAAQ9B,GACA,KAATA,EAAciP,EAA4BD,GAInD,SAASC,EAA0BjP,GACjC,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCsB,EAAQQ,QAAQ9B,GACTgP,GAGFA,EAAoBhP,GAI7B,SAAS+O,EAAe/O,GACtB,OAAa,KAATA,IACI4O,EAAUH,EAAcxI,EAAIjG,IAClCsB,EAAQQ,QAAQ9B,GACT+O,GAGI,KAAT/O,EACG4O,KAQLtN,EAAQQ,QAAQ9B,GACT+O,IARLzN,EAAQU,KAAK,eACbV,EAAQU,KAAKuM,GACbjN,EAAQU,KAAKsM,GACbhN,EAAQU,KAAK4B,GACNoC,EAAGhG,IAOD,OAATA,IAAiBkP,EAAAA,EAAAA,IAA0BlP,GACzC4O,EAAgB3I,EAAIjG,IACxBsB,EAAQU,KAAK,eACbV,EAAQU,KAAKuM,GACbjN,EAAQU,KAAKsM,GACbhN,EAAQU,KAAK4B,GACNoC,EAAGhG,KAGR8O,EAAAA,EAAAA,IAAa9O,GAAciG,EAAIjG,IACnCsB,EAAQQ,QAAQ9B,GACA,KAATA,EAAcmP,EAAuBJ,GAI9C,SAASI,EAAqBnP,GAC5B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCsB,EAAQQ,QAAQ9B,GACT+O,GAGFA,EAAe/O,IClInB,SAASoP,EAAa9N,EAAS0E,EAAIC,EAAKrC,EAAMyL,EAAYd,GAC/D,IAIIjM,EAJEM,EAAOlB,KACTmE,EAAO,EAIX,OAGA,SAAe7F,GAMb,OALAsB,EAAQS,MAAM6B,GACdtC,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqN,GACb/N,EAAQS,MAAMwM,GACPtF,GAIT,SAASA,EAAQjJ,GACf,OACW,OAATA,GACS,KAATA,GACU,KAATA,IAAgBsC,GAQP,KAATtC,IACE6F,GACD,2BAA4BjD,EAAKjB,OAAOC,YAC1CiE,EAAO,IAEAI,EAAIjG,GAGA,KAATA,GACFsB,EAAQU,KAAKuM,GACbjN,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqN,GACb/N,EAAQU,KAAK4B,GACNoC,IAGLzD,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACNiH,IAGT3H,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAERkN,EAAMtP,IAIf,SAASsP,EAAMtP,GACb,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAuC,EAAAA,EAAAA,IAAmBvC,IACnB6F,IAAS,KAETvE,EAAQU,KAAK,eACNiH,EAAQjJ,KAGjBsB,EAAQQ,QAAQ9B,GAChBsC,EAAOA,KAAS4K,EAAAA,EAAAA,IAAclN,GACd,KAATA,EAAcuP,EAAcD,GAIrC,SAASC,EAAYvP,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCsB,EAAQQ,QAAQ9B,GAChB6F,IACOyJ,GAGFA,EAAMtP,ICvFV,SAASwP,EAAalO,EAAS0E,EAAIC,EAAKrC,EAAMyL,EAAYd,GAE/D,IAAIvB,EACJ,OAGA,SAAehN,GAMb,OALAsB,EAAQS,MAAM6B,GACdtC,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqN,GACbrC,EAAkB,KAAThN,EAAc,GAAKA,EACrByP,GAIT,SAASA,EAAkBzP,GACzB,OAAIA,IAASgN,GACX1L,EAAQS,MAAMsN,GACd/N,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAKqN,GACb/N,EAAQU,KAAK4B,GACNoC,IAGT1E,EAAQS,MAAMwM,GACPmB,EAAa1P,IAItB,SAAS0P,EAAa1P,GACpB,OAAIA,IAASgN,GACX1L,EAAQU,KAAKuM,GACNkB,EAAkBzC,IAGd,OAAThN,EACKiG,EAAIjG,IAGTuC,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAASoO,EAAc,gBAG7CpO,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAERuN,EAAM3P,IAIf,SAAS2P,EAAM3P,GACb,OAAIA,IAASgN,GAAmB,OAAThN,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACzDsB,EAAQU,KAAK,eACN0N,EAAa1P,KAGtBsB,EAAQQ,QAAQ9B,GACA,KAATA,EAAc4P,EAAcD,GAIrC,SAASC,EAAY5P,GACnB,OAAIA,IAASgN,GAAmB,KAAThN,GACrBsB,EAAQQ,QAAQ9B,GACT2P,GAGFA,EAAM3P,IC9EV,SAAS6P,EAAkBvO,EAAS0E,GAEzC,IAAIJ,EACJ,OAGA,SAAS7C,EAAM/C,GACb,IAAIuC,EAAAA,EAAAA,IAAmBvC,GAKrB,OAJAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACb4D,GAAO,EACA7C,EAGT,IAAImK,EAAAA,EAAAA,IAAclN,GAChB,OAAOiC,EAAAA,EAAAA,GACLX,EACAyB,EACA6C,EAAO,aAAe,aAHjB3D,CAILjC,GAGJ,OAAOgG,EAAGhG,I,cCjBD8P,EAAa,CACxBlD,KAAM,aACNvL,SAUF,SAA4BC,EAAS0E,EAAIC,GACvC,IAGI8J,EAHEnN,EAAOlB,KAIb,OAGA,SAAe1B,GAEb,OADAsB,EAAQS,MAAM,cACPqN,EAAarJ,KAClBnD,EACAtB,EACA0O,EACA/J,EACA,kBACA,wBACA,wBAPKmJ,CAQLpP,IAIJ,SAASgQ,EAAWhQ,GAKlB,OAJA+P,GAAaE,EAAAA,EAAAA,GACXrN,EAAKwF,eAAexF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAAG,IAAID,MAAM,GAAI,IAG3D,KAATZ,GACFsB,EAAQS,MAAM,oBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,oBAEN6N,EACLvO,EACA6M,EACE7M,EACAA,EAAQG,QACNyO,GACAjO,EAAAA,EAAAA,GAAaX,EAAS4M,EAAO,eAC7BjM,EAAAA,EAAAA,GAAaX,EAAS4M,EAAO,eAE/BjI,EACA,wBACA,+BACA,qCACA,2BACA,iCAKCA,EAAIjG,GAIb,SAASkO,EAAMlO,GACb,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,cAERY,EAAKjB,OAAOwO,QAAQ/J,SAAS2J,IAChCnN,EAAKjB,OAAOwO,QAAQ1P,KAAKsP,GAGpB/J,EAAGhG,IAGLiG,EAAIjG,MAxETkQ,EAAiB,CACrB7O,SA4EF,SAAuBC,EAAS0E,EAAIC,GAClC,OAGA,SAAejG,GACb,OAAOkP,EAAAA,EAAAA,IAA0BlP,GAC7B6P,EAAkBvO,EAAS8O,EAA3BP,CAAmC7P,GACnCiG,EAAIjG,IAIV,SAASoQ,EAAOpQ,GACd,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzBwP,EACLlO,GACAW,EAAAA,EAAAA,GAAaX,EAAS4M,EAAO,cAC7BjI,EACA,kBACA,wBACA,wBANKuJ,CAOLxP,GAGGiG,EAAIjG,GAIb,SAASkO,EAAMlO,GACb,OAAgB,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GAAQgG,EAAGhG,GAAQiG,EAAIjG,KAvGpEqI,SAAS,GCdJ,IAAMgI,EAAe,CAC1BzD,KAAM,eACNvL,SAUF,SAA8BC,EAAS0E,EAAIC,GACzC,IAAMrD,EAAOlB,KACb,OAGA,SAAe1B,GAEb,OADAsB,EAAQS,MAAM,iBACPE,EAAAA,EAAAA,GAAaX,EAASgP,EAAkB,aAAc,EAAtDrO,CAA6DjC,IAItE,SAASsQ,EAAiBtQ,GACxB,IAAMmI,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAC9C,OAAOsH,GACY,eAAjBA,EAAK,GAAGvE,MACRuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,QAAU,EAC9C0P,EAAYvQ,GACZiG,EAAIjG,GAIV,SAASuQ,EAAYvQ,GACnB,OAAa,OAATA,EACKkO,EAAMlO,IAGXuC,EAAAA,EAAAA,IAAmBvC,GACdsB,EAAQG,QAAQ+O,EAAiBD,EAAarC,EAA9C5M,CAAqDtB,IAG9DsB,EAAQS,MAAM,iBACPX,EAAQpB,IAIjB,SAASoB,EAAQpB,GACf,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,iBACNuO,EAAYvQ,KAGrBsB,EAAQQ,QAAQ9B,GACToB,GAIT,SAAS8M,EAAMlO,GAEb,OADAsB,EAAQU,KAAK,gBACNgE,EAAGhG,MAtDRwQ,EAAkB,CACtBnP,SA0DF,SAAiCC,EAAS0E,EAAIC,GAC5C,IAAMrD,EAAOlB,KACb,OAAOqB,EAGP,SAASA,EAAM/C,GAEb,OAAI4C,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,MACvBiB,EAAIjG,IAGTuC,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACNe,IAGFd,EAAAA,EAAAA,GAAaX,EAASiP,EAAa,aAAc,EAAjDtO,CAAwDjC,GAIjE,SAASuQ,EAAYvQ,GACnB,IAAMmI,EAAOvF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAC9C,OAAOsH,GACY,eAAjBA,EAAK,GAAGvE,MACRuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,QAAU,EAC9CmF,EAAGhG,IACHuC,EAAAA,EAAAA,IAAmBvC,GACnB+C,EAAM/C,GACNiG,EAAIjG,KAvFVqI,SAAS,GCHJ,IAAMoI,EAAa,CACxB7D,KAAM,aACNvL,SA4DF,SAA4BC,EAAS0E,EAAIC,GACvC,IAAMrD,EAAOlB,KACTmE,EAAO,EACX,OAGA,SAAe7F,GAGb,OAFAsB,EAAQS,MAAM,cACdT,EAAQS,MAAM,sBACP2O,EAAgB1Q,IAIzB,SAAS0Q,EAAgB1Q,GACvB,OAAa,KAATA,GAAe6F,IAAS,GAC1BvE,EAAQQ,QAAQ9B,GACT0Q,GAGI,OAAT1Q,IAAiBkP,EAAAA,EAAAA,IAA0BlP,IAC7CsB,EAAQU,KAAK,sBACNY,EAAK2B,UAAYyB,EAAGhG,GAAQ2Q,EAAa3Q,IAG3CiG,EAAIjG,GAIb,SAAS2Q,EAAa3Q,GACpB,OAAa,KAATA,GACFsB,EAAQS,MAAM,sBACPkL,EAASjN,IAGL,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,cACNgE,EAAGhG,KAGRkN,EAAAA,EAAAA,IAAclN,IACTiC,EAAAA,EAAAA,GAAaX,EAASqP,EAAc,aAApC1O,CAAkDjC,IAG3DsB,EAAQS,MAAM,kBACPO,EAAKtC,IAId,SAASiN,EAASjN,GAChB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTiN,IAGT3L,EAAQU,KAAK,sBACN2O,EAAa3Q,IAItB,SAASsC,EAAKtC,GACZ,OAAa,OAATA,GAA0B,KAATA,IAAekP,EAAAA,EAAAA,IAA0BlP,IAC5DsB,EAAQU,KAAK,kBACN2O,EAAa3Q,KAGtBsB,EAAQQ,QAAQ9B,GACTsC,KA7HT2F,QAIF,SAA2BvE,EAAQyD,GACjC,IAII/F,EAGA0H,EAPAhB,EAAapE,EAAO7C,OAAS,EAC7BW,EAAe,EAQkB,eAAjCkC,EAAOlC,GAAc,GAAGoC,OAC1BpC,GAAgB,GAIhBsG,EAAa,EAAItG,GACc,eAA/BkC,EAAOoE,GAAY,GAAGlE,OAEtBkE,GAAc,GAIiB,uBAA/BpE,EAAOoE,GAAY,GAAGlE,OACrBpC,IAAiBsG,EAAa,GAC5BA,EAAa,EAAItG,GACmB,eAAnCkC,EAAOoE,EAAa,GAAG,GAAGlE,QAE9BkE,GAActG,EAAe,IAAMsG,EAAa,EAAI,GAGlDA,EAAatG,IACfJ,EAAU,CACRwC,KAAM,iBACNb,MAAOW,EAAOlC,GAAc,GAAGuB,MAC/Bc,IAAKH,EAAOoE,GAAY,GAAGjE,KAE7BiF,EAAO,CACLlF,KAAM,YACNb,MAAOW,EAAOlC,GAAc,GAAGuB,MAC/Bc,IAAKH,EAAOoE,GAAY,GAAGjE,IAE3BzB,YAAa,SAEf8B,EAAAA,EAAAA,GAAOR,EAAQlC,EAAcsG,EAAatG,EAAe,EAAG,CAC1D,CAAC,QAASJ,EAAS+F,GACnB,CAAC,QAAS2B,EAAM3B,GAChB,CAAC,OAAQ2B,EAAM3B,GACf,CAAC,OAAQ/F,EAAS+F,MAItB,OAAOzD,IC/DF,IAAMkN,EAAkB,CAC7BhE,KAAM,kBACNvL,SA+DF,SAAiCC,EAAS0E,EAAIC,GAC5C,IAII+G,EAGA6D,EAPEjO,EAAOlB,KACTqC,EAAQnB,EAAKc,OAAO7C,OAQxB,KAAOkD,KAGL,GACiC,eAA/BnB,EAAKc,OAAOK,GAAO,GAAGH,MACS,eAA/BhB,EAAKc,OAAOK,GAAO,GAAGH,MACS,YAA/BhB,EAAKc,OAAOK,GAAO,GAAGH,KACtB,CACAiN,EAA2C,cAA/BjO,EAAKc,OAAOK,GAAO,GAAGH,KAClC,MAIJ,OAGA,SAAe5D,GACb,IAAK4C,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,QAAUpC,EAAK2B,WAAasM,GAI3D,OAHAvP,EAAQS,MAAM,qBACdT,EAAQS,MAAM,6BACdiL,EAAShN,EACF8Q,EAAgB9Q,GAGzB,OAAOiG,EAAIjG,IAIb,SAAS8Q,EAAgB9Q,GACvB,OAAIA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GACT8Q,IAGTxP,EAAQU,KAAK,8BACNC,EAAAA,EAAAA,GAAaX,EAASyP,EAAoB,aAA1C9O,CAAwDjC,IAIjE,SAAS+Q,EAAmB/Q,GAC1B,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,qBACNgE,EAAGhG,IAGLiG,EAAIjG,KArHb8M,UAIF,SAAkCpJ,EAAQyD,GACxC,IAGI/F,EAGA0H,EAGAgH,EATA/L,EAAQL,EAAO7C,OAYnB,KAAOkD,KACL,GAAyB,UAArBL,EAAOK,GAAO,GAAgB,CAChC,GAA8B,YAA1BL,EAAOK,GAAO,GAAGH,KAAoB,CACvCxC,EAAU2C,EACV,MAG4B,cAA1BL,EAAOK,GAAO,GAAGH,OACnBkF,EAAO/E,OAIqB,YAA1BL,EAAOK,GAAO,GAAGH,MAEnBF,EAAOQ,OAAOH,EAAO,GAGlB+L,GAAwC,eAA1BpM,EAAOK,GAAO,GAAGH,OAClCkM,EAAa/L,GAKnB,IAAMiN,EAAU,CACdpN,KAAM,gBACNb,MAAOiB,OAAOC,OAAO,GAAIP,EAAOoF,GAAM,GAAG/F,OACzCc,IAAKG,OAAOC,OAAO,GAAIP,EAAOA,EAAO7C,OAAS,GAAG,GAAGgD,MAGtDH,EAAOoF,GAAM,GAAGlF,KAAO,oBAGnBkM,GACFpM,EAAOQ,OAAO4E,EAAM,EAAG,CAAC,QAASkI,EAAS7J,IAC1CzD,EAAOQ,OAAO4L,EAAa,EAAG,EAAG,CAAC,OAAQpM,EAAOtC,GAAS,GAAI+F,IAC9DzD,EAAOtC,GAAS,GAAGyC,IAAMG,OAAOC,OAAO,GAAIP,EAAOoM,GAAY,GAAGjM,MAEjEH,EAAOtC,GAAS,GAAK4P,EAIvB,OADAtN,EAAOjD,KAAK,CAAC,OAAQuQ,EAAS7J,IACvBzD,IC9DF,IAAMuN,EAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAaWC,EAAe,CAAC,MAAO,SAAU,QAAS,YClE1CC,EAAW,CACtBvE,KAAM,WACNvL,SAkCF,SAA0BC,EAAS0E,EAAIC,GACrC,IAGImH,EAGAgE,EAGAC,EAGAtN,EAGAiJ,EAfEpK,EAAOlB,KAgBb,OAGA,SAAe1B,GAIb,OAHAsB,EAAQS,MAAM,YACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQ9B,GACTiO,GAIT,SAASA,EAAKjO,GACZ,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTsR,GAGI,KAATtR,GACFsB,EAAQQ,QAAQ9B,GACTuR,GAGI,KAATvR,GACFsB,EAAQQ,QAAQ9B,GAChBoN,EAAO,EAGAxK,EAAK2B,UAAYyB,EAAKwL,IAG3BC,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GAChBqR,EAAS/Q,OAAOC,aAAaP,GAC7BoR,GAAW,EACJM,GAGFzL,EAAIjG,GAIb,SAASsR,EAAiBtR,GACxB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChBoN,EAAO,EACAuE,GAGI,KAAT3R,GACFsB,EAAQQ,QAAQ9B,GAChBoN,EAAO,EACPiE,EAAS,SACTtN,EAAQ,EACD6N,IAGLH,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GAChBoN,EAAO,EACAxK,EAAK2B,UAAYyB,EAAKwL,GAGxBvL,EAAIjG,GAIb,SAAS2R,EAAkB3R,GACzB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT4C,EAAK2B,UAAYyB,EAAKwL,GAGxBvL,EAAIjG,GAIb,SAAS4R,EAAgB5R,GACvB,OAAIA,IAASqR,EAAOvQ,WAAWiD,MAC7BzC,EAAQQ,QAAQ9B,GACT+D,IAAUsN,EAAOxQ,OACpB+B,EAAK2B,UACHyB,EACA9C,EACF0O,GAGC3L,EAAIjG,GAIb,SAASuR,EAAcvR,GACrB,OAAIyR,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GAChBqR,EAAS/Q,OAAOC,aAAaP,GACtB0R,GAGFzL,EAAIjG,GAIb,SAAS0R,EAAQ1R,GACf,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAkP,EAAAA,EAAAA,IAA0BlP,GAGf,KAATA,GACAoR,GACAF,EAAa9K,SAASiL,EAAOQ,gBAE7BzE,EAAO,EACAxK,EAAK2B,UAAYyB,EAAGhG,GAAQkD,EAAalD,IAG9CiR,EAAe7K,SAASiL,EAAOQ,gBACjCzE,EAAO,EAEM,KAATpN,GACFsB,EAAQQ,QAAQ9B,GACT8R,GAGFlP,EAAK2B,UAAYyB,EAAGhG,GAAQkD,EAAalD,KAGlDoN,EAAO,EAEAxK,EAAK2B,YAAc3B,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,MAClDiB,EAAIjG,GACJoR,EACAW,EAA4B/R,GAC5BgS,EAAwBhS,IAGjB,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,IACnCsB,EAAQQ,QAAQ9B,GAChBqR,GAAU/Q,OAAOC,aAAaP,GACvB0R,GAGFzL,EAAIjG,GAIb,SAAS8R,EAAiB9R,GACxB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT4C,EAAK2B,UAAYyB,EAAK9C,GAGxB+C,EAAIjG,GAIb,SAASgS,EAAwBhS,GAC/B,OAAIkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACTgS,GAGFE,EAAYlS,GAIrB,SAAS+R,EAA4B/R,GACnC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTkS,GAGI,KAATlS,GAAwB,KAATA,IAAeyR,EAAAA,EAAAA,IAAWzR,IAC3CsB,EAAQQ,QAAQ9B,GACTmS,IAGLjF,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACT+R,GAGFG,EAAYlS,GAIrB,SAASmS,EAAsBnS,GAC7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAiS,EAAAA,EAAAA,IAAkBjS,IAElBsB,EAAQQ,QAAQ9B,GACTmS,GAGFC,EAA2BpS,GAIpC,SAASoS,EAA2BpS,GAClC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTqS,IAGLnF,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACToS,GAGFL,EAA4B/R,GAIrC,SAASqS,EAA6BrS,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOiG,EAAIjG,GAGA,KAATA,GAAwB,KAATA,GACjBsB,EAAQQ,QAAQ9B,GAChBgN,EAAShN,EACFsS,IAGLpF,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACTqS,IAGTrF,EAAS,KACFuF,EAA+BvS,IAIxC,SAASsS,EAA6BtS,GACpC,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GAC/BiG,EAAIjG,GAGTA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GACTwS,IAGTlR,EAAQQ,QAAQ9B,GACTsS,GAIT,SAASC,EAA+BvS,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAkP,EAAAA,EAAAA,IAA0BlP,GAEnBoS,EAA2BpS,IAGpCsB,EAAQQ,QAAQ9B,GACTuS,GAIT,SAASC,EAAkCxS,GACzC,OAAa,KAATA,GAAwB,KAATA,IAAekN,EAAAA,EAAAA,IAAclN,GACvC+R,EAA4B/R,GAG9BiG,EAAIjG,GAIb,SAASkS,EAAYlS,GACnB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTyS,GAGFxM,EAAIjG,GAIb,SAASyS,EAAczS,GACrB,OAAIkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACTyS,GAGO,OAATzS,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GACvCkD,EAAalD,GACbiG,EAAIjG,GAIV,SAASkD,EAAalD,GACpB,OAAa,KAATA,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACT0S,GAGI,KAAT1S,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACT2S,GAGI,KAAT3S,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACT4S,GAGI,KAAT5S,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACTwR,GAGI,KAATxR,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACT6S,KAGLtQ,EAAAA,EAAAA,IAAmBvC,IAAmB,IAAToN,GAAuB,IAATA,EAQlC,OAATpN,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GAC/B8S,EAAyB9S,IAGlCsB,EAAQQ,QAAQ9B,GACTkD,GAZE5B,EAAQoD,MACbqO,EACAH,EACAE,EAHKxR,CAILtB,GAYN,SAAS8S,EAAyB9S,GAEhC,OADAsB,EAAQU,KAAK,gBACNgR,EAAkBhT,GAI3B,SAASgT,EAAkBhT,GACzB,OAAa,OAATA,EACKiT,EAAKjT,IAGVuC,EAAAA,EAAAA,IAAmBvC,GACdsB,EAAQG,QACb,CACEJ,SAAU6R,EACV7K,SAAS,GAEX2K,EACAC,EANK3R,CAOLtB,IAGJsB,EAAQS,MAAM,gBACPmB,EAAalD,IAItB,SAASkT,EAAY5R,EAAS0E,EAAIC,GAChC,OAGA,SAAejG,GAIb,OAHAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACNE,GAIT,SAASA,EAAUlC,GACjB,OAAO4C,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,MAAQiB,EAAIjG,GAAQgG,EAAGhG,IAK9D,SAAS0S,EAA0B1S,GACjC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTwR,GAGFtO,EAAalD,GAItB,SAAS2S,EAAuB3S,GAC9B,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChBqR,EAAS,GACF8B,GAGFjQ,EAAalD,GAItB,SAASmT,EAAsBnT,GAC7B,OAAa,KAATA,GAAekR,EAAa9K,SAASiL,EAAOQ,gBAC9CvQ,EAAQQ,QAAQ9B,GACT4S,IAGLnB,EAAAA,EAAAA,IAAWzR,IAASqR,EAAOxQ,OAAS,GACtCS,EAAQQ,QAAQ9B,GAChBqR,GAAU/Q,OAAOC,aAAaP,GACvBmT,GAGFjQ,EAAalD,GAItB,SAAS6S,EAAgC7S,GACvC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTwR,GAGFtO,EAAalD,GAItB,SAASwR,EAA8BxR,GACrC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT4S,GAGI,KAAT5S,GAAwB,IAAToN,GACjB9L,EAAQQ,QAAQ9B,GACTwR,GAGFtO,EAAalD,GAItB,SAAS4S,EAAkB5S,GACzB,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,gBACNiR,EAAKjT,KAGdsB,EAAQQ,QAAQ9B,GACT4S,GAIT,SAASK,EAAKjT,GAEZ,OADAsB,EAAQU,KAAK,YACNgE,EAAGhG,KA3gBZ8M,UAWF,SAA2BpJ,GACzB,IAAIK,EAAQL,EAAO7C,OAEnB,KAAOkD,MACoB,UAArBL,EAAOK,GAAO,IAA4C,aAA1BL,EAAOK,GAAO,GAAGH,QAKnDG,EAAQ,GAAmC,eAA9BL,EAAOK,EAAQ,GAAG,GAAGH,OAEpCF,EAAOK,GAAO,GAAGhB,MAAQW,EAAOK,EAAQ,GAAG,GAAGhB,MAE9CW,EAAOK,EAAQ,GAAG,GAAGhB,MAAQW,EAAOK,EAAQ,GAAG,GAAGhB,MAElDW,EAAOQ,OAAOH,EAAQ,EAAG,IAG3B,OAAOL,GA5BPW,UAAU,GAIN0O,EAAqB,CACzB1R,SA0gBF,SAA2BC,EAAS0E,EAAIC,GACtC,OAGA,SAAejG,GAKb,OAJAsB,EAAQU,KAAK,gBACbV,EAAQS,MAAM,mBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,mBACNV,EAAQG,QAAQ8G,EAAAA,EAAWvC,EAAIC,KAlhBxCoC,SAAS,GCfJ,IAAM+K,EAAa,CACxBxG,KAAM,aACNvL,SAKF,SAA4BC,EAAS0E,EAAIC,GACvC,IAqBI+G,EArBEpK,EAAOlB,KAGP2R,EAAwB,CAC5BhS,SAuKF,SAA8BC,EAAS0E,EAAIC,GACzC,IAAIJ,EAAO,EACX,OAAO5D,EAAAA,EAAAA,GACLX,EACAgS,EACA,aACA5R,KAAKC,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBACzC9C,EACA,GAIN,SAASgQ,EAAqBtT,GAG5B,OAFAsB,EAAQS,MAAM,mBACdT,EAAQS,MAAM,2BACP+O,EAAgB9Q,GAIzB,SAAS8Q,EAAgB9Q,GACvB,OAAIA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GAChB6F,IACOiL,GAGLjL,EAAO0N,EAAiBtN,EAAIjG,IAChCsB,EAAQU,KAAK,4BACNC,EAAAA,EAAAA,GAAaX,EAASyP,EAAoB,aAA1C9O,CAAwDjC,IAIjE,SAAS+Q,EAAmB/Q,GAC1B,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,mBACNgE,EAAGhG,IAGLiG,EAAIjG,KA5MbqI,SAAS,GAILmL,EAAc,CAClBnS,SA8IF,SAA6BC,EAAS0E,EAAIC,GACxC,IAAMrD,EAAOlB,KACb,OAAOqB,EAGP,SAASA,EAAM/C,GAIb,OAHAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACNE,EAIT,SAASA,EAAUlC,GACjB,OAAO4C,EAAKjB,OAAOmD,KAAKlC,EAAKmC,MAAMC,MAAQiB,EAAIjG,GAAQgG,EAAGhG,KA3J5DqI,SAAS,GAELF,EAAOzG,KAAKgC,OAAOhC,KAAKgC,OAAO7C,OAAS,GACxC4S,EACJtL,GAAyB,eAAjBA,EAAK,GAAGvE,KACZuE,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMtH,OACtC,EACF0S,EAAW,EAIf,OAGA,SAAevT,GAKb,OAJAsB,EAAQS,MAAM,cACdT,EAAQS,MAAM,mBACdT,EAAQS,MAAM,2BACdiL,EAAShN,EACF0T,EAAa1T,IAItB,SAAS0T,EAAa1T,GACpB,OAAIA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GAChBuT,IACOG,IAGTpS,EAAQU,KAAK,2BACNuR,EAAW,EACdtN,EAAIjG,IACJiC,EAAAA,EAAAA,GAAaX,EAASqS,EAAU,aAAhC1R,CAA8CjC,IAIpD,SAAS2T,EAAS3T,GAChB,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GAC/B4T,EAAU5T,IAGnBsB,EAAQS,MAAM,uBACdT,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAERiI,EAAKrK,IAId,SAASqK,EAAKrK,GACZ,OAAa,OAATA,IAAiBkP,EAAAA,EAAAA,IAA0BlP,IAC7CsB,EAAQU,KAAK,eACbV,EAAQU,KAAK,wBACNC,EAAAA,EAAAA,GAAaX,EAASuS,EAAW,aAAjC5R,CAA+CjC,IAG3C,KAATA,GAAeA,IAASgN,EAAe/G,EAAIjG,IAC/CsB,EAAQQ,QAAQ9B,GACTqK,GAIT,SAASwJ,EAAU7T,GACjB,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,GAC/B4T,EAAU5T,IAGnBsB,EAAQS,MAAM,uBACdT,EAAQS,MAAM,cAAe,CAC3BK,YAAa,WAER0R,EAAK9T,IAId,SAAS8T,EAAK9T,GACZ,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,eACbV,EAAQU,KAAK,uBACN4R,EAAU5T,IAGN,KAATA,GAAeA,IAASgN,EAAe/G,EAAIjG,IAC/CsB,EAAQQ,QAAQ9B,GACT8T,GAIT,SAASF,EAAU5T,GAEjB,OADAsB,EAAQU,KAAK,mBACNY,EAAK2B,UAAYyB,EAAGhG,GAAQwB,EAAaxB,GAIlD,SAASwB,EAAaxB,GACpB,OAAa,OAATA,EACKkO,EAAMlO,IAGXuC,EAAAA,EAAAA,IAAmBvC,GACdsB,EAAQG,QACb+R,EACAlS,EAAQG,QACN4R,EACAnF,EACAuF,GACIxR,EAAAA,EAAAA,GACEX,EACAE,EACA,aACAiS,EAAgB,GAElBjS,GAEN0M,EAdK5M,CAeLtB,IAGJsB,EAAQS,MAAM,iBACPiG,EAAgBhI,IAIzB,SAASgI,EAAgBhI,GACvB,OAAa,OAATA,IAAiBuC,EAAAA,EAAAA,IAAmBvC,IACtCsB,EAAQU,KAAK,iBACNR,EAAaxB,KAGtBsB,EAAQQ,QAAQ9B,GACTgI,GAIT,SAASkG,EAAMlO,GAEb,OADAsB,EAAQU,KAAK,cACNgE,EAAGhG,KAzJZqE,UAAU,G,cCDC0P,EAAqB,CAChCnH,KAAM,qBACNvL,SAIF,SAAoCC,EAAS0E,EAAIC,GAC/C,IAIIuI,EAGAhO,EAPEoC,EAAOlB,KACTmE,EAAO,EAOX,OAGA,SAAe7F,GAKb,OAJAsB,EAAQS,MAAM,sBACdT,EAAQS,MAAM,4BACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,4BACNiM,GAIT,SAASA,EAAKjO,GACZ,OAAa,KAATA,GACFsB,EAAQS,MAAM,mCACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,mCACNgS,IAGT1S,EAAQS,MAAM,2BACdyM,EAAM,GACNhO,EAAOyR,EAAAA,GACAvH,EAAM1K,IAIf,SAASgU,EAAQhU,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBsB,EAAQS,MAAM,uCACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,uCACbV,EAAQS,MAAM,2BACdyM,EAAM,EACNhO,EAAOyT,EAAAA,GACAvJ,IAGTpJ,EAAQS,MAAM,2BACdyM,EAAM,EACNhO,EAAO6M,EAAAA,GACA3C,EAAM1K,IAIf,SAAS0K,EAAM1K,GAEb,IAAImC,EAEJ,OAAa,KAATnC,GAAe6F,GACjB1D,EAAQb,EAAQU,KAAK,2BAGnBxB,IAASyR,EAAAA,KACRiC,EAAAA,EAAAA,GAA8BtR,EAAKwF,eAAejG,KAKrDb,EAAQS,MAAM,4BACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,4BACbV,EAAQU,KAAK,sBACNgE,GAPEC,EAAIjG,IAUXQ,EAAKR,IAAS6F,IAAS2I,GACzBlN,EAAQQ,QAAQ9B,GACT0K,GAGFzE,EAAIjG,MC7FR,IAAMmU,EAAkB,CAC7BvH,KAAM,kBACNvL,SAIF,SAAiCC,EAAS0E,EAAIC,GAC5C,OAGA,SAAejG,GAKb,OAJAsB,EAAQS,MAAM,mBACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,gBACNiM,GAIT,SAASA,EAAKjO,GACZ,OAAIoU,EAAAA,EAAAA,IAAiBpU,IACnBsB,EAAQS,MAAM,wBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,wBACbV,EAAQU,KAAK,mBACNgE,GAGFC,EAAIjG,MC3BR,IAAMqU,EAAa,CACxBzH,KAAM,aACNvL,SAIF,SAA4BC,EAAS0E,GACnC,OAGA,SAAehG,GAIb,OAHAsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GAAaX,EAAS0E,EAAI,iBCJ9B,IAAMsO,EAAW,CACtB1H,KAAM,WACNvL,SAgJF,SAA0BC,EAAS0E,EAAIC,GACrC,IAIIsO,EAGApE,EAPEvN,EAAOlB,KACTqC,EAAQnB,EAAKc,OAAO7C,OAQxB,KAAOkD,KACL,IACkC,eAA/BnB,EAAKc,OAAOK,GAAO,GAAGH,MACU,cAA/BhB,EAAKc,OAAOK,GAAO,GAAGH,QACvBhB,EAAKc,OAAOK,GAAO,GAAGyQ,UACvB,CACAD,EAAa3R,EAAKc,OAAOK,GAAO,GAChC,MAIJ,OAGA,SAAe/D,GACb,IAAKuU,EACH,OAAOtO,EAAIjG,GAGb,OAAIuU,EAAWE,UAAkBC,EAAS1U,IAC1CmQ,EAAUvN,EAAKjB,OAAOwO,QAAQ/J,UAC5B6J,EAAAA,EAAAA,GACErN,EAAKwF,eAAe,CAClBrF,MAAOwR,EAAW1Q,IAClBA,IAAKjB,EAAKmC,UAIhBzD,EAAQS,MAAM,YACdT,EAAQS,MAAM,eACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACbV,EAAQU,KAAK,YACN2S,IAIT,SAASA,EAAc3U,GAErB,OAAa,KAATA,EACKsB,EAAQG,QACbmT,GACA5O,EACAmK,EAAUnK,EAAK0O,EAHVpT,CAILtB,GAGS,KAATA,EACKsB,EAAQG,QACboT,GACA7O,EACAmK,EACI7O,EAAQG,QAAQqT,GAA6B9O,EAAI0O,GACjDA,EALCpT,CAMLtB,GAGGmQ,EAAUnK,EAAGhG,GAAQ0U,EAAS1U,GAIvC,SAAS0U,EAAS1U,GAEhB,OADAuU,EAAWC,WAAY,EAChBvO,EAAIjG,KAxNb8M,UA6CF,SAA2BpJ,EAAQyD,GACjC,IAIIhF,EAGA8L,EAGA8G,EAGAC,EAbAjR,EAAQL,EAAO7C,OACfoE,EAAS,EAcb,KAAOlB,KAGL,GAFA5B,EAAQuB,EAAOK,GAAO,GAElBkK,EAAM,CAER,GACiB,SAAf9L,EAAMyB,MACU,cAAfzB,EAAMyB,MAAwBzB,EAAMsS,UAErC,MAIuB,UAArB/Q,EAAOK,GAAO,IAAiC,cAAf5B,EAAMyB,OACxCzB,EAAMsS,WAAY,QAEf,GAAIM,GACT,GACuB,UAArBrR,EAAOK,GAAO,KACE,eAAf5B,EAAMyB,MAAwC,cAAfzB,EAAMyB,QACrCzB,EAAMqS,YAEPvG,EAAOlK,EAEY,cAAf5B,EAAMyB,MAAsB,CAC9BqB,EAAS,EACT,WAGoB,aAAf9C,EAAMyB,OACfmR,EAAQhR,GAIZ,IAAMkR,EAAQ,CACZrR,KAA+B,cAAzBF,EAAOuK,GAAM,GAAGrK,KAAuB,OAAS,QACtDb,MAAOiB,OAAOC,OAAO,GAAIP,EAAOuK,GAAM,GAAGlL,OACzCc,IAAKG,OAAOC,OAAO,GAAIP,EAAOA,EAAO7C,OAAS,GAAG,GAAGgD,MAEhDyL,EAAQ,CACZ1L,KAAM,QACNb,MAAOiB,OAAOC,OAAO,GAAIP,EAAOuK,GAAM,GAAGlL,OACzCc,IAAKG,OAAOC,OAAO,GAAIP,EAAOqR,GAAO,GAAGlR,MAEpCiF,EAAO,CACXlF,KAAM,YACNb,MAAOiB,OAAOC,OAAO,GAAIP,EAAOuK,EAAOhJ,EAAS,GAAG,GAAGpB,KACtDA,IAAKG,OAAOC,OAAO,GAAIP,EAAOqR,EAAQ,GAAG,GAAGhS,QA+B9C,OA7BAiS,EAAQ,CACN,CAAC,QAASC,EAAO9N,GACjB,CAAC,QAASmI,EAAOnI,IAGnB6N,GAAQvU,EAAAA,EAAAA,GAAKuU,EAAOtR,EAAO9C,MAAMqN,EAAO,EAAGA,EAAOhJ,EAAS,IAE3D+P,GAAQvU,EAAAA,EAAAA,GAAKuU,EAAO,CAAC,CAAC,QAASlM,EAAM3B,KAErC6N,GAAQvU,EAAAA,EAAAA,GACNuU,GACArM,EAAAA,EAAAA,GACExB,EAAQxF,OAAOC,WAAWsT,WAAW/O,KACrCzC,EAAO9C,MAAMqN,EAAOhJ,EAAS,EAAG8P,EAAQ,GACxC5N,IAIJ6N,GAAQvU,EAAAA,EAAAA,GAAKuU,EAAO,CAClB,CAAC,OAAQlM,EAAM3B,GACfzD,EAAOqR,EAAQ,GACfrR,EAAOqR,EAAQ,GACf,CAAC,OAAQzF,EAAOnI,KAGlB6N,GAAQvU,EAAAA,EAAAA,GAAKuU,EAAOtR,EAAO9C,MAAMmU,EAAQ,IAEzCC,GAAQvU,EAAAA,EAAAA,GAAKuU,EAAO,CAAC,CAAC,OAAQC,EAAO9N,MACrCjD,EAAAA,EAAAA,GAAOR,EAAQuK,EAAMvK,EAAO7C,OAAQmU,GAC7BtR,GA1IPiF,WAmBF,SAA4BjF,GAC1B,IAGIvB,EAHA4B,GAAS,EAKb,OAASA,EAAQL,EAAO7C,QAIL,gBAHjBsB,EAAQuB,EAAOK,GAAO,IAGdH,MACS,cAAfzB,EAAMyB,MACS,aAAfzB,EAAMyB,OAGNF,EAAOQ,OAAOH,EAAQ,EAAkB,eAAf5B,EAAMyB,KAAwB,EAAI,GAC3DzB,EAAMyB,KAAO,OACbG,KAIJ,OAAOL,IApCHkR,GAAoB,CACxBvT,SAuNF,SAA0BC,EAAS0E,EAAIC,GACrC,OAGA,SAAejG,GAKb,OAJAsB,EAAQS,MAAM,YACdT,EAAQS,MAAM,kBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,kBACN6N,EAAkBvO,EAAS2M,IAIpC,SAASA,EAAKjO,GACZ,OAAa,KAATA,EACK6D,EAAI7D,GAGNmO,EACL7M,EACA6T,EACAlP,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATKkI,CAULnO,GAIJ,SAASmV,EAAiBnV,GACxB,OAAOkP,EAAAA,EAAAA,IAA0BlP,GAC7B6P,EAAkBvO,EAAS8T,EAA3BvF,CAAoC7P,GACpC6D,EAAI7D,GAIV,SAASoV,EAAQpV,GACf,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzBwP,EACLlO,EACAuO,EAAkBvO,EAASuC,GAC3BoC,EACA,gBACA,sBACA,sBANKuJ,CAOLxP,GAGG6D,EAAI7D,GAIb,SAAS6D,EAAI7D,GACX,OAAa,KAATA,GACFsB,EAAQS,MAAM,kBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNgE,GAGFC,EAAIjG,MAnRT6U,GAAyB,CAC7BxT,SAuRF,SAA+BC,EAAS0E,EAAIC,GAC1C,IAAMrD,EAAOlB,KACb,OAGA,SAAe1B,GACb,OAAOoP,EAAarJ,KAClBnD,EACAtB,EACA+T,EACApP,EACA,YACA,kBACA,kBAPKmJ,CAQLpP,IAIJ,SAASqV,EAAWrV,GAClB,OAAO4C,EAAKjB,OAAOwO,QAAQ/J,UACzB6J,EAAAA,EAAAA,GACErN,EAAKwF,eAAexF,EAAKc,OAAOd,EAAKc,OAAO7C,OAAS,GAAG,IAAID,MAAM,GAAI,KAGtEoF,EAAGhG,GACHiG,EAAIjG,MA5SN8U,GAA8B,CAClCzT,SAgTF,SAAoCC,EAAS0E,EAAIC,GAC/C,OAGA,SAAejG,GAKb,OAJAsB,EAAQS,MAAM,aACdT,EAAQS,MAAM,mBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,mBACNiM,GAIT,SAASA,EAAKjO,GACZ,OAAa,KAATA,GACFsB,EAAQS,MAAM,mBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,mBACbV,EAAQU,KAAK,aACNgE,GAGFC,EAAIjG,MCpWR,IAAMsV,GAAkB,CAC7B1I,KAAM,kBACNvL,SAKF,SAAiCC,EAAS0E,EAAIC,GAC5C,IAAMrD,EAAOlB,KACb,OAGA,SAAe1B,GAKb,OAJAsB,EAAQS,MAAM,cACdT,EAAQS,MAAM,oBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,oBACNiM,GAIT,SAASA,EAAKjO,GACZ,OAAa,KAATA,GACFsB,EAAQS,MAAM,eACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACbV,EAAQU,KAAK,cACNkM,GAGFjI,EAAIjG,GAIb,SAASkO,EAAMlO,GAQb,OAAgB,KAATA,GAAe,2BAA4B4C,EAAKjB,OAAOC,WAC1DqE,EAAIjG,GACJgG,EAAGhG,KAzCT2I,WAAY2L,EAAS3L,Y,eCIV4M,GAAY,CACvB3I,KAAM,YACNvL,SAwKF,SAA2BC,EAAS0E,GAClC,IAKIgH,EALEwI,EAAmB9T,KAAKC,OAAOC,WAAW4T,iBAAiBrP,KAC3D5E,EAAWG,KAAKH,SAChB6O,GAASqF,EAAAA,GAAAA,GAAkBlU,GAIjC,OAGA,SAAevB,GAGb,OAFAsB,EAAQS,MAAM,qBACdiL,EAAShN,EACFiN,EAASjN,IAIlB,SAASiN,EAASjN,GAChB,GAAIA,IAASgN,EAEX,OADA1L,EAAQQ,QAAQ9B,GACTiN,EAGT,IAAM9K,EAAQb,EAAQU,KAAK,qBACrBkM,GAAQuH,EAAAA,GAAAA,GAAkBzV,GAC1BiO,GACHC,GAAoB,IAAVA,GAAekC,GAAWoF,EAAiBpP,SAASpG,GAC3D+U,GACH3E,GAAsB,IAAXA,GAAgBlC,GAAUsH,EAAiBpP,SAAS7E,GAGlE,OAFAY,EAAMuT,MAAQlR,QAAmB,KAAXwI,EAAgBiB,EAAOA,IAASmC,IAAW2E,IACjE5S,EAAMwT,OAASnR,QAAmB,KAAXwI,EAAgB+H,EAAQA,IAAU7G,IAAUD,IAC5DjI,EAAGhG,KAtMZ2I,WAQF,SAA6BjF,EAAQyD,GACnC,IAGI8G,EAGAgH,EAGAnM,EAGA8M,EAGA9E,EAGA+E,EAGAC,EAGA7Q,EAxBAlB,GAAS,EA6Bb,OAASA,EAAQL,EAAO7C,QAEtB,GACuB,UAArB6C,EAAOK,GAAO,IACY,sBAA1BL,EAAOK,GAAO,GAAGH,MACjBF,EAAOK,GAAO,GAAG4R,OAIjB,IAFA1H,EAAOlK,EAEAkK,KAEL,GACsB,SAApBvK,EAAOuK,GAAM,IACY,sBAAzBvK,EAAOuK,GAAM,GAAGrK,MAChBF,EAAOuK,GAAM,GAAGyH,OAChBvO,EAAQiB,eAAe1E,EAAOuK,GAAM,IAAInN,WAAW,KACjDqG,EAAQiB,eAAe1E,EAAOK,GAAO,IAAIjD,WAAW,GACtD,CAKA,IACG4C,EAAOuK,GAAM,GAAG0H,QAAUjS,EAAOK,GAAO,GAAG2R,SAC3ChS,EAAOK,GAAO,GAAGF,IAAIoB,OAASvB,EAAOK,GAAO,GAAGhB,MAAMkC,QAAU,MAE7DvB,EAAOuK,GAAM,GAAGpK,IAAIoB,OACnBvB,EAAOuK,GAAM,GAAGlL,MAAMkC,OACtBvB,EAAOK,GAAO,GAAGF,IAAIoB,OACrBvB,EAAOK,GAAO,GAAGhB,MAAMkC,QACzB,GAGF,SAGF4Q,EACEnS,EAAOuK,GAAM,GAAGpK,IAAIoB,OAASvB,EAAOuK,GAAM,GAAGlL,MAAMkC,OAAS,GAC5DvB,EAAOK,GAAO,GAAGF,IAAIoB,OAASvB,EAAOK,GAAO,GAAGhB,MAAMkC,OAAS,EAC1D,EACA,EACN,IAAMlC,EAAQiB,OAAOC,OAAO,GAAIP,EAAOuK,GAAM,GAAGpK,KAC1CA,EAAMG,OAAOC,OAAO,GAAIP,EAAOK,GAAO,GAAGhB,OAC/CgT,GAAUhT,GAAQ8S,GAClBE,GAAUlS,EAAKgS,GACfD,EAAkB,CAChBhS,KAAMiS,EAAM,EAAI,iBAAmB,mBACnC9S,MAAAA,EACAc,IAAKG,OAAOC,OAAO,GAAIP,EAAOuK,GAAM,GAAGpK,MAEzCiN,EAAkB,CAChBlN,KAAMiS,EAAM,EAAI,iBAAmB,mBACnC9S,MAAOiB,OAAOC,OAAO,GAAIP,EAAOK,GAAO,GAAGhB,OAC1Cc,IAAAA,GAEFiF,EAAO,CACLlF,KAAMiS,EAAM,EAAI,aAAe,eAC/B9S,MAAOiB,OAAOC,OAAO,GAAIP,EAAOuK,GAAM,GAAGpK,KACzCA,IAAKG,OAAOC,OAAO,GAAIP,EAAOK,GAAO,GAAGhB,QAE1CkS,EAAQ,CACNrR,KAAMiS,EAAM,EAAI,SAAW,WAC3B9S,MAAOiB,OAAOC,OAAO,GAAI2R,EAAgB7S,OACzCc,IAAKG,OAAOC,OAAO,GAAI6M,EAAgBjN,MAEzCH,EAAOuK,GAAM,GAAGpK,IAAMG,OAAOC,OAAO,GAAI2R,EAAgB7S,OACxDW,EAAOK,GAAO,GAAGhB,MAAQiB,OAAOC,OAAO,GAAI6M,EAAgBjN,KAC3DiS,EAAa,GAETpS,EAAOuK,GAAM,GAAGpK,IAAIoB,OAASvB,EAAOuK,GAAM,GAAGlL,MAAMkC,SACrD6Q,GAAarV,EAAAA,EAAAA,GAAKqV,EAAY,CAC5B,CAAC,QAASpS,EAAOuK,GAAM,GAAI9G,GAC3B,CAAC,OAAQzD,EAAOuK,GAAM,GAAI9G,MAI9B2O,GAAarV,EAAAA,EAAAA,GAAKqV,EAAY,CAC5B,CAAC,QAASb,EAAO9N,GACjB,CAAC,QAASyO,EAAiBzO,GAC3B,CAAC,OAAQyO,EAAiBzO,GAC1B,CAAC,QAAS2B,EAAM3B,KAGlB2O,GAAarV,EAAAA,EAAAA,GACXqV,GACAnN,EAAAA,EAAAA,GACExB,EAAQxF,OAAOC,WAAWsT,WAAW/O,KACrCzC,EAAO9C,MAAMqN,EAAO,EAAGlK,GACvBoD,IAIJ2O,GAAarV,EAAAA,EAAAA,GAAKqV,EAAY,CAC5B,CAAC,OAAQhN,EAAM3B,GACf,CAAC,QAAS2J,EAAiB3J,GAC3B,CAAC,OAAQ2J,EAAiB3J,GAC1B,CAAC,OAAQ8N,EAAO9N,KAGdzD,EAAOK,GAAO,GAAGF,IAAIoB,OAASvB,EAAOK,GAAO,GAAGhB,MAAMkC,QACvDA,EAAS,EACT6Q,GAAarV,EAAAA,EAAAA,GAAKqV,EAAY,CAC5B,CAAC,QAASpS,EAAOK,GAAO,GAAIoD,GAC5B,CAAC,OAAQzD,EAAOK,GAAO,GAAIoD,MAG7BlC,EAAS,GAGXf,EAAAA,EAAAA,GAAOR,EAAQuK,EAAO,EAAGlK,EAAQkK,EAAO,EAAG6H,GAC3C/R,EAAQkK,EAAO6H,EAAWjV,OAASoE,EAAS,EAC5C,MAMRlB,GAAS,EAET,OAASA,EAAQL,EAAO7C,QACQ,sBAA1B6C,EAAOK,GAAO,GAAGH,OACnBF,EAAOK,GAAO,GAAGH,KAAO,QAI5B,OAAOF,IAiDT,SAASqS,GAAUvS,EAAOyB,GACxBzB,EAAMiG,QAAUxE,EAChBzB,EAAMyB,QAAUA,EAChBzB,EAAMmG,cAAgB1E,EC5NjB,IAAM+Q,GAAW,CACtBpJ,KAAM,WACNvL,SAIF,SAA0BC,EAAS0E,EAAIC,GACrC,IAAIJ,EAAO,EACX,OAGA,SAAe7F,GAMb,OALAsB,EAAQS,MAAM,YACdT,EAAQS,MAAM,kBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,kBACbV,EAAQS,MAAM,oBACPkM,GAIT,SAASA,EAAKjO,GACZ,OAAIyR,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GACTiW,IAGFC,EAAAA,EAAAA,IAAWlW,GAAQmW,EAAWnW,GAAQiG,EAAIjG,GAInD,SAASiW,EAAmBjW,GAC1B,OAAgB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,GAClEoW,EAAyBpW,GACzBmW,EAAWnW,GAIjB,SAASoW,EAAyBpW,GAChC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTqW,IAIG,KAATrW,GAAwB,KAATA,GAAwB,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,KAChE6F,IAAS,IAETvE,EAAQQ,QAAQ9B,GACToW,GAGFD,EAAWnW,GAIpB,SAASqW,EAAUrW,GACjB,OAAa,KAATA,GACFsB,EAAQU,KAAK,oBACN6B,EAAI7D,IAGA,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAe8O,EAAAA,EAAAA,IAAa9O,GACvDiG,EAAIjG,IAGbsB,EAAQQ,QAAQ9B,GACTqW,GAIT,SAASF,EAAWnW,GAClB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChB6F,EAAO,EACAyQ,IAGLJ,EAAAA,EAAAA,IAAWlW,IACbsB,EAAQQ,QAAQ9B,GACTmW,GAGFlQ,EAAIjG,GAIb,SAASsW,EAAiBtW,GACxB,OAAOiS,EAAAA,EAAAA,IAAkBjS,GAAQuW,EAAWvW,GAAQiG,EAAIjG,GAI1D,SAASuW,EAAWvW,GAClB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChB6F,EAAO,EACAyQ,GAGI,KAATtW,GAEFsB,EAAQU,KAAK,oBAAoB4B,KAAO,gBACjCC,EAAI7D,IAGNwW,EAAWxW,GAIpB,SAASwW,EAAWxW,GAClB,OAAc,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,KAAU6F,IAAS,IACvDvE,EAAQQ,QAAQ9B,GACA,KAATA,EAAcwW,EAAaD,GAG7BtQ,EAAIjG,GAIb,SAAS6D,EAAI7D,GAKX,OAJAsB,EAAQS,MAAM,kBACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNgE,KCzHJ,IAAMyQ,GAAW,CACtB7J,KAAM,WACNvL,SAIF,SAA0BC,EAAS0E,EAAIC,GACrC,IAGI+G,EAGAqE,EAGAtN,EAGA2H,EAZE9I,EAAOlB,KAab,OAGA,SAAe1B,GAIb,OAHAsB,EAAQS,MAAM,YACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQ9B,GACTiO,GAIT,SAASA,EAAKjO,GACZ,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT0W,GAGI,KAAT1W,GACFsB,EAAQQ,QAAQ9B,GACTuR,GAGI,KAATvR,GACFsB,EAAQQ,QAAQ9B,GACT2W,IAGLlF,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GACT4W,GAGF3Q,EAAIjG,GAIb,SAAS0W,EAAgB1W,GACvB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT6W,GAGI,KAAT7W,GACFsB,EAAQQ,QAAQ9B,GAChBqR,EAAS,SACTtN,EAAQ,EACD+S,IAGLrF,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GACT+W,GAGF9Q,EAAIjG,GAIb,SAAS6W,EAAY7W,GACnB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTgX,GAGF/Q,EAAIjG,GAIb,SAASgX,EAAahX,GACpB,OAAa,OAATA,GAA0B,KAATA,EACZiG,EAAIjG,GAGA,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTiX,GAGFC,EAAQlX,GAIjB,SAASiX,EAAiBjX,GACxB,OAAa,OAATA,GAA0B,KAATA,EACZiG,EAAIjG,GAGNkX,EAAQlX,GAIjB,SAASkX,EAAQlX,GACf,OAAa,OAATA,EACKiG,EAAIjG,GAGA,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTmX,IAGL5U,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcwL,EACPE,EAAapX,KAGtBsB,EAAQQ,QAAQ9B,GACTkX,GAIT,SAASC,EAAanX,GACpB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT6D,GAGFqT,EAAQlX,GAIjB,SAAS8W,EAAU9W,GACjB,OAAIA,IAASqR,EAAOvQ,WAAWiD,MAC7BzC,EAAQQ,QAAQ9B,GACT+D,IAAUsN,EAAOxQ,OAASwW,EAAQP,GAGpC7Q,EAAIjG,GAIb,SAASqX,EAAMrX,GACb,OAAa,OAATA,EACKiG,EAAIjG,GAGA,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTsX,IAGL/U,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAc2L,EACPD,EAAapX,KAGtBsB,EAAQQ,QAAQ9B,GACTqX,GAIT,SAASC,EAAWtX,GAClB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTuX,GAGFF,EAAMrX,GAIf,SAASuX,EAASvX,GAChB,OAAa,KAATA,EACK6D,EAAI7D,GAGA,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTuX,GAGFF,EAAMrX,GAIf,SAAS+W,EAAY/W,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZ6D,EAAI7D,IAGTuC,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcqL,EACPK,EAAapX,KAGtBsB,EAAQQ,QAAQ9B,GACT+W,GAIT,SAASJ,EAAY3W,GACnB,OAAa,OAATA,EACKiG,EAAIjG,GAGA,KAATA,GACFsB,EAAQQ,QAAQ9B,GACTwX,IAGLjV,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAciL,EACPS,EAAapX,KAGtBsB,EAAQQ,QAAQ9B,GACT2W,GAIT,SAASa,EAAiBxX,GACxB,OAAgB,KAATA,EAAc6D,EAAI7D,GAAQ2W,EAAY3W,GAI/C,SAASuR,EAAcvR,GACrB,OAAIyR,EAAAA,EAAAA,IAAWzR,IACbsB,EAAQQ,QAAQ9B,GACTyX,GAGFxR,EAAIjG,GAIb,SAASyX,EAASzX,GAChB,OAAa,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,IACnCsB,EAAQQ,QAAQ9B,GACTyX,GAGFC,EAAgB1X,GAIzB,SAAS0X,EAAgB1X,GACvB,OAAIuC,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcgM,EACPN,EAAapX,KAGlBkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACT0X,GAGF7T,EAAI7D,GAIb,SAAS4W,EAAQ5W,GACf,OAAa,KAATA,IAAeiS,EAAAA,EAAAA,IAAkBjS,IACnCsB,EAAQQ,QAAQ9B,GACT4W,GAGI,KAAT5W,GAAwB,KAATA,IAAekP,EAAAA,EAAAA,IAA0BlP,GACnD2X,EAAe3X,GAGjBiG,EAAIjG,GAIb,SAAS2X,EAAe3X,GACtB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT6D,GAGI,KAAT7D,GAAwB,KAATA,IAAeyR,EAAAA,EAAAA,IAAWzR,IAC3CsB,EAAQQ,QAAQ9B,GACT4X,IAGLrV,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAciM,EACPP,EAAapX,KAGlBkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACT2X,GAGF9T,EAAI7D,GAIb,SAAS4X,EAAqB5X,GAC5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAiS,EAAAA,EAAAA,IAAkBjS,IAElBsB,EAAQQ,QAAQ9B,GACT4X,GAGFC,EAA0B7X,GAInC,SAAS6X,EAA0B7X,GACjC,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GACT8X,IAGLvV,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcmM,EACPT,EAAapX,KAGlBkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACT6X,GAGFF,EAAe3X,GAIxB,SAAS8X,EAA4B9X,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOiG,EAAIjG,GAGA,KAATA,GAAwB,KAATA,GACjBsB,EAAQQ,QAAQ9B,GAChBgN,EAAShN,EACF+X,IAGLxV,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcoM,EACPV,EAAapX,KAGlBkN,EAAAA,EAAAA,IAAclN,IAChBsB,EAAQQ,QAAQ9B,GACT8X,IAGTxW,EAAQQ,QAAQ9B,GAChBgN,OAAS1J,EACF0U,GAIT,SAASD,EAA4B/X,GACnC,OAAIA,IAASgN,GACX1L,EAAQQ,QAAQ9B,GACTiY,GAGI,OAATjY,EACKiG,EAAIjG,IAGTuC,EAAAA,EAAAA,IAAmBvC,IACrB0L,EAAcqM,EACPX,EAAapX,KAGtBsB,EAAQQ,QAAQ9B,GACT+X,GAIT,SAASE,EAAiCjY,GACxC,OAAa,KAATA,GAAwB,KAATA,IAAekP,EAAAA,EAAAA,IAA0BlP,GACnD2X,EAAe3X,GAGjBiG,EAAIjG,GAIb,SAASgY,EAA8BhY,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOiG,EAAIjG,GAGA,KAATA,IAAekP,EAAAA,EAAAA,IAA0BlP,GACpC2X,EAAe3X,IAGxBsB,EAAQQ,QAAQ9B,GACTgY,GAMT,SAASZ,EAAapX,GAKpB,OAJAsB,EAAQU,KAAK,gBACbV,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACNC,EAAAA,EAAAA,GACLX,EACAiP,EACA,aACA3N,EAAKjB,OAAOC,WAAWsE,QAAQC,KAAKC,SAAS,qBACzC9C,EACA,GAKR,SAASiN,EAAYvQ,GAEnB,OADAsB,EAAQS,MAAM,gBACP2J,EAAY1L,GAIrB,SAAS6D,EAAI7D,GACX,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,gBACbV,EAAQU,KAAK,YACNgE,GAGFC,EAAIjG,MCpdR,IAAMkY,GAAiB,CAC5BtL,KAAM,iBACNvL,SAKF,SAAgCC,EAAS0E,EAAIC,GAC3C,IAAMrD,EAAOlB,KACb,OAGA,SAAe1B,GAMb,OALAsB,EAAQS,MAAM,aACdT,EAAQS,MAAM,eACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,eACbV,EAAQU,KAAK,aACNkM,GAIT,SAASA,EAAMlO,GAQb,OAAgB,KAATA,GAAe,2BAA4B4C,EAAKjB,OAAOC,WAC1DqE,EAAIjG,GACJgG,EAAGhG,KA7BT2I,WAAY2L,EAAS3L,YCHhB,IAAMwP,GAAkB,CAC7BvL,KAAM,kBACNvL,SAIF,SAAiCC,EAAS0E,EAAIC,GAC5C,OAGA,SAAejG,GAIb,OAHAsB,EAAQS,MAAM,mBACdT,EAAQS,MAAM,gBACdT,EAAQQ,QAAQ9B,GACTiO,GAIT,SAASA,EAAKjO,GACZ,OAAIuC,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQU,KAAK,gBACbV,EAAQU,KAAK,mBACNgE,EAAGhG,IAGLiG,EAAIjG,MCtBR,I,eAAMoY,GAAW,CACtBxL,KAAM,WACNvL,SA0EF,SAA0BC,EAAS0E,EAAIC,GACrC,IAIIJ,EAGA1D,EANAoR,EAAW,EAOf,OAGA,SAAevT,GAGb,OAFAsB,EAAQS,MAAM,YACdT,EAAQS,MAAM,oBACP6T,EAAgB5V,IAIzB,SAAS4V,EAAgB5V,GACvB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChBuT,IACOqC,IAGTtU,EAAQU,KAAK,oBACNqW,EAAIrY,IAIb,SAASqY,EAAIrY,GAEX,OAAa,OAATA,EACKiG,EAAIjG,GAIA,KAATA,GACFmC,EAAQb,EAAQS,MAAM,oBACtB8D,EAAO,EACAiL,EAAgB9Q,IAGZ,KAATA,GACFsB,EAAQS,MAAM,SACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,SACNqW,IAGL9V,EAAAA,EAAAA,IAAmBvC,IACrBsB,EAAQS,MAAM,cACdT,EAAQQ,QAAQ9B,GAChBsB,EAAQU,KAAK,cACNqW,IAGT/W,EAAQS,MAAM,gBACPO,EAAKtC,IAKd,SAASsC,EAAKtC,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAuC,EAAAA,EAAAA,IAAmBvC,IAEnBsB,EAAQU,KAAK,gBACNqW,EAAIrY,KAGbsB,EAAQQ,QAAQ9B,GACTsC,GAKT,SAASwO,EAAgB9Q,GAEvB,OAAa,KAATA,GACFsB,EAAQQ,QAAQ9B,GAChB6F,IACOiL,GAGLjL,IAAS0N,GACXjS,EAAQU,KAAK,oBACbV,EAAQU,KAAK,YACNgE,EAAGhG,KAGZmC,EAAMyB,KAAO,eACNtB,EAAKtC,MAzKdiI,QAKF,SAAyBvE,GACvB,IAIIK,EAGAhC,EAPAuW,EAAgB5U,EAAO7C,OAAS,EAChC0X,EAAiB,EAQrB,IACsC,eAAnC7U,EAAO6U,GAAgB,GAAG3U,MACU,UAAnCF,EAAO6U,GAAgB,GAAG3U,QACO,eAAlCF,EAAO4U,GAAe,GAAG1U,MACU,UAAlCF,EAAO4U,GAAe,GAAG1U,MAI3B,IAFAG,EAAQwU,IAECxU,EAAQuU,GACf,GAA8B,iBAA1B5U,EAAOK,GAAO,GAAGH,KAAyB,CAE5CF,EAAO6U,GAAgB,GAAG3U,KAAO,kBACjCF,EAAO4U,GAAe,GAAG1U,KAAO,kBAChC2U,GAAkB,EAClBD,GAAiB,EACjB,MAKNvU,EAAQwU,EAAiB,EACzBD,IAEA,OAASvU,GAASuU,QACFhV,IAAVvB,EACEgC,IAAUuU,GAA2C,eAA1B5U,EAAOK,GAAO,GAAGH,OAC9C7B,EAAQgC,GAGVA,IAAUuU,GACgB,eAA1B5U,EAAOK,GAAO,GAAGH,OAEjBF,EAAO3B,GAAO,GAAG6B,KAAO,eAEpBG,IAAUhC,EAAQ,IACpB2B,EAAO3B,GAAO,GAAG8B,IAAMH,EAAOK,EAAQ,GAAG,GAAGF,IAC5CH,EAAOQ,OAAOnC,EAAQ,EAAGgC,EAAQhC,EAAQ,GACzCuW,GAAiBvU,EAAQhC,EAAQ,EACjCgC,EAAQhC,EAAQ,GAGlBA,OAAQuB,GAIZ,OAAOI,GA3DPnC,SA+DF,SAAkBvB,GAEhB,OACW,KAATA,GACgD,oBAAhD0B,KAAKgC,OAAOhC,KAAKgC,OAAO7C,OAAS,GAAG,GAAG+C,OCtDpC,IAAMpB,IAAQ,iBAClB,GAAK0G,IADa,UAElB,GAAKA,IAFa,UAGlB,GAAKA,IAHa,UAIlB,GAAKA,IAJa,UAKlB,GAAKA,IALa,UAMlB,GAAKA,IANa,UAOlB,GAAKA,IAPa,UAQlB,GAAKA,IARa,UASlB,GAAKA,IATa,UAUlB,GAAKA,IAVa,UAWlB,GAAKA,IAXa,UAYlB,GAAKA,IAZa,UAalB,GAAKA,IAba,UAclB,GAAK8E,GAda,IAkBRnM,IAAiB,UAC3B,GAAKiO,GAIKtH,IAAW,kBACpB,EAAI6H,IADgB,WAEpB,EAAIA,IAFgB,UAGrB,GAAKA,GAHgB,IAOXlL,IAAI,iBACd,GAAKsL,IADS,UAEd,GAAK1D,IAFS,UAGd,GAAK,CAAC6D,EAAiB7D,KAHT,UAId,GAAKoE,IAJS,UAKd,GAAKP,IALS,UAMd,GAAK7D,IANS,UAOd,GAAKqG,IAPS,UAQd,IAAMA,GARQ,IAYJzT,IAAM,iBAChB,GAAKoU,IADW,UAEhB,GAAKI,GAFW,IAMNrL,IAAI,kBACb,EAAIuL,IADS,WAEb,EAAIA,IAFS,WAGb,EAAIA,IAHS,UAId,GAAKiB,KAJS,UAKd,GAAKvB,IALS,UAMd,GAAKwB,KANS,UAOd,GAAK,CAACS,GAAUS,MAPF,UAQd,GAAKyB,KARS,UASd,GAAK,CAACC,GAAiBhE,KATT,UAUd,GAAKG,IAVS,UAWd,GAAKiB,KAXS,UAYd,GAAK6C,IAZS,IAgBJlD,GAAa,CACxB/O,KAAM,CAACoP,GAAWiD,IAIPhD,GAAmB,CAC9BrP,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICzFR,IAAMsS,GAAS,c,qCC8ETC,GAAM,GAAGC,eAOFC,GAcX,SAAUlO,EAAOmO,EAAUC,GAMzB,MALwB,kBAAbD,IACTC,EAAUD,EACVA,OAAWvV,GAejB,WAAgC,IAAdwV,EAAc,uDAAJ,GAGpBC,EAASC,GACb,CACEC,WAAY,GACZC,eAAgB,CACd,WACA,WACA,UACA,YACA,UAEFnX,MAAO,CACLiU,SAAUmD,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAOnI,IACnBhD,WAAYmL,EAAOnL,GACnBmG,gBAAiBmF,EACjBvF,mBAAoBuF,EACpBlG,WAAY+F,EAAOM,GACnBC,oBAAqBrI,EACrBsI,oBAAqBtI,EACrBhB,aAAc8I,EAAOM,EAAUpI,GAC/B+G,SAAUe,EAAOf,EAAU/G,GAC3BuI,aAAcN,EACdhX,KAAMgX,EACNO,cAAeP,EACfxJ,WAAYqJ,EAAOrJ,IACnBgK,4BAA6BzI,EAC7B0I,sBAAuB1I,EACvB2I,sBAAuB3I,EACvB4I,SAAUd,EAAOc,IACjB9B,gBAAiBgB,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1B/I,SAAUgI,EAAOiB,GAAM/I,GACvBgJ,aAAcf,EACd7C,SAAU0C,EAAOiB,GAAM/I,GACvBiJ,aAAchB,EACdiB,MAAOpB,EAAOoB,IACdjL,MAAO+B,EACP+H,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAOjQ,GAAM0R,GAC1BC,cAAe1B,EAAOjQ,IACtB2H,UAAWsI,EAAOtI,IAClBiK,UAAWC,EACXC,gBAAiB3J,EACjB4J,0BAA2B5J,EAC3B6J,oBAAqB7J,EACrB8J,cAAehC,EAAOnI,IACtBoK,OAAQjC,EAAOiC,IACfrO,cAAeoM,EAAOpM,KAExB/K,KAAM,CACJwX,WAAY6B,IACZC,mBAAoBC,EACpBvF,SAAUqF,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClBzN,WAAYqN,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzB5I,WAAYiI,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACftL,aAAcgL,EAAOiB,GACrBlE,SAAUiD,EAAOkB,GACjB3C,aAAc+B,EACdrZ,KAAMqZ,EACN7L,WAAYuL,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACVlD,gBAAiBkD,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BxL,SAAUkK,EAAOuB,GACjBvC,aAAcsB,EACdlF,SAAU4E,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACdxN,MAAOyN,EACPC,UAAWC,EACX5I,WAAY6I,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACfxK,UAAWwK,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRtO,cAAesO,MAGnBvC,EAAQgF,iBAAmB,IAIvBxb,EAAO,GACb,OAAOyb,EAMP,SAASA,EAAQra,GA8Bf,IA5BA,IAAIsa,EAAO,CACTpa,KAAM,OACNqa,SAAU,IAONC,EAAa,GAGbC,EAAY,GAGZhX,EAAU,CACdtE,MAVY,CAACmb,GAWbE,WAAAA,EACAnF,OAAAA,EACAhX,MAAAA,EACAC,KAAAA,EACAqP,OAAAA,EACA+M,OAAAA,EACAC,QAAAA,EACAC,QAAAA,GAEEva,GAAS,IAEJA,EAAQL,EAAO7C,QAAQ,CAG9B,GAC4B,gBAA1B6C,EAAOK,GAAO,GAAGH,MACS,kBAA1BF,EAAOK,GAAO,GAAGH,KAEjB,GAAyB,UAArBF,EAAOK,GAAO,GAChBoa,EAAU1d,KAAKsD,QAGfA,EAAQwa,EAAY7a,EADPya,EAAUtW,MACW9D,GAOxC,IAFAA,GAAS,IAEAA,EAAQL,EAAO7C,QAAQ,CAC9B,IAAM2d,EAAUzF,EAAOrV,EAAOK,GAAO,IAEjC2U,GAAI3S,KAAKyY,EAAS9a,EAAOK,GAAO,GAAGH,OACrC4a,EAAQ9a,EAAOK,GAAO,GAAGH,MAAMmC,KAC7B/B,OAAOC,OACL,CACEmE,eAAgB1E,EAAOK,GAAO,GAAGqE,gBAEnCjB,GAEFzD,EAAOK,GAAO,IAKpB,GAAIma,EAAWrd,OAAS,EAAG,CACzB,IAAMsH,EAAO+V,EAAWA,EAAWrd,OAAS,IAC5BsH,EAAK,IAAMsW,IACnB1Y,KAAKoB,OAAS7D,EAAW6E,EAAK,IAyBxC,IAtBA6V,EAAKU,SAAW,CACd3b,MAAOS,EACLE,EAAO7C,OAAS,EACZ6C,EAAO,GAAG,GAAGX,MACb,CACEiC,KAAM,EACNyE,OAAQ,EACRxE,OAAQ,IAGhBpB,IAAKL,EACHE,EAAO7C,OAAS,EACZ6C,EAAOA,EAAO7C,OAAS,GAAG,GAAGgD,IAC7B,CACEmB,KAAM,EACNyE,OAAQ,EACRxE,OAAQ,KAIlBlB,GAAS,IAEAA,EAAQgV,EAAOE,WAAWpY,QACjCmd,EAAOjF,EAAOE,WAAWlV,GAAOia,IAASA,EAG3C,OAAOA,EAST,SAASO,EAAY7a,EAAQX,EAAOlC,GAiBlC,IAhBA,IAKI2Z,EAGAjU,EAGAoY,EAGArR,EAdAvJ,EAAQhB,EAAQ,EAChB6b,GAAoB,EACpBC,GAAa,IAcR9a,GAASlD,GAAQ,CACxB,IAAMyF,EAAQ5C,EAAOK,GAuCrB,GApCoB,kBAAlBuC,EAAM,GAAG1C,MACS,gBAAlB0C,EAAM,GAAG1C,MACS,eAAlB0C,EAAM,GAAG1C,MAEQ,UAAb0C,EAAM,GACRsY,IAEAA,IAGFtR,OAAWhK,GACgB,oBAAlBgD,EAAM,GAAG1C,KACD,UAAb0C,EAAM,MAENkU,GACClN,GACAsR,GACAD,IAEDA,EAAsB5a,GAGxBuJ,OAAWhK,GAGK,eAAlBgD,EAAM,GAAG1C,MACS,kBAAlB0C,EAAM,GAAG1C,MACS,mBAAlB0C,EAAM,GAAG1C,MACS,mBAAlB0C,EAAM,GAAG1C,MACS,6BAAlB0C,EAAM,GAAG1C,OAIT0J,OAAWhK,IAITsb,GACa,UAAbtY,EAAM,IACY,mBAAlBA,EAAM,GAAG1C,OACY,IAAtBgb,GACc,SAAbtY,EAAM,KACa,kBAAlBA,EAAM,GAAG1C,MACU,gBAAlB0C,EAAM,GAAG1C,MACb,CACA,GAAI4W,EAAU,CACZ,IAAIsE,EAAY/a,EAGhB,IAFAwC,OAAYjD,EAELwb,KAAa,CAClB,IAAMC,EAAYrb,EAAOob,GAEzB,GACwB,eAAtBC,EAAU,GAAGnb,MACS,oBAAtBmb,EAAU,GAAGnb,KACb,CACA,GAAqB,SAAjBmb,EAAU,GAAe,SAEzBxY,IACF7C,EAAO6C,GAAW,GAAG3C,KAAO,kBAC5Bib,GAAa,GAGfE,EAAU,GAAGnb,KAAO,aACpB2C,EAAYuY,OACP,GACiB,eAAtBC,EAAU,GAAGnb,MACS,qBAAtBmb,EAAU,GAAGnb,MACS,+BAAtBmb,EAAU,GAAGnb,MACS,qBAAtBmb,EAAU,GAAGnb,MACS,mBAAtBmb,EAAU,GAAGnb,KAIb,MAKF+a,KACEpY,GAAaoY,EAAsBpY,KAGrCiU,EAASwE,SAAU,GAGrBxE,EAAS3W,IAAMG,OAAOC,OACpB,GACAsC,EAAY7C,EAAO6C,GAAW,GAAGxD,MAAQuD,EAAM,GAAGzC,KAEpDH,EAAOQ,OAAOqC,GAAaxC,EAAO,EAAG,CAAC,OAAQyW,EAAUlU,EAAM,KAC9DvC,IACAlD,IAGoB,mBAAlByF,EAAM,GAAG1C,OACX4W,EAAW,CACT5W,KAAM,WAENob,SAAS,EACTjc,MAAOiB,OAAOC,OAAO,GAAIqC,EAAM,GAAGvD,QAGpCW,EAAOQ,OAAOH,EAAO,EAAG,CAAC,QAASyW,EAAUlU,EAAM,KAClDvC,IACAlD,IACA8d,OAAsBrb,EACtBgK,GAAW,IAMjB,OADA5J,EAAOX,GAAO,GAAGic,QAAUH,EACpBhe,EAOT,SAASwd,EAAQY,EAAKvU,GACpBpI,EAAK2c,GAAOvU,EASd,SAAS4T,EAAQW,GACf,OAAO3c,EAAK2c,GAOd,SAASzb,EAAM0b,GACb,MAAO,CACLla,KAAMka,EAAEla,KACRyE,OAAQyV,EAAEzV,OACVxE,OAAQia,EAAEja,QASd,SAASkU,EAAOtM,EAAQsS,GACtB,OAAOlR,EAOP,SAASA,EAAK9L,GACZJ,EAAMgE,KAAKrE,KAAMmL,EAAO1K,GAAQA,GAC5Bgd,GAAKA,EAAIpZ,KAAKrE,KAAMS,IAK5B,SAASkP,IACP3P,KAAKmB,MAAMpC,KAAK,CACdmD,KAAM,WACNqa,SAAU,KAad,SAASlc,EAAMqd,EAAMjd,EAAOkd,GAU1B,OATe3d,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAEvCod,SAASxd,KAAK2e,GACrB1d,KAAKmB,MAAMpC,KAAK2e,GAChB1d,KAAKwc,WAAWzd,KAAK,CAAC0B,EAAOkd,IAE7BD,EAAKV,SAAW,CACd3b,MAAOS,EAAMrB,EAAMY,QAEdqc,EAOT,SAAS/D,EAAO8D,GACd,OAAOpK,EAOP,SAASA,EAAM5S,GACTgd,GAAKA,EAAIpZ,KAAKrE,KAAMS,GACxBH,EAAK+D,KAAKrE,KAAMS,IAWpB,SAASH,EAAKG,EAAOmd,GACnB,IAAMF,EAAO1d,KAAKmB,MAAMgF,MAClBoG,EAAOvM,KAAKwc,WAAWrW,MAE7B,IAAKoG,EACH,MAAM,IAAIsR,MACR,iBACEpd,EAAMyB,KACN,OACA4b,EAAAA,GAAAA,GAAkB,CAChBzc,MAAOZ,EAAMY,MACbc,IAAK1B,EAAM0B,MAEb,yBAYN,OAVWoK,EAAK,GAAGrK,OAASzB,EAAMyB,OAC5B0b,EACFA,EAAYvZ,KAAKrE,KAAMS,EAAO8L,EAAK,KAEnBA,EAAK,IAAMwQ,IACnB1Y,KAAKrE,KAAMS,EAAO8L,EAAK,KAInCmR,EAAKV,SAAS7a,IAAML,EAAMrB,EAAM0B,KACzBub,EAOT,SAAShB,IACP,OAAO1d,EAAAA,EAAAA,GAASgB,KAAKmB,MAAMgF,OAO7B,SAAS+S,IACPyD,EAAQ,+BAA+B,GAIzC,SAAS3D,EAAqBvY,GACxBmc,EAAQ,iCAGR5c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GACxBkC,MAAQ2L,OAAO+Q,SAAS/d,KAAK0G,eAAejG,GAAQ,IAC7Dkc,EAAQ,gCAKZ,SAASjC,IACP,IAAM9Z,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6e,KAAOpd,EAId,SAAS+Z,IACP,IAAM/Z,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5BiT,KAAOxR,EAId,SAAS6Z,IAEHmC,EAAQ,oBACZ5c,KAAK2P,SACLgN,EAAQ,kBAAkB,IAI5B,SAASpC,IACP,IAAM3Z,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6J,MAAQpI,EAAKqd,QAAQ,2BAA4B,IACtDtB,EAAQ,kBAIV,SAAS/B,IACP,IAAMha,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6J,MAAQpI,EAAKqd,QAAQ,eAAgB,IAI5C,SAASlD,EAA4Bta,GAEnC,IAAMmN,EAAQ5N,KAAK0c,SACbgB,EAEJ1d,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GACjCue,EAAK9P,MAAQA,EACb8P,EAAKrP,YAAaE,EAAAA,EAAAA,GAChBvO,KAAK0G,eAAejG,IACpB0P,cAIJ,SAAS6K,IACP,IAAMpa,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B8O,MAAQrN,EAIf,SAASka,IACP,IAAMla,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B+e,IAAMtd,EAIb,SAASiZ,EAAyBpZ,GAChC,IAAMid,EAEJ1d,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAEjC,IAAKue,EAAKS,MAAO,CACf,IAAMA,EAAQne,KAAK0G,eAAejG,GAAOtB,OACzCue,EAAKS,MAAQA,GAKjB,SAAShC,IACPQ,EAAQ,gCAAgC,GAI1C,SAASV,EAAgCxb,GAGrCT,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5Bgf,MAAqD,KAA7Cne,KAAK0G,eAAejG,GAAOrB,WAAW,GAAY,EAAI,EAIrE,SAAS2c,IACPY,EAAQ,gCAIV,SAAS/E,EAAYnX,GACnB,IAAM2d,EAEJpe,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAG7BsH,EAAO2X,EAAO7B,SAAS6B,EAAO7B,SAASpd,OAAS,GAE/CsH,GAAsB,SAAdA,EAAKvE,QAEhBuE,EAAOW,MAEF4V,SAAW,CACd3b,MAAOS,EAAMrB,EAAMY,QAGrB+c,EAAO7B,SAASxd,KAAK0H,IAGvBzG,KAAKmB,MAAMpC,KAAK0H,GAIlB,SAASwT,EAAWxZ,GAClB,IAAMgG,EAAOzG,KAAKmB,MAAMgF,MACxBM,EAAKuC,OAAShJ,KAAK0G,eAAejG,GAClCgG,EAAKuW,SAAS7a,IAAML,EAAMrB,EAAM0B,KAIlC,SAASqZ,EAAiB/a,GACxB,IAAMgF,EAAUzF,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAG/C,GAAIyd,EAAQ,eAIV,OAHanX,EAAQ8W,SAAS9W,EAAQ8W,SAASpd,OAAS,GACnD6d,SAAS7a,IAAML,EAAMrB,EAAM0B,UAChCwa,EAAQ,gBAKPC,EAAQ,iCACTvF,EAAOG,eAAe9S,SAASe,EAAQvD,QAEvC0V,EAAYvT,KAAKrE,KAAMS,GACvBwZ,EAAW5V,KAAKrE,KAAMS,IAK1B,SAASwa,IACP0B,EAAQ,eAAe,GAIzB,SAASzB,IACP,IAAMta,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6J,MAAQpI,EAIf,SAASua,IACP,IAAMva,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6J,MAAQpI,EAIf,SAASia,IACP,IAAMja,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B6J,MAAQpI,EAIf,SAAS6a,IACP,IAAMhW,EAEJzF,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAE7Byd,EAAQ,gBACVnX,EAAQvD,MAAQ,YAEhBuD,EAAQ4Y,cAAgBzB,EAAQ,kBAAoB,kBAE7CnX,EAAQyY,WACRzY,EAAQwI,eAGRxI,EAAQ4I,kBAER5I,EAAQmI,OAGjB+O,EAAQ,iBAIV,SAASvB,IACP,IAAM3V,EAEJzF,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAE7Byd,EAAQ,gBACVnX,EAAQvD,MAAQ,YAEhBuD,EAAQ4Y,cAAgBzB,EAAQ,kBAAoB,kBAE7CnX,EAAQyY,WACRzY,EAAQwI,eAGRxI,EAAQ4I,kBAER5I,EAAQmI,OAGjB+O,EAAQ,iBAIV,SAASpB,EAAgB9a,GACvB,IAAM6d,EAEJte,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC3BlB,EAAS+B,KAAK0G,eAAejG,GACnC6d,EAAS1Q,OAAQ2Q,EAAAA,GAAAA,GAAatgB,GAC9BqgB,EAASjQ,YAAaE,EAAAA,EAAAA,GAAoBtQ,GAAQkS,cAIpD,SAASkL,IACP,IAAMmD,EAEJxe,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC3B6J,EAAQhJ,KAAK0c,SACbgB,EAEJ1d,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAEjCwd,EAAQ,eAAe,GAEL,SAAde,EAAKxb,KAEPwb,EAAKnB,SAAWiC,EAASjC,SAEzBmB,EAAKe,IAAMzV,EAKf,SAAS2S,IACP,IAAM/a,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B+e,IAAMtd,EAIb,SAASgb,IACP,IAAMhb,EAAOZ,KAAK0c,SAGhB1c,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B8O,MAAQrN,EAIf,SAASkb,IACPa,EAAQ,eAIV,SAAStD,IACPsD,EAAQ,gBAAiB,aAI3B,SAASjB,EAAsBjb,GAC7B,IAAMmN,EAAQ5N,KAAK0c,SACbgB,EAEJ1d,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GACjCue,EAAK9P,MAAQA,EACb8P,EAAKrP,YAAaE,EAAAA,EAAAA,GAChBvO,KAAK0G,eAAejG,IACpB0P,cACFwM,EAAQ,gBAAiB,QAI3B,SAASxC,EAA+B1Z,GACtCkc,EAAQ,yBAA0Blc,EAAMyB,MAI1C,SAASoY,EAA8B7Z,GACrC,IAIIuI,EAJEpI,EAAOZ,KAAK0G,eAAejG,GAC3ByB,EAAO0a,EAAQ,0BAKjB1a,GACF8G,GAAQ0V,EAAAA,GAAAA,GACN9d,EACS,oCAATsB,EAA6C,GAAK,IAEpDya,EAAQ,2BAKR3T,GAAQwJ,EAAAA,EAAAA,GAA8B5R,GAGxC,IAAM6F,EAAOzG,KAAKmB,MAAMgF,MACxBM,EAAKuC,OAASA,EACdvC,EAAKuW,SAAS7a,IAAML,EAAMrB,EAAM0B,KAIlC,SAAS4X,EAAuBtZ,GAC9BwZ,EAAW5V,KAAKrE,KAAMS,GAGpBT,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B+e,IAAMle,KAAK0G,eAAejG,GAIjC,SAASqZ,EAAoBrZ,GAC3BwZ,EAAW5V,KAAKrE,KAAMS,GAGpBT,KAAKmB,MAAMnB,KAAKmB,MAAMhC,OAAS,GAC5B+e,IAAM,UAAYle,KAAK0G,eAAejG,GAO7C,SAAS6L,IACP,MAAO,CACLpK,KAAM,aACNqa,SAAU,IAKd,SAASxE,IACP,MAAO,CACL7V,KAAM,OACN8b,KAAM,KACN5L,KAAM,KACNpJ,MAAO,IAKX,SAAS0N,IACP,MAAO,CACLxU,KAAM,aACN8G,MAAO,IAKX,SAASoF,KACP,MAAO,CACLlM,KAAM,aACNmM,WAAY,GACZT,MAAO,KACPK,MAAO,KACPiQ,IAAK,IAKT,SAAS3F,KACP,MAAO,CACLrW,KAAM,WACNqa,SAAU,IAKd,SAASjN,KAEP,MAAO,CACLpN,KAAM,UACNic,WAAOvc,EACP2a,SAAU,IAKd,SAAS/D,KACP,MAAO,CACLtW,KAAM,SAKV,SAASwW,KACP,MAAO,CACLxW,KAAM,OACN8G,MAAO,IAKX,SAAS6P,KACP,MAAO,CACL3W,KAAM,QACN+L,MAAO,KACPiQ,IAAK,GACLO,IAAK,MAKT,SAAS/G,KACP,MAAO,CACLxV,KAAM,OACN+L,MAAO,KACPiQ,IAAK,GACL3B,SAAU,IAQd,SAAS/U,GAAK/G,GACZ,MAAO,CACLyB,KAAM,OACNyc,QAAwB,gBAAfle,EAAMyB,KACfb,MAAO,KAEPud,OAAQne,EAAM6c,QACdf,SAAU,IAQd,SAASzD,GAASrY,GAChB,MAAO,CACLyB,KAAM,WAEN0c,OAAQne,EAAM6c,QACduB,QAAS,KACTtC,SAAU,IAKd,SAASpN,KACP,MAAO,CACLjN,KAAM,YACNqa,SAAU,IAKd,SAAS7C,KACP,MAAO,CACLxX,KAAM,SACNqa,SAAU,IAKd,SAASnV,KACP,MAAO,CACLlF,KAAM,OACN8G,MAAO,IAKX,SAASqC,KACP,MAAO,CACLnJ,KAAM,kBA3gCD4c,CAAS1H,EAAT0H,CC9GJ,SAAqB9c,GAC1B,MAAQ2C,EAAY3C,KAIpB,OAAOA,ED0GH+c,CErGC,WAA6B,IAAd3H,EAAc,uDAAJ,GASxBnX,EAAS,CACbwO,QAAS,GACTrL,KAAM,GACNlD,YATiB8e,EAAAA,EAAAA,GAEjB,CAACC,GAAmBC,OAAO9H,EAAQ+H,YAAc,KAQjDzf,QAASyL,EAAOzL,GAChBoB,SAAUqK,EAAOrK,GACjB2C,KAAM0H,EAAO1H,GACbxF,OAAQkN,EAAOlN,GACfmJ,KAAM+D,EAAO/D,IAEf,OAAOnH,EAKP,SAASkL,EAAOvE,GACd,OAGA,SAAiBwB,GACf,OAAOF,EAAgBjI,EAAQ2G,EAASwB,KFyEtCgX,CAAMhI,GAAStW,WAAWmD,MDtG3B,WACL,IAOIob,EAPAtX,EAAS,EACT4H,EAAS,GAGTtO,GAAQ,EAIZ,OAGA,SAAsB2H,EAAOmO,EAAUhV,GAErC,IAGImd,EAGA3e,EAGA+E,EAGA6Z,EAGAjhB,EAfEqJ,EAAS,GA6Bf,IAZAqB,EAAQ2G,EAAS3G,EAAMhK,SAASmY,GAChCzR,EAAgB,EAChBiK,EAAS,GAELtO,IAC0B,QAAxB2H,EAAM5J,WAAW,IACnBsG,IAGFrE,OAAQO,GAGH8D,EAAgBsD,EAAM7J,QAAQ,CAOnC,GANA4X,GAAOyI,UAAY9Z,EAEnB6Z,GADAD,EAAQvI,GAAO0I,KAAKzW,UAEOpH,IAAhB0d,EAAMjd,MAAsBid,EAAMjd,MAAQ2G,EAAM7J,OAC3Db,EAAO0K,EAAM5J,WAAWmgB,IAEnBD,EAAO,CACV3P,EAAS3G,EAAM9J,MAAMwG,GACrB,MAGF,GAAa,KAATpH,GAAeoH,IAAkB6Z,GAAeF,EAClD1X,EAAO5I,MAAM,GACbsgB,OAAmBzd,OAYnB,OAVIyd,IACF1X,EAAO5I,MAAM,GACbsgB,OAAmBzd,GAGjB8D,EAAgB6Z,IAClB5X,EAAO5I,KAAKiK,EAAM9J,MAAMwG,EAAe6Z,IACvCxX,GAAUwX,EAAc7Z,GAGlBpH,GACN,KAAK,EACHqJ,EAAO5I,KAAK,OACZgJ,IACA,MAGF,KAAK,EAIH,IAHApH,EAA+B,EAAxB+e,KAAKC,KAAK5X,EAAS,GAC1BJ,EAAO5I,MAAM,GAENgJ,IAAWpH,GAAMgH,EAAO5I,MAAM,GAErC,MAGF,KAAK,GACH4I,EAAO5I,MAAM,GACbgJ,EAAS,EACT,MAGF,QACEsX,GAAmB,EACnBtX,EAAS,EAKfrC,EAAgB6Z,EAAc,EAShC,OANIpd,IACEkd,GAAkB1X,EAAO5I,MAAM,GAC/B4Q,GAAQhI,EAAO5I,KAAK4Q,GACxBhI,EAAO5I,KAAK,OAGP4I,GCL6BiY,GAAa5W,EAAOmO,GAAU,OAmhCtE,SAASG,GAAUuI,EAAUV,GAG3B,IAFA,IAAI9c,GAAS,IAEJA,EAAQ8c,EAAWhgB,QAAQ,CAClC,IAAM6J,EAAQmW,EAAW9c,GAErB+H,MAAMC,QAAQrB,GAChBsO,GAAUuI,EAAU7W,GAEpB8W,GAAUD,EAAU7W,GAIxB,OAAO6W,EAQT,SAASC,GAAUD,EAAUC,GAE3B,IAAIvC,EAEJ,IAAKA,KAAOuC,EACV,GAAI9I,GAAI3S,KAAKyb,EAAWvC,GAAM,CAC5B,IAAM/V,EAAe,mBAAR+V,GAAoC,eAARA,EAInCwC,GAHQ/I,GAAI3S,KAAKwb,EAAUtC,GAAOsC,EAAStC,QAAO3b,KAGjCie,EAAStC,GAAO/V,EAAO,GAAK,IAC7CwY,EAAQF,EAAUvC,GAEpByC,IACExY,EAEFqY,EAAStC,GAAT,kBAAoBwC,IAApB,OAA6BC,IAE7B1d,OAAOC,OAAOwd,EAAMC,KAQ9B,SAASjD,GAAegD,EAAMC,GAC5B,MAAID,EACI,IAAIlC,MACR,iBACEkC,EAAK7d,KACL,OACA4b,EAAAA,GAAAA,GAAkB,CAChBzc,MAAO0e,EAAK1e,MACZc,IAAK4d,EAAK5d,MAEZ,0BACA6d,EAAM9d,KACN,OACA4b,EAAAA,GAAAA,GAAkB,CAChBzc,MAAO2e,EAAM3e,MACbc,IAAK6d,EAAM7d,MAEb,aAGE,IAAI0b,MACR,oCACEmC,EAAM9d,KACN,OACA4b,EAAAA,GAAAA,GAAkB,CAChBzc,MAAO2e,EAAM3e,MACbc,IAAK6d,EAAM7d,MAEb,mBGrtCR,OCMe,SAAqBiV,GAAS,WAkB3C9U,OAAOC,OAAOvC,KAAM,CAACigB,OAhBN,SAACC,GAEd,IAAMC,EAAmC,EAAKvf,KAAK,YAEnD,OAAOsW,GACLgJ,EACA5d,OAAOC,OAAO,GAAI4d,EAAU/I,EAAS,CAInC+H,WAAY,EAAKve,KAAK,wBAA0B,GAChDwb,gBAAiB,EAAKxb,KAAK,2BAA6B,W,kECNrDwf,EAST,SAAUle,EAAMme,EAAOrX,GAErB,IAAI0U,EAAO,CAACxb,KAAMtD,OAAOsD,IAiBzB,YAdaN,IAAVoH,GAAiC,OAAVA,GACN,kBAAVqX,IAAsBjW,MAAMC,QAAQgW,GAI5C/d,OAAOC,OAAOmb,EAAM2C,GAFpBrX,EAAQqX,EAKNjW,MAAMC,QAAQrB,GAChB0U,EAAKnB,SAAWvT,OACGpH,IAAVoH,GAAiC,OAAVA,IAChC0U,EAAK1U,MAAQpK,OAAOoK,IAGf0U,G,oBCpCX,IAAM1G,EAAM,GAAGC,eA0Cf,SAASqJ,EAAMtX,GACb,OAAOpK,OAAOoK,GAAS,IAAI/J,c,aCzCvB+X,EAAM,GAAGC,eAOf,SAASsJ,EAAQC,EAAG9C,GAClB,IAAM9c,EAAO8c,EAAK9c,MAAQ,GAE1B,MACE,UAAW8c,KAET1G,EAAI3S,KAAKzD,EAAM,UACfoW,EAAI3S,KAAKzD,EAAM,gBACfoW,EAAI3S,KAAKzD,EAAM,cAGV4f,EAAEC,QAAQ/C,EAAM0C,EAAE,OAAQ1C,EAAK1U,QAGjCwX,EAAE9C,EAAM,MAAOjT,EAAI+V,EAAG9C,IAOxB,SAASgD,EAAIF,EAAG9C,EAAMU,GAC3B,IAEIuC,EAFEze,EAAOwb,GAAQA,EAAKxb,KAK1B,IAAKA,EACH,MAAM,IAAI2b,MAAM,uBAAyBH,EAAO,KAWlD,OAAsB,oBAPpBiD,EADE3J,EAAI3S,KAAKmc,EAAEI,SAAU1e,GAClBse,EAAEI,SAAS1e,GACPse,EAAEK,aAAeL,EAAEK,YAAYnc,SAASxC,GAC5C4e,EAEAN,EAAEO,gBAG0BJ,EAAKJ,GAASC,EAAG9C,EAAMU,GAO5D,SAAS0C,EAAWN,EAAG9C,GAErB,MAAO,aAAcA,GAAd,kBAAyBA,GAAzB,IAA+BnB,SAAU9R,EAAI+V,EAAG9C,KAASA,EAO3D,SAASjT,EAAI+V,EAAGpC,GAErB,IAAM4C,EAAS,GAEf,GAAI,aAAc5C,EAIhB,IAHA,IAAM6C,EAAQ7C,EAAO7B,SACjBla,GAAS,IAEJA,EAAQ4e,EAAM9hB,QAAQ,CAC7B,IAAMV,EAASiiB,EAAIF,EAAGS,EAAM5e,GAAQ+b,GAEpC,GAAI3f,EAAQ,CACV,GAAI4D,GAAmC,UAA1B4e,EAAM5e,EAAQ,GAAGH,OACvBkI,MAAMC,QAAQ5L,IAA2B,SAAhBA,EAAOyD,OACnCzD,EAAOuK,MAAQvK,EAAOuK,MAAMiV,QAAQ,OAAQ,MAGzC7T,MAAMC,QAAQ5L,IAA2B,YAAhBA,EAAOyD,MAAoB,CACvD,IAAMgf,EAAOziB,EAAO8d,SAAS,GAEzB2E,GAAsB,SAAdA,EAAKhf,OACfgf,EAAKlY,MAAQkY,EAAKlY,MAAMiV,QAAQ,OAAQ,KAK1C7T,MAAMC,QAAQ5L,GAChBuiB,EAAOjiB,KAAP,MAAAiiB,GAAM,OAASviB,IAEfuiB,EAAOjiB,KAAKN,IAMpB,OAAOuiB,E,cC1GHG,EAAsB,CAAC,IAAK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,MCsB/D,SAASC,EAAYlD,EAAKmD,GAC/B,IAAMrY,EDXD,SAAgBA,GACrB,OAAOA,EAAMiV,QAAQ,WAMrB,SAAiBjV,GAEf,MAAO,IAAMmY,EAAoBnY,GAAS,OCE9BhL,CAkChB,SAAsBgL,GAEpB,IAAMvK,EAAS,GACX4D,GAAS,EACThB,EAAQ,EACRigB,EAAO,EAEX,OAASjf,EAAQ2G,EAAM7J,QAAQ,CAC7B,IAAMb,EAAO0K,EAAM5J,WAAWiD,GAG1B4b,EAAU,GAEd,GACW,KAAT3f,IACAiS,EAAAA,EAAAA,IAAkBvH,EAAM5J,WAAWiD,EAAQ,MAC3CkO,EAAAA,EAAAA,IAAkBvH,EAAM5J,WAAWiD,EAAQ,IAE3Cif,EAAO,OAEJ,GAAIhjB,EAAO,IACT,oBAAoBQ,KAAKF,OAAOC,aAAaP,MAChD2f,EAAUrf,OAAOC,aAAaP,SAG7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,IAAMqC,EAAOqI,EAAM5J,WAAWiD,EAAQ,GAElC/D,EAAO,OAASqC,EAAO,OAASA,EAAO,OACzCsd,EAAUrf,OAAOC,aAAaP,EAAMqC,GACpC2gB,EAAO,GAGPrD,EAAU,cAIZA,EAAUrf,OAAOC,aAAaP,GAG5B2f,IACFxf,EAAOM,KAAKiK,EAAM9J,MAAMmC,EAAOgB,GAAQ/C,mBAAmB2e,IAC1D5c,EAAQgB,EAAQif,EAAO,EACvBrD,EAAU,IAGRqD,IACFjf,GAASif,EACTA,EAAO,GAIX,OAAO7iB,EAAOwK,KAAK,IAAMD,EAAM9J,MAAMmC,GAtFhBkgB,CAAarD,GAAO,KAEzC,IAAKmD,EACH,OAAOrY,EAGT,IAAMwY,EAAQxY,EAAMyY,QAAQ,KACtBC,EAAe1Y,EAAMyY,QAAQ,KAC7BE,EAAa3Y,EAAMyY,QAAQ,KAC3BG,EAAQ5Y,EAAMyY,QAAQ,KAE5B,OAEED,EAAQ,GACPI,GAAS,GAAKJ,EAAQI,GACtBF,GAAgB,GAAKF,EAAQE,GAC7BC,GAAc,GAAKH,EAAQG,GAC5BN,EAASviB,KAAKkK,EAAM9J,MAAM,EAAGsiB,IAEtBxY,EAGF,GC/BF,SAAS6Y,EAAKZ,EAAOa,GAE1B,IAAMrjB,EAAS,GACX4D,GAAS,EAMb,IAJIyf,GACFrjB,EAAOM,KAAKqhB,EAAE,OAAQ,SAGf/d,EAAQ4e,EAAM9hB,QACjBkD,GAAO5D,EAAOM,KAAKqhB,EAAE,OAAQ,OACjC3hB,EAAOM,KAAKkiB,EAAM5e,IAOpB,OAJIyf,GAASb,EAAM9hB,OAAS,GAC1BV,EAAOM,KAAKqhB,EAAE,OAAQ,OAGjB3hB,ECpBF,SAASsjB,EAAkBvB,EAAG9C,GACnC,IAIIsE,EAJEC,EAAKrjB,OAAO8e,EAAKrP,YACjB6T,EAASd,EAAYa,EAAG9R,eACxB9N,EAAQme,EAAE2B,cAAcV,QAAQQ,IAIvB,IAAX5f,GACFme,EAAE2B,cAAcpjB,KAAKkjB,GACrBzB,EAAE4B,eAAeH,GAAM,EACvBD,EAAUxB,EAAE2B,cAAchjB,SAE1BqhB,EAAE4B,eAAeH,KACjBD,EAAU3f,EAAQ,GAGpB,IAAMggB,EAAe7B,EAAE4B,eAAeH,GAEtC,OAAOzB,EAAE9C,EAAM,MAAO,CACpB8C,EACE9C,EAAKV,SACL,IACA,CACEsF,KAAM,IAAM9B,EAAE+B,cAAgB,MAAQL,EACtCD,GACEzB,EAAE+B,cACF,SACAL,GACCG,EAAe,EAAI,IAAMA,EAAe,IAC3CG,iBAAiB,EACjBC,gBAAiB,kBAEnB,CAACrC,EAAE,OAAQxhB,OAAOojB,Q,cC3BjB,SAASU,EAAOlC,EAAG9C,GACxB,IAAMiF,EAAUjF,EAAKW,cACjBuE,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAOlF,EAAK9P,OAAS8P,EAAKrP,YAAc,KAGlC,mBAAdqP,EAAKxb,KACP,OAAOke,EAAE,OAAQ,KAAO1C,EAAKe,IAAMmE,GAGrC,IAAMC,EAAWpY,EAAI+V,EAAG9C,GAClBwD,EAAO2B,EAAS,GAElB3B,GAAsB,SAAdA,EAAKhf,KACfgf,EAAKlY,MAAQ,IAAMkY,EAAKlY,MAExB6Z,EAAStd,QAAQ6a,EAAE,OAAQ,MAG7B,IAAM3Z,EAAOoc,EAASA,EAAS1jB,OAAS,GAQxC,OANIsH,GAAsB,SAAdA,EAAKvE,KACfuE,EAAKuC,OAAS4Z,EAEdC,EAAS9jB,KAAKqhB,EAAE,OAAQwC,IAGnBC,EC6DT,SAASC,EAAcpF,GACrB,IAAMkB,EAASlB,EAAKkB,OAEpB,YAAkBhd,IAAXgd,GAAmC,OAAXA,EAC3BlB,EAAKnB,SAASpd,OAAS,EACvByf,ECrEN,SAASmE,EAAS/Z,EAAO3H,EAAOc,GAC9B,IAAImH,EAAa,EACbE,EAAWR,EAAM7J,OAErB,GAAIkC,EAGF,IAFA,IAAI/C,EAAO0K,EAAMga,YAAY1Z,GAlDrB,IAoDDhL,GAnDG,KAmDaA,GACrBgL,IACAhL,EAAO0K,EAAMga,YAAY1Z,GAI7B,GAAInH,EAGF,IAFA,IAAI7D,EAAO0K,EAAMga,YAAYxZ,EAAW,GA3DhC,IA6DDlL,GA5DG,KA4DaA,GACrBkL,IACAlL,EAAO0K,EAAMga,YAAYxZ,EAAW,GAIxC,OAAOA,EAAWF,EAAaN,EAAM9J,MAAMoK,EAAYE,GAAY,GC5C9D,IAAMoX,EAAW,CACtBqC,WCZK,SAAoBzC,EAAG9C,GAC5B,OAAO8C,EAAE9C,EAAM,aAAcmE,EAAKpX,EAAI+V,EAAG9C,IAAO,KDYhDwF,MEXK,SAAmB1C,EAAG9C,GAC3B,MAAO,CAAC8C,EAAE9C,EAAM,MAAO0C,EAAE,OAAQ,QFWjC9hB,KGbK,SAAckiB,EAAG9C,GACtB,IAAM1U,EAAQ0U,EAAK1U,MAAQ0U,EAAK1U,MAAQ,KAAO,GAGzCgV,EAAON,EAAKM,MAAQN,EAAKM,KAAKsB,MAAM,uBAEpCe,EAAQ,GAEVrC,IACFqC,EAAM8C,UAAY,CAAC,YAAcnF,IAGnC,IAAM1f,EAAOkiB,EAAE9C,EAAM,OAAQ2C,EAAO,CAACD,EAAE,OAAQpX,KAM/C,OAJI0U,EAAKtL,OACP9T,EAAKsC,KAAO,CAACwR,KAAMsL,EAAKtL,OAGnBoO,EAAE9C,EAAKV,SAAU,MAAO,CAAC1e,KHJhC8kB,OIhBK,SAAuB5C,EAAG9C,GAC/B,OAAO8C,EAAE9C,EAAM,MAAOjT,EAAI+V,EAAG9C,KJgB7BnF,SKjBK,SAAkBiI,EAAG9C,GAC1B,OAAO8C,EAAE9C,EAAM,KAAMjT,EAAI+V,EAAG9C,KLiB5BqE,kBAAAA,EACAsB,SMZK,SAAkB7C,EAAG9C,GAI1B,IAHA,IAAM4F,EAAe9C,EAAE8C,aACnBC,EAAK,EAEFA,KAAMD,GAAcC,IAE3B,IAAMlV,EAAazP,OAAO2kB,GAS1B,OAPAD,EAAajV,GAAc,CACzBnM,KAAM,qBACNmM,WAAAA,EACAkO,SAAU,CAAC,CAACra,KAAM,YAAaqa,SAAUmB,EAAKnB,WAC9CS,SAAUU,EAAKV,UAGV+E,EAAkBvB,EAAG,CAC1Bte,KAAM,oBACNmM,WAAAA,EACA2O,SAAUU,EAAKV,YNLjB1N,QOpBK,SAAiBkR,EAAG9C,GACzB,OAAO8C,EAAE9C,EAAM,IAAMA,EAAKS,MAAO1T,EAAI+V,EAAG9C,KPoBxChF,KQnBK,SAAc8H,EAAG9C,GACtB,OAAO8C,EAAEgD,UAAYhD,EAAEC,QAAQ/C,EAAM0C,EAAE,MAAO1C,EAAK1U,QAAU,MRmB7Dya,eSpBK,SAAwBjD,EAAG9C,GAChC,IAAMlT,EAAMgW,EAAEpS,WAAWsP,EAAKrP,YAE9B,IAAK7D,EACH,OAAOkY,EAAOlC,EAAG9C,GAInB,IAAM2C,EAAQ,CAACqD,IAAKC,EAAUnZ,EAAI0T,KAAO,IAAKO,IAAKf,EAAKe,KAMxD,OAJkB,OAAdjU,EAAIyD,YAAgCrM,IAAd4I,EAAIyD,QAC5BoS,EAAMpS,MAAQzD,EAAIyD,OAGbuS,EAAE9C,EAAM,MAAO2C,ITOtBxH,MUtBK,SAAe2H,EAAG9C,GAEvB,IAAM2C,EAAQ,CAACqD,IAAKC,EAAUjG,EAAKQ,KAAMO,IAAKf,EAAKe,KAMnD,OAJmB,OAAff,EAAKzP,YAAiCrM,IAAf8b,EAAKzP,QAC9BoS,EAAMpS,MAAQyP,EAAKzP,OAGduS,EAAE9C,EAAM,MAAO2C,IVetBuD,WWxBK,SAAoBpD,EAAG9C,GAC5B,OAAO8C,EAAE9C,EAAM,OAAQ,CAAC0C,EAAE,OAAQ1C,EAAK1U,MAAMiV,QAAQ,YAAa,SXwBlE4F,cYtBK,SAAuBrD,EAAG9C,GAC/B,IAAMlT,EAAMgW,EAAEpS,WAAWsP,EAAKrP,YAE9B,IAAK7D,EACH,OAAOkY,EAAOlC,EAAG9C,GAInB,IAAM2C,EAAQ,CAACiC,KAAMqB,EAAUnZ,EAAI0T,KAAO,KAM1C,OAJkB,OAAd1T,EAAIyD,YAAgCrM,IAAd4I,EAAIyD,QAC5BoS,EAAMpS,MAAQzD,EAAIyD,OAGbuS,EAAE9C,EAAM,IAAK2C,EAAO5V,EAAI+V,EAAG9C,KZSlChG,KaxBK,SAAc8I,EAAG9C,GAEtB,IAAM2C,EAAQ,CAACiC,KAAMqB,EAAUjG,EAAKQ,MAMpC,OAJmB,OAAfR,EAAKzP,YAAiCrM,IAAf8b,EAAKzP,QAC9BoS,EAAMpS,MAAQyP,EAAKzP,OAGduS,EAAE9C,EAAM,IAAK2C,EAAO5V,EAAI+V,EAAG9C,KbiBlC5E,SFrBK,SAAkB0H,EAAG9C,EAAMU,GAChC,IASMjP,EATA1Q,EAASgM,EAAI+V,EAAG9C,GAChBoE,EAAQ1D,EA0EhB,SAAmBV,GACjB,IAAIoE,EAAQpE,EAAKkB,OACXrC,EAAWmB,EAAKnB,SAClBla,GAAS,EAEb,MAAQyf,KAAWzf,EAAQka,EAASpd,QAClC2iB,EAAQgB,EAAcvG,EAASla,IAGjC,OAAOS,QAAQgf,GAnFQgC,CAAU1F,GAAU0E,EAAcpF,GAEnD2C,EAAQ,GAER0D,EAAU,GAEY,mBAAjBrG,EAAKmB,UAKZpgB,EAAO,IACY,YAAnBA,EAAO,GAAGyD,MACY,MAAtBzD,EAAO,GAAGuR,QAEVb,EAAY1Q,EAAO,IAEnB0Q,EAAYqR,EAAE,KAAM,IAAK,IACzB/hB,EAAO8G,QAAQ4J,IAGbA,EAAUoN,SAASpd,OAAS,GAC9BgQ,EAAUoN,SAAShX,QAAQ6a,EAAE,OAAQ,MAGvCjR,EAAUoN,SAAShX,QACjBib,EAAE,KAAM,QAAS,CACfte,KAAM,WACN2c,QAASnB,EAAKmB,QACdmF,UAAU,KAMd3D,EAAM8C,UAAY,CAAC,mBAKrB,IAFA,IAAI9gB,GAAS,IAEJA,EAAQ5D,EAAOU,QAAQ,CAC9B,IAAM8kB,EAAQxlB,EAAO4D,IAInByf,GACU,IAAVzf,GACe,YAAf4hB,EAAM/hB,MACY,MAAlB+hB,EAAMjU,UAEN+T,EAAQhlB,KAAKqhB,EAAE,OAAQ,OAGN,YAAf6D,EAAM/hB,MAAwC,MAAlB+hB,EAAMjU,SAAoB8R,EAGxDiC,EAAQhlB,KAAKklB,GAFbF,EAAQhlB,KAAR,MAAAglB,GAAO,OAASE,EAAM1H,WAM1B,IAAM9V,EAAOhI,EAAOA,EAAOU,OAAS,GAOpC,OAJIsH,IAASqb,GAAW,YAAarb,GAA0B,MAAjBA,EAAKuJ,SACjD+T,EAAQhlB,KAAKqhB,EAAE,OAAQ,OAGlBI,EAAE9C,EAAM,KAAM2C,EAAO0D,IE/C5Bvc,KcxBK,SAAcgZ,EAAG9C,GAEtB,IAAM2C,EAAQ,GACRnV,EAAOwS,EAAKiB,QAAU,KAAO,KAC7BuF,EAAQzZ,EAAI+V,EAAG9C,GACjBrb,GAAS,EAOb,IAL0B,kBAAfqb,EAAKrc,OAAqC,IAAfqc,EAAKrc,QACzCgf,EAAMhf,MAAQqc,EAAKrc,SAIZgB,EAAQ6hB,EAAM/kB,QAAQ,CAC7B,IAAMmC,EAAO4iB,EAAM7hB,GAEnB,GACgB,YAAdf,EAAKY,MACY,OAAjBZ,EAAK0O,SACL1O,EAAK6iB,YACL/Z,MAAMC,QAAQ/I,EAAK6iB,WAAWhB,YAC9B7hB,EAAK6iB,WAAWhB,UAAUze,SAAS,kBACnC,CACA2b,EAAM8C,UAAY,CAAC,sBACnB,OAIJ,OAAO3C,EAAE9C,EAAMxS,EAAMmV,EAAOwB,EAAKqC,GAAO,KdFxC/U,Ue7BK,SAAmBqR,EAAG9C,GAC3B,OAAO8C,EAAE9C,EAAM,IAAKjT,EAAI+V,EAAG9C,Kf6B3B0G,KgB5BK,SAAc5D,EAAG9C,GAEtB,OAAO8C,EAAEC,QAAQ/C,EAAM0C,EAAE,OAAQyB,EAAKpX,EAAI+V,EAAG9C,OhB2B7ChE,OiB/BK,SAAgB8G,EAAG9C,GACxB,OAAO8C,EAAE9C,EAAM,SAAUjT,EAAI+V,EAAG9C,KjB+BhC2G,MkB3BK,SAAe7D,EAAG9C,GAOvB,IANA,IAAM4G,EAAO5G,EAAKnB,SACdla,GAAS,EACPkiB,EAAQ7G,EAAK6G,OAAS,GAEtB9lB,EAAS,KAEN4D,EAAQiiB,EAAKnlB,QAAQ,CAQ5B,IAPA,IAAMqlB,EAAMF,EAAKjiB,GAAOka,SAClBrR,EAAiB,IAAV7I,EAAc,KAAO,KAE5BoiB,EAAM,GACRC,GAAa,EACXvlB,EAASue,EAAK6G,MAAQA,EAAMplB,OAASqlB,EAAIrlB,SAEtCulB,EAAYvlB,GAAQ,CAC3B,IAAMwlB,EAAOH,EAAIE,GACjBD,EAAI1lB,KACFyhB,EAAEmE,EAAMzZ,EAAM,CAACqZ,MAAOA,EAAMG,IAAaC,EAAOla,EAAI+V,EAAGmE,GAAQ,KAInElmB,EAAO4D,GAASme,EAAE8D,EAAKjiB,GAAQ,KAAMwf,EAAK4C,GAAK,IAGjD,OAAOjE,EACL9C,EACA,QACAmE,EACE,CAACrB,EAAE/hB,EAAO,GAAGue,SAAU,QAAS6E,EAAK,CAACpjB,EAAO,KAAK,KAAQygB,OACxDzgB,EAAO,GACH+hB,EACE,CACEnf,OAAOujB,EAAAA,EAAAA,IAAWnmB,EAAO,IACzB0D,KAAK0iB,EAAAA,EAAAA,IAASpmB,EAAOA,EAAOU,OAAS,KAEvC,QACA0iB,EAAKpjB,EAAOS,MAAM,IAAI,IAExB,KAEN,KlBbJkI,KmBhCK,SAAcoZ,EAAG9C,GACtB,OAAO8C,EAAEC,QAAQ/C,EAAM0C,EAAE,OpBDpB,SAAmBpX,GAQxB,IAPA,IAAM8b,EAASlmB,OAAOoK,GAChB+N,EAAS,YACXuI,EAAQvI,EAAO0I,KAAKqF,GACpBC,EAAO,EAELC,EAAQ,GAEP1F,GACL0F,EAAMjmB,KACJgkB,EAAS+B,EAAO5lB,MAAM6lB,EAAMzF,EAAMjd,OAAQ0iB,EAAO,GAAG,GACpDzF,EAAM,IAGRyF,EAAOzF,EAAMjd,MAAQid,EAAM,GAAGngB,OAC9BmgB,EAAQvI,EAAO0I,KAAKqF,GAKtB,OAFAE,EAAMjmB,KAAKgkB,EAAS+B,EAAO5lB,MAAM6lB,GAAOA,EAAO,GAAG,IAE3CC,EAAM/b,KAAK,IoBnBegc,CAAUrmB,OAAO8e,EAAK1U,WnBgCvDqC,coBlCK,SAAuBmV,EAAG9C,GAC/B,OAAO8C,EAAE9C,EAAM,OpBkCfwH,KAAMC,EACNC,KAAMD,EACN/W,WAAY+W,EACZE,mBAAoBF,GAItB,SAASA,IACP,OAAO,KqB+CT,IAAMnO,EAAM,GAAGC,eAQf,SAASqO,EAAQhJ,EAAMlF,GACrB,IAAM+I,EAAW/I,GAAW,GACtBoM,EAAYrD,EAASoF,qBAAsB,EAE3CjC,EAAe,GA+BrB,OA7BA9C,EAAEgD,UAAYA,EACdhD,EAAE+B,mBAC2B3gB,IAA3Bue,EAASoC,eAA0D,OAA3BpC,EAASoC,cAC7C,gBACApC,EAASoC,cACf/B,EAAEgF,cAAgBrF,EAASqF,eAAiB,YAC5ChF,EAAEiF,kBAAoBtF,EAASsF,mBAAqB,kBACpDjF,EAAEpS,W9B1GG,SAAqBsP,GAE1B,IAAMlf,EAAQ8D,OAAO6I,OAAO,MAE5B,IAAKuS,IAASA,EAAKxb,KACjB,MAAM,IAAI2b,MAAM,wCAUlB,OAPA6H,EAAAA,EAAAA,IAAMhI,EAAM,cAAc,SAACtP,GACzB,IAAM6T,EAAK3B,EAAMlS,EAAWC,YACxB4T,IAAOjL,EAAI3S,KAAK7F,EAAOyjB,KACzBzjB,EAAMyjB,GAAM7T,MAYhB,SAAoBC,GAClB,IAAM4T,EAAK3B,EAAMjS,GACjB,OAAO4T,GAAMjL,EAAI3S,KAAK7F,EAAOyjB,GAAMzjB,EAAMyjB,GAAM,M8BiFlC0D,CAAYrJ,GAC3BkE,EAAE8C,aAAeA,EAEjB9C,EAAE2B,cAAgB,GAElB3B,EAAE4B,eAAiB,GACnB5B,EAAEC,QAAUA,EACZD,EAAEI,UAAF,kBAAiBA,GAAaT,EAASS,UACvCJ,EAAEO,eAAiBZ,EAASY,eAC5BP,EAAEK,YAAcV,EAASU,aAEzB6E,EAAAA,EAAAA,IAAMpJ,EAAM,sBAAsB,SAAClO,GACjC,IAAM6T,EAAKrjB,OAAOwP,EAAWC,YAAYpP,cAIpC+X,EAAI3S,KAAKif,EAAcrB,KAC1BqB,EAAarB,GAAM7T,MAKhBoS,EAQP,SAASC,EAAQV,EAAMC,GAErB,GAAID,GAAQ,SAAUA,GAAQA,EAAKnf,KAAM,CAEvC,IAAMA,EAAOmf,EAAKnf,KAEdA,EAAKglB,QACY,YAAf5F,EAAM9d,OACR8d,EAAQ,CACN9d,KAAM,UACN8N,QAAS,GACTmU,WAAY,GACZ5H,SAAU,KAIdyD,EAAMhQ,QAAUpP,EAAKglB,OAGJ,YAAf5F,EAAM9d,MAAsBtB,EAAKilB,cACnC7F,EAAMmE,YAAN,kBAAuBnE,EAAMmE,YAAevjB,EAAKilB,cAG/C,aAAc7F,GAASA,EAAMzD,UAAY3b,EAAKklB,YAChD9F,EAAMzD,SAAW3b,EAAKklB,WAI1B,GAAI/F,EAAM,CACR,IAAMgG,EAAM,SAAUhG,EAAOA,EAAO,CAAC/C,SAAU+C,ICjK3BrC,EDmKLqI,IChKhBrI,EAAKV,UACLU,EAAKV,SAAS3b,OACdqc,EAAKV,SAAS3b,MAAMiC,MACpBoa,EAAKV,SAAS3b,MAAM0G,QACpB2V,EAAKV,SAAS7a,KACdub,EAAKV,SAAS7a,IAAImB,MAClBoa,EAAKV,SAAS7a,IAAI4F,SD4JfiY,EAAMhD,SAAW,CAAC3b,OAAOujB,EAAAA,EAAAA,IAAWmB,GAAM5jB,KAAK0iB,EAAAA,EAAAA,IAASkB,KCrKzD,IAAmBrI,EDyKtB,OAAOsC,EAQT,SAASQ,EAAE9C,EAAM1N,EAASqQ,EAAO9D,GAO/B,OANInS,MAAMC,QAAQgW,KAChB9D,EAAW8D,EACXA,EAAQ,IAIHI,EAAQ/C,EAAM,CACnBxb,KAAM,UACN8N,QAAAA,EACAmU,WAAY9D,GAAS,GACrB9D,SAAUA,GAAY,MAYrB,SAASyJ,EAAO1J,EAAMlF,GAC3B,IAAMoJ,EAAI8E,EAAQhJ,EAAMlF,GAClBsG,EAAOgD,EAAIF,EAAGlE,EAAM,MACpB2J,EE/MD,SAAgBzF,GAKrB,IAJA,IAAIne,GAAS,EAEP6jB,EAAY,KAET7jB,EAAQme,EAAE2B,cAAchjB,QAAQ,CACvC,IAAMqL,EAAMgW,EAAE8C,aAAa9C,EAAE2B,cAAc9f,GAAOpD,eAElD,GAAKuL,EAAL,CAWA,IAPA,IAAM9K,EAAU+K,EAAI+V,EAAGhW,GACjByX,EAAKrjB,OAAO4L,EAAI6D,YAChB6T,EAASd,EAAYa,EAAG9R,eAC1BgW,EAAiB,EAEfC,EAAiB,KAEdD,GAAkB3F,EAAE4B,eAAeH,IAAK,CAE/C,IAAMoE,EAAgB,CACpBnkB,KAAM,UACN8N,QAAS,IACTmU,WAAY,CACV7B,KACE,IACA9B,EAAE+B,cACF,SACAL,GACCiE,EAAiB,EAAI,IAAMA,EAAiB,IAC/CG,qBAAqB,EACrBnD,UAAW,CAAC,yBACZoD,UAAW/F,EAAEiF,mBAEflJ,SAAU,CAAC,CAACra,KAAM,OAAQ8G,MAAO,YAG/Bmd,EAAiB,GACnBE,EAAc9J,SAASxd,KAAK,CAC1BmD,KAAM,UACN8N,QAAS,MACTuM,SAAU,CAAC,CAACra,KAAM,OAAQ8G,MAAOpK,OAAOunB,OAIxCC,EAAejnB,OAAS,GAC1BinB,EAAernB,KAAK,CAACmD,KAAM,OAAQ8G,MAAO,MAG5Cod,EAAernB,KAAKsnB,GAGtB,IAAM5f,EAAO/G,EAAQA,EAAQP,OAAS,GAEtC,GAAIsH,GAAsB,YAAdA,EAAKvE,MAAuC,MAAjBuE,EAAKuJ,QAAiB,OACrDwW,EAAW/f,EAAK8V,SAAS9V,EAAK8V,SAASpd,OAAS,GAClDqnB,GAA8B,SAAlBA,EAAStkB,KACvBskB,EAASxd,OAAS,IAElBvC,EAAK8V,SAASxd,KAAK,CAACmD,KAAM,OAAQ8G,MAAO,OAG3C,EAAAvC,EAAK8V,UAASxd,KAAd,QAAsBqnB,QAEtB1mB,EAAQX,KAAR,MAAAW,EAAgB0mB,GAIlB,IAAMtN,EAAW,CACf5W,KAAM,UACN8N,QAAS,KACTmU,WAAY,CAAClC,GAAIzB,EAAE+B,cAAgB,MAAQL,GAC3C3F,SAAUsF,EAAKniB,GAAS,IAGtB8K,EAAIwS,WACNlE,EAASkE,SAAWxS,EAAIwS,UAG1BkJ,EAAUnnB,KAAK+Z,IAGjB,OAAyB,IAArBoN,EAAU/mB,OACL,KAGF,CACL+C,KAAM,UACN8N,QAAS,UACTmU,WAAY,CAACsC,eAAe,EAAMtD,UAAW,CAAC,cAC9C5G,SAAU,CACR,CACEra,KAAM,UACN8N,QAAS,KACTmU,WAAY,CAAClC,GAAI,iBAAkBkB,UAAW,CAAC,YAC/C5G,SAAU,CAAC6D,EAAE,OAAQI,EAAEgF,iBAEzB,CAACtjB,KAAM,OAAQ8G,MAAO,MACtB,CACE9G,KAAM,UACN8N,QAAS,KACTmU,WAAY,GACZ5H,SAAUsF,EAAKqE,GAAW,IAE5B,CAAChkB,KAAM,OAAQ8G,MAAO,QFsGb0d,CAAOlG,GASpB,OAPIyF,GAIFvI,EAAKnB,SAASxd,KAAKqhB,EAAE,OAAQ,MAAO6F,GAG/B7b,MAAMC,QAAQqT,GAAQ,CAACxb,KAAM,OAAQqa,SAAUmB,GAAQA,EGrMhE,IAUA,EAPI,SAAUiJ,EAAavP,GACrB,OAAOuP,GAAe,QAASA,EAcrC,SAAgBA,EAAavP,GAC3B,OAAO,SAACsG,EAAMkJ,EAAMjmB,GAClBgmB,EAAYE,IAAIb,EAAOtI,EAAMtG,GAAUwP,GAAM,SAACE,GAC5CnmB,EAAKmmB,OAhBDC,CAAOJ,EAAavP,GA2B9B,SAAgBA,GAEd,OAAO,SAACsG,GAAD,OAAUsI,EAAOtI,EAAMtG,IA5BtB4P,CAAOL,GAAevP","sources":["../../node_modules/mdurl/encode.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/micromark/lib/parse.js","../../node_modules/remark-parse/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/unist-builder/index.js","../../node_modules/mdast-util-definitions/index.js","../../node_modules/mdast-util-to-hast/lib/traverse.js","../../node_modules/micromark-util-encode/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/wrap.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/unist-util-generated/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js"],"sourcesContent":["\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {StackItem[]} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n\n  let chunks = []\n  /** @type {Token[]} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Event[]} events\n * @returns {Event[]}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\n\nexport var u = /**\n * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n */ (\n  /**\n   * @param {string} type Type of node\n   * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n   * @param {ChildrenOrValue} [value] `children` or `value` of node\n   * @returns {Node}\n   */\n  function (type, props, value) {\n    /** @type {Node} */\n    var node = {type: String(type)}\n\n    if (\n      (value === undefined || value === null) &&\n      (typeof props === 'string' || Array.isArray(props))\n    ) {\n      value = props\n    } else {\n      Object.assign(node, props)\n    }\n\n    if (Array.isArray(value)) {\n      node.children = value\n    } else if (value !== undefined && value !== null) {\n      node.value = String(value)\n    }\n\n    return node\n  }\n)\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function definition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nfunction normalizeUri(value) {\n  /** @type {string[]} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = sanitizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalize(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalize(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalize(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalize(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {trimLines} from 'trim-lines'\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))))\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {string} clobberPrefix Prefix to use to prevent DOM clobbering\n * @property {string} footnoteLabel Label to use to introduce the footnote section\n * @property {string} footnoteBackLabel Label to use to go back to a footnote call from the footnote section\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Record<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array<string>} footnoteOrder Order in which footnotes occur\n * @property {Record<string, number>} footnoteCounts Counts the same footnote was used\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = sanitizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: 'h2',\n        properties: {id: 'footnote-label', className: ['sr-only']},\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"names":["encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","module","exports","content","tokenize","effects","previous","contentStart","attempt","this","parser","constructs","contentInitial","consume","enter","exit","factorySpace","lineStart","token","contentType","next","data","markdownLineEnding","document","childFlow","childToken","lineStartOffset","self","stack","continued","start","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","point","indexBeforeExits","events","indexBeforeFlow","type","end","exitContainers","index","Object","assign","splice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","subtokenize","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","value","join","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","Array","isArray","handleListOfConstructs","map","def","all","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","destinationEnclosedBefore","asciiControl","destinationRaw","destinationEnclosed","destinationEnclosedEscape","markdownLineEndingOrSpace","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","titleConstruct","defined","before","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","toLowerCase","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","done","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","characterReference","numeric","asciiHexDigit","decodeNamedCharacterReference","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","asciiAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","declaration","commentStart","commentStartDash","comment","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","resolveText","search","own","hasOwnProperty","fromMarkdown","encoding","options","config","configure","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","mdastExtensions","compile","tree","children","tokenStack","listStack","resume","setData","getData","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","d","and","node","errorHandler","onExitError","Error","stringifyPosition","parseInt","lang","replace","url","depth","parent","referenceType","ancestor","decodeString","fragment","alt","decodeNumericCharacterReference","ordered","spread","checked","compiler","postprocess","combineExtensions","defaultConstructs","concat","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","combined","extension","left","right","Parser","doc","settings","u","props","clean","unknown","h","augment","one","fn","handlers","passThrough","returnNode","unknownHandler","values","nodes","head","characterReferences","sanitizeUri","protocol","skip","normalizeUri","colon","indexOf","questionMark","numberSign","slash","wrap","loose","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","src","normalize","inlineCode","linkReference","listLoose","wrapped","disabled","child","items","properties","root","table","rows","align","row","out","cellIndex","cell","pointStart","pointEnd","source","last","lines","trimLines","toml","ignore","yaml","footnoteDefinition","factory","allowDangerousHtml","footnoteLabel","footnoteBackLabel","visit","definitions","hName","hProperties","hChildren","ctx","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","destination","file","run","error","bridge","mutate"],"sourceRoot":""}