{"version":3,"file":"static/js/9134.b5b7fcbc.chunk.js","mappings":"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","sources":["../../node_modules/hast-util-embedded/lib/index.js","../../node_modules/hast-util-is-body-ok-link/index.js","../../node_modules/hast-util-phrasing/lib/index.js","../../node_modules/html-whitespace-sensitive-tag-names/index.js","../../node_modules/rehype-format/index.js","../../node_modules/rehype-minify-whitespace/block.js","../../node_modules/rehype-minify-whitespace/content.js","../../node_modules/rehype-minify-whitespace/skippable.js","../../node_modules/rehype-minify-whitespace/index.js","../../node_modules/rehype-video/src/index.ts","../../node_modules/rehype-video/src/detailsNode.ts"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n */\n\nimport {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is a *embedded content*.\n *\n * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}\n * @param value\n *   Thing to check (typically `Node`).\n * @returns\n *   Whether `value` is an element considered embedded content.\n *\n *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,\n *   `object`, `picture`, `svg`, and `video` are embedded content.\n */\n// @ts-expect-error Sure, the assertion matches.\nexport const embedded = convertElement([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n])\n","/**\n * @fileoverview\n *   Check if a `link` element is “Body OK”.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {isBodyOkLink} from 'hast-util-is-body-ok-link'\n *\n *   isBodyOkLink(h('link', {itemProp: 'foo'})) //=> true\n *   isBodyOkLink(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true\n *   isBodyOkLink(h('link', {rel: ['author'], href: 'index.css'})) //=> false\n *   ```\n *\n *   ## API\n *\n *   ### `isBodyOkLink(node)`\n *\n *   * Return `true` for `link` elements with an `itemProp`\n *   * Return `true` for `link` elements with a `rel` list where one or more\n *     entries are `pingback`, `prefetch`, or `stylesheet`.\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\n\nconst list = new Set(['pingback', 'prefetch', 'stylesheet'])\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Check if a `link` element is “Body OK”.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nexport function isBodyOkLink(node) {\n  if (!isElement(node, 'link')) {\n    return false\n  }\n\n  if (hasProperty(node, 'itemProp')) {\n    return true\n  }\n\n  const props = node.properties || {}\n  const rel = props.rel || []\n  let index = -1\n\n  if (!Array.isArray(rel) || rel.length === 0) {\n    return false\n  }\n\n  while (++index < rel.length) {\n    if (!list.has(String(rel[index]))) {\n      return false\n    }\n  }\n\n  return true\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Root | Content} Node\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {embedded} from 'hast-util-embedded'\nimport {isBodyOkLink} from 'hast-util-is-body-ok-link'\n\nconst basic = convertElement([\n  'a',\n  'abbr',\n  // `area` is in fact only phrasing if it is inside a `map` element.\n  // However, since `area`s are required to be inside a `map` element, and it’s\n  // a rather involved check, it’s ignored here for now.\n  'area',\n  'b',\n  'bdi',\n  'bdo',\n  'br',\n  'button',\n  'cite',\n  'code',\n  'data',\n  'datalist',\n  'del',\n  'dfn',\n  'em',\n  'i',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'map',\n  'mark',\n  'meter',\n  'noscript',\n  'output',\n  'progress',\n  'q',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'select',\n  'small',\n  'span',\n  'strong',\n  'sub',\n  'sup',\n  'template',\n  'textarea',\n  'time',\n  'u',\n  'var',\n  'wbr'\n])\n\nconst meta = convertElement('meta')\n\n/**\n * Check if the given value is *phrasing* content.\n *\n * @param {unknown} value\n *   Thing to check, typically `Node`.\n * @returns {boolean}\n *   Whether `value` is phrasing content.\n */\nexport function phrasing(value) {\n  return Boolean(\n    node(value) &&\n      (value.type === 'text' ||\n        basic(value) ||\n        embedded(value) ||\n        isBodyOkLink(value) ||\n        (meta(value) && hasProperty(value, 'itemProp')))\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction node(value) {\n  // @ts-expect-error: looks like an object.\n  return value && typeof value === 'object' && 'type' in value\n}\n","/**\n * @fileoverview\n *   List of whitespace sensitive HTML tag names\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'\n *\n *   whitespaceSensitiveTagNames\n *   //=> ['pre', 'script', 'style', 'textarea']\n *   ```\n *\n *   ## API\n *\n *   ### `whitespaceSensitiveTagNames`\n *\n *   List of whitespace sensitive HTML tag names (`string[]`).\n */\n\nexport const whitespaceSensitiveTagNames = [\n  'pre',\n  'script',\n  'style',\n  'textarea'\n]\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root['children'][number]} Child\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Child} Node\n *\n * @typedef Options\n *   Configuration.\n * @property {number|string} [indent=2]\n *   Indentation per level (`number`, `string`, default: `2`).\n *   When number, uses that amount of spaces.\n *   When `string`, uses that per indentation level.\n * @property {boolean} [indentInitial=true]\n *   Whether to indent the first level (`boolean`, default: `true`).\n *   This is usually the `<html>`, thus not indenting `head` and `body`.\n * @property {Array<string>} [blanks=[]]\n *   List of tag names to join with a blank line (`Array<string>`, default:\n *   `[]`).\n *   These tags, when next to each other, are joined by a blank line (`\\n\\n`).\n *   For example, when `['head', 'body']` is given, a blank line is added\n *   between these two.\n */\n\nimport rehypeMinifyWhitespace from 'rehype-minify-whitespace'\nimport {visitParents, SKIP} from 'unist-util-visit-parents'\nimport {embedded} from 'hast-util-embedded'\nimport {phrasing} from 'hast-util-phrasing'\nimport {whitespace} from 'hast-util-whitespace'\nimport {isElement} from 'hast-util-is-element'\nimport {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'\n\nconst minify = rehypeMinifyWhitespace({newlines: true})\n\n/**\n * Format whitespace in HTML.\n *\n * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}\n */\nexport default function rehypeFormat(options = {}) {\n  let indent = options.indent || 2\n  let indentInitial = options.indentInitial\n\n  if (typeof indent === 'number') {\n    indent = ' '.repeat(indent)\n  }\n\n  // Default to indenting the initial level.\n  if (indentInitial === null || indentInitial === undefined) {\n    indentInitial = true\n  }\n\n  return (tree) => {\n    /** @type {boolean|undefined} */\n    let head\n\n    // @ts-expect-error: fine, it’s a sync transformer.\n    minify(tree)\n\n    // eslint-disable-next-line complexity\n    visitParents(tree, (node, parents) => {\n      let index = -1\n\n      if (!('children' in node)) {\n        return\n      }\n\n      if (isElement(node, 'head')) {\n        head = true\n      }\n\n      if (head && isElement(node, 'body')) {\n        head = undefined\n      }\n\n      if (isElement(node, whitespaceSensitiveTagNames)) {\n        return SKIP\n      }\n\n      const children = node.children\n      let level = parents.length\n\n      // Don’t indent content of whitespace-sensitive nodes / inlines.\n      if (children.length === 0 || !padding(node, head)) {\n        return\n      }\n\n      if (!indentInitial) {\n        level--\n      }\n\n      /** @type {boolean|undefined} */\n      let eol\n\n      // Indent newlines in `text`.\n      while (++index < children.length) {\n        const child = children[index]\n\n        if (child.type === 'text' || child.type === 'comment') {\n          if (child.value.includes('\\n')) {\n            eol = true\n          }\n\n          child.value = child.value.replace(\n            / *\\n/g,\n            '$&' + String(indent).repeat(level)\n          )\n        }\n      }\n\n      /** @type {Array<Child>} */\n      const result = []\n      /** @type {Child|undefined} */\n      let previous\n\n      index = -1\n\n      while (++index < children.length) {\n        const child = children[index]\n\n        if (padding(child, head) || (eol && !index)) {\n          addBreak(result, level, child)\n          eol = true\n        }\n\n        previous = child\n        result.push(child)\n      }\n\n      if (previous && (eol || padding(previous, head))) {\n        // Ignore trailing whitespace (if that already existed), as we’ll add\n        // properly indented whitespace.\n        if (whitespace(previous)) {\n          result.pop()\n          previous = result[result.length - 1]\n        }\n\n        addBreak(result, level - 1)\n      }\n\n      node.children = result\n    })\n  }\n\n  /**\n   * @param {Array<Child>} list\n   * @param {number} level\n   * @param {Child} [next]\n   * @returns {void}\n   */\n  function addBreak(list, level, next) {\n    const tail = list[list.length - 1]\n    const previous = whitespace(tail) ? list[list.length - 2] : tail\n    const replace =\n      (blank(previous) && blank(next) ? '\\n\\n' : '\\n') +\n      String(indent).repeat(Math.max(level, 0))\n\n    if (tail && tail.type === 'text') {\n      tail.value = whitespace(tail) ? replace : tail.value + replace\n    } else {\n      list.push({type: 'text', value: replace})\n    }\n  }\n\n  /**\n   * @param {Node|undefined} node\n   * @returns {boolean}\n   */\n  function blank(node) {\n    return Boolean(\n      node &&\n        node.type === 'element' &&\n        options.blanks &&\n        options.blanks.length > 0 &&\n        options.blanks.includes(node.tagName)\n    )\n  }\n}\n\n/**\n * @param {Node} node\n * @param {boolean|undefined} head\n * @returns {boolean}\n */\nfunction padding(node, head) {\n  return (\n    node.type === 'root' ||\n    (node.type === 'element'\n      ? head || isElement(node, 'script') || embedded(node) || !phrasing(node)\n      : false)\n  )\n}\n","// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nexport const blocks = [\n  'address', // Flow content.\n  'article', // Sections and headings.\n  'aside', // Sections and headings.\n  'blockquote', // Flow content.\n  'body', // Page.\n  'br', // Contribute whitespace intrinsically.\n  'caption', // Similar to block.\n  'center', // Flow content, legacy.\n  'col', // Similar to block.\n  'colgroup', // Similar to block.\n  'dd', // Lists.\n  'dialog', // Flow content.\n  'dir', // Lists, legacy.\n  'div', // Flow content.\n  'dl', // Lists.\n  'dt', // Lists.\n  'figcaption', // Flow content.\n  'figure', // Flow content.\n  'footer', // Flow content.\n  'form', // Flow content.\n  'h1', // Sections and headings.\n  'h2', // Sections and headings.\n  'h3', // Sections and headings.\n  'h4', // Sections and headings.\n  'h5', // Sections and headings.\n  'h6', // Sections and headings.\n  'head', // Page.\n  'header', // Flow content.\n  'hgroup', // Sections and headings.\n  'hr', // Flow content.\n  'html', // Page.\n  'legend', // Flow content.\n  'li', // Block-like.\n  'li', // Similar to block.\n  'listing', // Flow content, legacy\n  'main', // Flow content.\n  'menu', // Lists.\n  'nav', // Sections and headings.\n  'ol', // Lists.\n  'optgroup', // Similar to block.\n  'option', // Similar to block.\n  'p', // Flow content.\n  'plaintext', // Flow content, legacy\n  'pre', // Flow content.\n  'section', // Sections and headings.\n  'summary', // Similar to block.\n  'table', // Similar to block.\n  'tbody', // Similar to block.\n  'td', // Block-like.\n  'td', // Similar to block.\n  'tfoot', // Similar to block.\n  'th', // Block-like.\n  'th', // Similar to block.\n  'thead', // Similar to block.\n  'tr', // Similar to block.\n  'ul', // Lists.\n  'wbr', // Contribute whitespace intrinsically.\n  'xmp' // Flow content, legacy\n]\n","export const content = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n","export const skippable = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n","/**\n * rehype plugin to minify whitespace between elements.\n *\n * ## What is this?\n *\n * This package is a plugin that can minify the whitespace between elements.\n *\n * ## When should I use this?\n *\n * You can use this plugin when you want to improve the size of HTML documents.\n *\n * ## API\n *\n * ### `unified().use(rehypeMinifyWhitespace[, options])`\n *\n * Minify whitespace.\n *\n * ##### `options`\n *\n * Configuration (optional).\n *\n * ##### `options.newlines`\n *\n * Whether to collapse runs of whitespace that include line endings to one\n * line ending (`boolean`, default: `false`).\n * The default is to collapse everything to one space.\n *\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {Root|Root['children'][number]} Node\n *\n * @typedef Options\n * @property {boolean} [newlines=false]\n *   If `newlines: true`, collapses whitespace containing newlines to `'\\n'`\n *   instead of `' '`.\n *   The default is to collapse to a single space.\n *\n * @typedef {'pre'|'nowrap'|'pre-wrap'|'normal'} Whitespace\n *\n * @typedef Context\n * @property {ReturnType<collapseFactory>} collapse\n * @property {Whitespace} whitespace\n * @property {boolean} [before]\n * @property {boolean} [after]\n *\n * @typedef Result\n * @property {boolean} remove\n * @property {boolean} ignore\n * @property {boolean} stripAtStart\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {embedded} from 'hast-util-embedded'\nimport {convert} from 'unist-util-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {blocks} from './block.js'\nimport {content as contents} from './content.js'\nimport {skippable as skippables} from './skippable.js'\n\nconst ignorableNode = convert(['doctype', 'comment'])\n\n/**\n * Minify whitespace.\n *\n * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}\n */\nexport default function rehypeMinifyWhitespace(options = {}) {\n  const collapse = collapseFactory(\n    options.newlines ? replaceNewlines : replaceWhitespace\n  )\n\n  return (tree) => {\n    minify(tree, {collapse, whitespace: 'normal'})\n  }\n}\n\n/**\n * @param {Node} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minify(node, context) {\n  if ('children' in node) {\n    const settings = Object.assign({}, context)\n\n    if (node.type === 'root' || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, context)\n\n    return all(node, settings)\n  }\n\n  if (node.type === 'text') {\n    if (context.whitespace === 'normal') {\n      return minifyText(node, context)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (context.whitespace === 'nowrap') {\n      node.value = context.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {remove: false, ignore: ignorableNode(node), stripAtStart: false}\n}\n\n/**\n * @param {Text} node\n * @param {Context} context\n * @returns {Result}\n */\nfunction minifyText(node, context) {\n  const value = context.collapse(node.value)\n  const result = {remove: false, ignore: false, stripAtStart: false}\n  let start = 0\n  let end = value.length\n\n  if (context.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (context.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\n/**\n * @param {Root|Element} parent\n * @param {Context} context\n * @returns {Result}\n */\nfunction all(parent, context) {\n  let before = context.before\n  const after = context.after\n  const children = parent.children\n  let length = children.length\n  let index = -1\n\n  while (++index < length) {\n    const result = minify(\n      children[index],\n      Object.assign({}, context, {\n        before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}\n}\n\n/**\n * @param {Array<Node>} nodes\n * @param {number} index\n * @param {boolean|undefined} [after]\n * @returns {boolean|undefined}\n */\nfunction collapsableAfter(nodes, index, after) {\n  while (++index < nodes.length) {\n    const node = nodes[index]\n    let result = inferBoundary(node)\n\n    if (result === undefined && 'children' in node && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n/**\n * Infer two types of boundaries:\n *\n * 1. `true` — boundary for which whitespace around it does not contribute\n *    anything\n * 2. `false` — boundary for which whitespace around it *does* contribute\n *\n * No result (`undefined`) is returned if it is unknown.\n *\n * @param {Node} node\n * @returns {boolean|undefined}\n */\nfunction inferBoundary(node) {\n  if (node.type === 'element') {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (node.type === 'text') {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n/**\n * Infer whether a node is skippable.\n *\n * @param {Node} node\n * @returns {boolean}\n */\nfunction content(node) {\n  return embedded(node) || isElement(node, contents)\n}\n\n/**\n * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\n *\n * @param {Element} node\n * @returns {boolean}\n */\nfunction blocklike(node) {\n  return isElement(node, blocks)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {boolean}\n */\nfunction skippable(node) {\n  return (\n    Boolean(\n      'properties' in node && node.properties && node.properties.hidden\n    ) ||\n    ignorableNode(node) ||\n    isElement(node, skippables)\n  )\n}\n\n/**\n * @param {string} character\n * @returns {boolean}\n */\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction replaceNewlines(value) {\n  const match = /\\r?\\n|\\r/.exec(value)\n  return match ? match[0] : ' '\n}\n\n/**\n * @returns {string}\n */\nfunction replaceWhitespace() {\n  return ' '\n}\n\n/**\n * @param {(value: string) => string} replace\n */\nfunction collapseFactory(replace) {\n  return collapse\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function collapse(value) {\n    return String(value).replace(/[\\t\\n\\v\\f\\r ]+/g, replace)\n  }\n}\n\n/**\n * We don’t need to support void elements here (so `nobr wbr` -> `normal` is\n * ignored).\n *\n * @param {Root|Element} node\n * @param {Context} context\n * @returns {Whitespace}\n */\nfunction inferWhiteSpace(node, context) {\n  if ('tagName' in node && node.properties) {\n    switch (node.tagName) {\n      // Whitespace in script/style, while not displayed by CSS as significant,\n      // could have some meaning in JS/CSS, so we can’t touch them.\n      case 'listing':\n      case 'plaintext':\n      case 'script':\n      case 'style':\n      case 'xmp':\n        return 'pre'\n      case 'nobr':\n        return 'nowrap'\n      case 'pre':\n        return node.properties.wrap ? 'pre-wrap' : 'pre'\n      case 'td':\n      case 'th':\n        return node.properties.noWrap ? 'nowrap' : context.whitespace\n      case 'textarea':\n        return 'pre-wrap'\n      default:\n    }\n  }\n\n  return context.whitespace\n}\n","import { Plugin } from 'unified';\nimport { Root, Element } from 'hast';\nimport { visit } from 'unist-util-visit';\nimport { detailsNode } from './detailsNode';\n\nexport type RehypeVideoOptions = {\n  /**\n   * URL suffix verification.\n   * @default /\\/(.*)(.mp4|.mov)$/\n   */\n  test?: RegExp;\n  /**\n   * Support `<details>` tag to wrap <video>.\n   * @default true\n   */\n  details?: boolean;\n}\n\nconst properties = { muted: 'muted', controls: 'controls', style: 'max-height:640px;' };\nconst queryStringToObject = (url: string) =>\n  [...new URLSearchParams(url.split('?!#')[1])].reduce(\n    (a: Record<string, string>, [k, v]) => ((a[k] = v), a),\n    {}\n  );\n\nfunction reElement(node: Element, details: boolean, href: string) {\n  const filename = href.split('/').pop()?.replace(/(\\?|!|\\#|$).+/, '');\n  node.properties = { ...properties, src: href };\n  node.tagName = 'video';\n  node.children = [];\n  const { title = filename }= queryStringToObject(href);\n  if (details) {\n    const reNode = detailsNode(title);\n    reNode.children.push({ ...node });\n    node.children = reNode.children;\n    node.tagName = reNode.tagName;\n    node.properties = reNode.properties;\n  }\n}\n\nconst RehypeVideo: Plugin<[RehypeVideoOptions?], Root> = (options) => {\n  const { test = /\\/(.*)(.mp4|.mov)$/, details = true } = options || {};\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      const isChecked = (str: string) => test.test(str.replace(/(\\?|!|\\#|$).+/g, '').toLocaleLowerCase())\n      const child = node.children[0];\n      const delimiter = /((?:https?:\\/\\/)(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&=;%+?\\-\\\\(\\\\)]*)/g;\n      // const delimiter = /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&=;%+?\\-\\\\(\\\\)]*)/g;\n\n      if (node.tagName === 'p' && node.children.length === 1) {\n        if (child.type === 'text' && delimiter.test(child.value) && isChecked(child.value)) {\n          reElement(node, details, child.value);\n        }\n        if (child.type === 'element' && child.tagName === 'a' && child.properties && typeof child.properties.href === 'string' && isChecked(child.properties.href)) {\n          reElement(node, details, child.properties.href);\n        }\n      }\n    });\n  }\n}\n\nexport default RehypeVideo;\n","import { Element } from 'hast';\n\nexport function detailsNode(title?: string): Element {\n  return {\n    type: 'element',\n    tagName: 'details',\n    properties: { open: true, className: 'octicon octicon-video' },\n    children: [\n      {\n        type: 'element',\n        tagName: 'summary',\n        children: [\n          {\n            type: 'element',\n            tagName: 'svg',\n            properties: {\n              'aria-hidden': true, height: 16, width: 16, viewBox: '0 0 16 16', version: '1.1', 'data-view-component': true,\n              className: 'octicon octicon-device-camera-video'\n            },\n            children: [\n              {\n                type: 'element',\n                tagName: 'path',\n                properties: {\n                  'fill-rule': 'evenodd',\n                  d: 'M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z'\n                },\n                children: [],\n              }\n            ]\n          },\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              'aria-label': `Video description ${title || ''}`\n            },\n            children: [\n              {\n                type: 'text',\n                value: title || ''\n              }\n            ]\n          },\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              className: 'dropdown-caret'\n            },\n            children: []\n          }\n        ]\n      }\n    ]\n  }\n}"],"names":["embedded","convertElement","list","Set","basic","meta","phrasing","value","Boolean","node","type","isElement","hasProperty","rel","properties","index","Array","isArray","length","has","String","isBodyOkLink","whitespaceSensitiveTagNames","minify","rehypeMinifyWhitespace","newlines","rehypeFormat","options","arguments","undefined","indent","indentInitial","repeat","tree","head","visitParents","parents","SKIP","children","eol","level","padding","child","includes","replace","result","previous","addBreak","push","whitespace","pop","next","tail","blank","Math","max","blanks","tagName","blocks","content","skippable","ignorableNode","convert","collapse","collapseFactory","replaceNewlines","replaceWhitespace","context","settings","Object","assign","blocklike","before","after","wrap","noWrap","inferWhiteSpace","parent","collapsableAfter","remove","splice","ignore","stripAtStart","all","start","end","removable","charAt","slice","minifyText","nodes","inferBoundary","contents","hidden","skippables","character","match","exec","muted","controls","style","reElement","details","href","_href$split$pop","filename","split","src","title","URLSearchParams","reduce","a","_ref","k","v","reNode","open","className","height","width","viewBox","version","d","concat","detailsNode","test","visit","isChecked","str","toLocaleLowerCase","delimiter"],"sourceRoot":""}