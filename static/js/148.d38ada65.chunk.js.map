{"version":3,"file":"static/js/148.d38ada65.chunk.js","mappings":"6WAYe,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,YAAkB,eAAnCC,EAAI,KAAEC,EAAO,KACpB,GAAgCF,EAAAA,EAAAA,YAAkB,eAA3CG,EAAQ,KAAEC,EAAW,KACtBC,EAAc,SAACC,QAAa,IAAbA,IAAAA,EAAgB,IACnCJ,EAAQI,GACRF,ECFG,SAAwBG,EAAsBC,QAAP,IAAfD,IAAAA,EAAkB,SAAoB,IAAhBC,IAAAA,EAAmB,CAAC,IAAC,OAC7DA,GACX,IAAMC,GAAOC,EAAAA,EAAAA,KACVC,IAAIC,EAAAA,EAAa,CAAEC,UAAU,IAC7BF,IAAIG,EAAAA,GACJH,IAAII,EAAAA,GACJJ,IAAIK,EAAAA,GACJL,IAAIM,EAAAA,GACJN,IAAIO,EAAAA,GACJP,IAAIQ,EAAAA,GACJR,IAAIS,EAAAA,IACJT,IAAIU,EAAAA,GACJV,IAAIW,EAAAA,GAGJX,IAAIY,EAAAA,GACJC,YAAYjB,GACf,OAAOkB,OAAOhB,EAChB,CDhBgBiB,CAAepB,GAC7B,EACA,OACEqB,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAM,aAENC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,CACN5B,IAAQ6B,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAAC7B,MAAOL,KAC5B6B,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,QAAS,kBAAMhC,EArBpB,mHAqBwC,EAAAwB,SAAAA,cAE9CA,UAEDC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CACTC,YAAY,EACZjC,MAAOL,EACPuC,OAAO,qBACPC,WAAY,EAACC,EAAAA,EAAAA,SACbC,SAAWC,SAAAA,GAAG,OAAKvC,EAAYuC,EAAG,OAGtCd,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAACC,MAAM,kBAAkBC,MAAO9B,IAAY2B,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAAC7B,MAAOH,IAAa0B,UACvFC,EAAAA,EAAAA,KAACQ,EAAAA,GAAU,CACTE,OAAO,qBACPC,WAAY,EAACI,EAAAA,EAAAA,aACbN,YAAY,EACZjC,MAAOH,EACP2C,UAAQ,QAKlB,C","sources":["../../packages/html-to-markdown/src/index.tsx","../../packages/html-to-markdown/src/utils.ts"],"sourcesContent":["import { useState, Fragment } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, Button, CodeEditor } from '@wcj/tools-react-components';\nimport { markdown as markdownLang } from '@codemirror/lang-markdown';\nimport { html as htmlLang } from '@codemirror/lang-html';\nimport { htmlToMarkdown } from './utils';\n\nconst sample = `<h2>Web tool</h2>\n<p>Hello World</p>\n<pre><code class=\"language-css\">body { color: 'red'; }\n</code></pre>\n`;\n\nexport default function Html2Markdown() {\n  const [html, setHtml] = useState<string>();\n  const [markdown, setMarkdown] = useState<string>();\n  const handleInput = (value: string = '') => {\n    setHtml(value);\n    setMarkdown(htmlToMarkdown(value));\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"Input HTML\"\n        // overflow=\"hidden\"\n        extra={\n          <Fragment>\n            {html && <CopyButton value={html} />}\n            <Button onClick={() => handleInput(sample)}>Sample</Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          spellCheck={false}\n          value={html}\n          height=\"calc(100vh - 87px)\"\n          extensions={[htmlLang()]}\n          onChange={(val) => handleInput(val)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"Result Markdown\" extra={markdown && <CopyButton value={markdown} />}>\n        <CodeEditor\n          height=\"calc(100vh - 87px)\"\n          extensions={[markdownLang()]}\n          spellCheck={false}\n          value={markdown}\n          readOnly\n        />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n","import { unified } from 'unified';\nimport rehypeParse from 'rehype-parse';\nimport rehypeRemark from 'rehype-remark';\nimport remarkStringify from 'remark-stringify';\nimport remarkGfm from 'remark-gfm';\nimport slug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeIgnore from 'rehype-ignore';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeFormat from 'rehype-format';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeVideo from 'rehype-video';\n\ntype Options = {};\n\nexport function htmlToMarkdown(htmlStr: string = '', options: Options = {}) {\n  const {} = options;\n  const file = unified()\n    .use(rehypeParse, { fragment: true })\n    .use(slug)\n    .use(rehypeAutolinkHeadings)\n    .use(rehypeIgnore)\n    .use(rehypeVideo)\n    .use(rehypeFormat)\n    .use(rehypeRaw)\n    .use(rehypePrism)\n    .use(rehypeRemark)\n    .use(remarkGfm)\n    // .use(remarkPlugins || [])\n    // .use(rehypePlugins || [])\n    .use(remarkStringify)\n    .processSync(htmlStr);\n  return String(file);\n}\n"],"names":["Html2Markdown","useState","html","setHtml","markdown","setMarkdown","handleInput","value","htmlStr","options","file","unified","use","rehypeParse","fragment","slug","rehypeAutolinkHeadings","rehypeIgnore","rehypeVideo","rehypeFormat","rehypeRaw","rehypePrism","rehypeRemark","remarkGfm","remarkStringify","processSync","String","htmlToMarkdown","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","CodeEditor","spellCheck","height","extensions","htmlLang","onChange","val","markdownLang","readOnly"],"sourceRoot":""}