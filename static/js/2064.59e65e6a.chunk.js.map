{"version":3,"file":"static/js/2064.59e65e6a.chunk.js","mappings":"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","sources":["../../packages/html-formatter/src/index.tsx","../../packages/html-formatter/src/sample.ts"],"sourcesContent":["import { Fragment, useRef, useState } from 'react';\nimport {\n  StyledLayout,\n  CopyButton,\n  CodeEditor,\n  Button,\n  Wrapper,\n  ErrorLayout,\n  ResultCode,\n  Spacing,\n} from '@wcj/tools-react-components';\nimport { html } from '@codemirror/lang-html';\nimport { minify, Options } from 'html-minifier';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport styled from 'styled-components';\nimport prettier from 'prettier';\nimport parserHTML from 'prettier/parser-html';\nimport * as sample from './sample';\n\ntype Type = 'formatter' | 'minify';\n\nconst Info = styled.span`\n  color: var(--color-fg-subtle);\n`;\n\nconst Danger = styled.span`\n  color: red;\n`;\n\nconst defaultOptions: Options = {\n  collapseBooleanAttributes: true,\n  collapseWhitespace: true,\n  decodeEntities: true,\n  html5: true,\n  minifyCSS: true,\n  processConditionalComments: true,\n  minifyJS: true,\n  processScripts: ['text/html'],\n  removeAttributeQuotes: true,\n  removeComments: true,\n  removeEmptyAttributes: true,\n  removeOptionalTags: true,\n  removeRedundantAttributes: true,\n  removeScriptTypeAttributes: true,\n  removeStyleLinkTypeAttributes: true,\n  removeTagWhitespace: true,\n  sortAttributes: true,\n  sortClassName: true,\n  trimCustomFragments: true,\n  useShortDoctype: true,\n};\n\nconst allOptions: Options = {\n  ...defaultOptions,\n  caseSensitive: true,\n  collapseInlineTagWhitespace: true,\n  conservativeCollapse: true,\n  includeAutoGeneratedTags: true,\n  keepClosingSlash: true,\n  preserveLineBreaks: true,\n  preventAttributesEscaping: true,\n  removeEmptyElements: true,\n};\n\nexport default function HTMLFormatter() {\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [type, setType] = useState<Type>('minify');\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState<Options>(defaultOptions);\n  const [error, setError] = useState('');\n  const [tabWidth, setTabWidth] = useState(2);\n  const handleFormat = () => {\n    try {\n      setError('');\n      setValue(prettier.format(value, { parser: 'html', tabWidth: tabWidth, printWidth: 120, plugins: [parserHTML] }));\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  const handleMinify = () => {\n    try {\n      setError('');\n      const val = minify(value, { ...options });\n      setValue(val || '');\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('error', error);\n        setError(error.message);\n      }\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"HTML Formatter/Minify\"\n        extra={\n          <Fragment>\n            {value && (\n              <Fragment>\n                {type === 'formatter' && <Button onClick={() => handleFormat()}>Formatter</Button>}\n                {type === 'minify' && <Button onClick={() => handleMinify()}>Minify</Button>}\n              </Fragment>\n            )}\n            {value && (\n              <select value={type} onChange={(evn) => setType(evn.target.value as Type)}>\n                <option value=\"formatter\">Formatter</option>\n                <option value=\"minify\">Minify</option>\n              </select>\n            )}\n            {value && type === 'formatter' && (\n              <select onChange={(evn) => setTabWidth(Number(evn.target.value))}>\n                <option value={2}>2 Tab Space</option>\n                <option value={3}>3 Tab Space</option>\n                <option value={4}>4 Tab Space</option>\n                <option value={5}>5 Tab Space</option>\n              </select>\n            )}\n            {value && <CopyButton value={value} />}\n            <Button\n              onClick={() => {\n                editor.current?.view?.focus();\n                if (type === 'formatter') {\n                  setValue(sample.html);\n                }\n                if (type === 'minify') {\n                  setValue(sample.val);\n                }\n              }}\n            >\n              Sample\n            </Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={value}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[html()]}\n          onChange={(value) => {\n            setValue(value);\n          }}\n        />\n      </StyledLayout>\n      {type === 'minify' && (\n        <StyledLayout\n          title=\"Options\"\n          style={{ maxWidth: 520 }}\n          extra={\n            <Fragment>\n              <Button onClick={() => setOptions(defaultOptions)}>Reset</Button>\n              <Button onClick={() => setOptions(allOptions)}>All</Button>\n              <Button onClick={() => setOptions({})}>None</Button>\n            </Fragment>\n          }\n        >\n          <ResultCode codeProps={{ style: { height: 'calc(100vh - 87px)', overflow: 'auto', margin: 0 } }}>\n            <Spacing>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.caseSensitive}\n                    onChange={({ target }) => setOptions({ ...options, caseSensitive: target.checked })}\n                  />{' '}\n                  Case-sensitive <Info>Treat attributes in case sensitive manner (useful for custom HTML tags)</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseBooleanAttributes}\n                    onChange={({ target }) => setOptions({ ...options, collapseBooleanAttributes: target.checked })}\n                  />{' '}\n                  Collapse boolean attributes <Info>Omit attribute values from boolean attributes</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseInlineTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseInlineTagWhitespace: target.checked })}\n                  />{' '}\n                  <Danger>Collapse inline tag whitespace</Danger>{' '}\n                  <Info>\n                    Don't leave any spaces between display:inline; elements when collapsing. Must be used in conjunction\n                    with collapseWhitespace=true\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseWhitespace: target.checked })}\n                  />{' '}\n                  Collapse whitespace{' '}\n                  <Info>Collapse white space that contributes to text nodes in a document tree</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.conservativeCollapse}\n                    onChange={({ target }) => setOptions({ ...options, conservativeCollapse: target.checked })}\n                  />\n                  Conservative collapse{' '}\n                  <Info>\n                    Always collapse to 1 space (never remove it entirely). Must be used in conjunction with\n                    collapseWhitespace=true\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.decodeEntities}\n                    onChange={({ target }) => setOptions({ ...options, decodeEntities: target.checked })}\n                  />\n                  Decode Entity Characters <Info>Use direct Unicode characters whenever possible</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.html5}\n                    onChange={({ target }) => setOptions({ ...options, html5: target.checked })}\n                  />\n                  HTML5 <Info>Parse input according to HTML5 specifications</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.includeAutoGeneratedTags}\n                    onChange={({ target }) => setOptions({ ...options, includeAutoGeneratedTags: target.checked })}\n                  />\n                  Include auto-generated tags <Info>Insert tags generated by HTML parser</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.keepClosingSlash}\n                    onChange={({ target }) => setOptions({ ...options, keepClosingSlash: target.checked })}\n                  />\n                  Keep closing slash <Info>Keep the trailing slash on singleton elements</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Max.line length\n                  <input\n                    type=\"number\"\n                    value={options.maxLineLength}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { maxLineLength: Number(target.value) } : {}) })\n                    }\n                  />\n                  <Info>\n                    Specify a maximum line length. Compressed output will be split by newlines at valid HTML\n                    split-points\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyCSS}\n                    onChange={({ target }) => setOptions({ ...options, minifyCSS: target.checked })}\n                  />\n                  Minify CSS{' '}\n                  <Info>\n                    Minify CSS in style elements and style attributes (uses{' '}\n                    <a href=\"https://github.com/jakubpawlowicz/clean-css\" target=\"_blank\">\n                      clean-css\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyJS}\n                    onChange={({ target }) => setOptions({ ...options, minifyJS: target.checked })}\n                  />\n                  Minify JavaScript{' '}\n                  <Info>\n                    Minify JavaScript in script elements and event attributes (uses{' '}\n                    <a href=\"https://github.com/jaywcjlove/uglify-js-export\" target=\"_blank\">\n                      UglifyJS\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Minify URLs\n                  <input\n                    type=\"number\"\n                    value={options.minifyURLs as string}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? ({ minifyURLs: target.value } as any) : {}) })\n                    }\n                  />\n                  <Info>\n                    Minify URLs in various attributes (uses{' '}\n                    <a href=\"https://github.com/stevenvachon/relateurl\" target=\"_blank\">\n                      relateurl\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preserveLineBreaks}\n                    onChange={({ target }) => setOptions({ ...options, preserveLineBreaks: target.checked })}\n                  />\n                  Preserve line-breaks{' '}\n                  <Info>\n                    Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a\n                    line break. Must be used in conjunction with collapseWhitespace=true\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preventAttributesEscaping}\n                    onChange={({ target }) => setOptions({ ...options, preventAttributesEscaping: target.checked })}\n                  />\n                  <Danger>Prevent attributes escaping</Danger>{' '}\n                  <Info>Prevents the escaping of the values of attributes</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.processConditionalComments}\n                    onChange={({ target }) => setOptions({ ...options, processConditionalComments: target.checked })}\n                  />\n                  Process conditional comments <Info>Process contents of conditional comments through minifier</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Process scripts\n                  <input\n                    type=\"text\"\n                    value={options.processScripts || ''}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { processScripts: target.value.split(',') } : {}) })\n                    }\n                  />\n                  <Info>\n                    Comma-delimited string corresponding to types of script elements to process through minifier (e.g.\n                    text/ng-template, text/x-handlebars-template)\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Quote character\n                  <input\n                    type=\"text\"\n                    value={options.quoteCharacter || ''}\n                    onChange={({ target }) => setOptions({ ...options, quoteCharacter: target.value })}\n                  />\n                  <Info>Type of quote to use for attribute values (' or \")</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeAttributeQuotes}\n                    onChange={({ target }) => setOptions({ ...options, removeAttributeQuotes: target.checked })}\n                  />\n                  Remove attribute quotes <Info>Remove quotes around attributes when possible</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeComments}\n                    onChange={({ target }) => setOptions({ ...options, removeComments: target.checked })}\n                  />\n                  Remove comments <Info>Strip HTML comments</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyAttributes: target.checked })}\n                  />\n                  Remove empty attributes <Info>Remove all attributes with whitespace-only values</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyElements}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyElements: target.checked })}\n                  />\n                  <Danger>Remove empty elements</Danger> <Info>Remove all elements with empty contents</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeOptionalTags}\n                    onChange={({ target }) => setOptions({ ...options, removeOptionalTags: target.checked })}\n                  />\n                  Remove optional tags\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeRedundantAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeRedundantAttributes: target.checked })}\n                  />\n                  Remove redundant attributes <Info>Remove attributes when value matches default.</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeScriptTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeScriptTypeAttributes: target.checked })}\n                  />\n                  Remove script type attributes{' '}\n                  <Info>\n                    Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeStyleLinkTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeStyleLinkTypeAttributes: target.checked })}\n                  />\n                  Remove style link type attributes{' '}\n                  <Info>\n                    Remove type=\"text/css\" from style and link tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, removeTagWhitespace: target.checked })}\n                  />\n                  <Danger>Remove tag whitespace</Danger>{' '}\n                  <Info>\n                    Remove space between attributes whenever possible. Note that this will result in invalid HTML!\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortAttributes}\n                    onChange={({ target }) => setOptions({ ...options, sortAttributes: target.checked })}\n                  />\n                  <Danger>Sort attributes</Danger> <Info>Sort attributes by frequency</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortClassName}\n                    onChange={({ target }) => setOptions({ ...options, sortClassName: target.checked })}\n                  />\n                  <Danger>Sort class name</Danger> <Info>Sort style classes by frequency</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.trimCustomFragments}\n                    onChange={({ target }) => setOptions({ ...options, trimCustomFragments: target.checked })}\n                  />\n                  Trim white space around custom fragments <Info>Trim white space around ignoreCustomFragments.</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.useShortDoctype}\n                    onChange={({ target }) => setOptions({ ...options, useShortDoctype: target.checked })}\n                  />\n                  Use short doctype <Info>Replaces the doctype with the short (HTML5) doctype</Info>\n                </span>\n              </label>\n            </Spacing>\n          </ResultCode>\n        </StyledLayout>\n      )}\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n","export const html = `<!DOCTYPE html> <html> <head> <title>Page Title</title> <style> body { margin: 0; } </style></head> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html>`;\nexport const val = `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>My First Heading</h1>\n    <p>My first paragraph.</p>\n  </body>\n  <script>\n    function formatter(name) {\n      return 'Hi!' + name\n    }\n  </script>\n</html>\n`;\n"],"names":["Info","styled","_templateObject","Danger","_templateObject2","defaultOptions","collapseBooleanAttributes","collapseWhitespace","decodeEntities","html5","minifyCSS","processConditionalComments","minifyJS","processScripts","removeAttributeQuotes","removeComments","removeEmptyAttributes","removeOptionalTags","removeRedundantAttributes","removeScriptTypeAttributes","removeStyleLinkTypeAttributes","removeTagWhitespace","sortAttributes","sortClassName","trimCustomFragments","useShortDoctype","allOptions","caseSensitive","collapseInlineTagWhitespace","conservativeCollapse","includeAutoGeneratedTags","keepClosingSlash","preserveLineBreaks","preventAttributesEscaping","removeEmptyElements","HTMLFormatter","editor","useRef","useState","type","setType","value","setValue","options","setOptions","error","setError","tabWidth","setTabWidth","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","prettier","parser","printWidth","plugins","parserHTML","Error","message","handleFormat","val","minify","console","log","handleMinify","onChange","evn","target","Number","CopyButton","current","view","focus","CodeEditor","ref","height","extensions","html","style","maxWidth","ResultCode","codeProps","overflow","margin","Spacing","checked","maxLineLength","href","minifyURLs","split","quoteCharacter","ErrorLayout"],"sourceRoot":""}