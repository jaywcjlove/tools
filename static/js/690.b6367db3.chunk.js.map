{"version":3,"file":"static/js/690.b6367db3.chunk.js","mappings":"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","sources":["../../node_modules/@uiw/react-md-editor/src/Context.tsx","../../node_modules/@uiw/react-md-editor/src/components/TextArea/shortcuts.ts","../../node_modules/rehype/index.js","../../node_modules/@uiw/react-md-editor/src/components/TextArea/Markdown.tsx","../../node_modules/@uiw/react-md-editor/src/utils/InsertTextAtPosition.ts","../../node_modules/@uiw/react-md-editor/src/utils/markdownUtils.ts","../../node_modules/@uiw/react-md-editor/src/commands/bold.tsx","../../node_modules/@uiw/react-md-editor/src/commands/code.tsx","../../node_modules/@uiw/react-md-editor/src/commands/comment.tsx","../../node_modules/@uiw/react-md-editor/src/commands/divider.tsx","../../node_modules/@uiw/react-md-editor/src/commands/fullscreen.tsx","../../node_modules/@uiw/react-md-editor/src/commands/group.tsx","../../node_modules/@uiw/react-md-editor/src/commands/hr.tsx","../../node_modules/@uiw/react-md-editor/src/commands/image.tsx","../../node_modules/@uiw/react-md-editor/src/commands/italic.tsx","../../node_modules/@uiw/react-md-editor/src/commands/link.tsx","../../node_modules/@uiw/react-md-editor/src/commands/list.tsx","../../node_modules/@uiw/react-md-editor/src/commands/preview.tsx","../../node_modules/@uiw/react-md-editor/src/commands/quote.tsx","../../node_modules/@uiw/react-md-editor/src/commands/strikeThrough.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title1.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title2.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title3.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title4.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title5.tsx","../../node_modules/@uiw/react-md-editor/src/commands/title6.tsx","../../node_modules/@uiw/react-md-editor/src/commands/index.ts","../../node_modules/@uiw/react-md-editor/src/components/TextArea/handleKeyDown.tsx","../../node_modules/@uiw/react-md-editor/src/components/TextArea/Textarea.tsx","../../node_modules/@uiw/react-md-editor/src/components/TextArea/index.tsx","../../node_modules/@uiw/react-md-editor/src/components/Toolbar/Child.tsx","../../node_modules/@uiw/react-md-editor/src/components/Toolbar/index.tsx","../../node_modules/@uiw/react-md-editor/src/components/DragBar/index.tsx","../../node_modules/@uiw/react-md-editor/src/Editor.tsx","../../node_modules/@uiw/react-md-editor/src/index.tsx","../../node_modules/rehype-parse/lib/errors.js","../../node_modules/rehype-parse/lib/index.js"],"sourcesContent":["import React from 'react';\nimport { ICommand, TextAreaCommandOrchestrator } from './commands';\nimport { MDEditorProps } from './Editor';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport type ContextStore = {\n  components?: MDEditorProps['components'];\n  commands?: ICommand<string>[];\n  extraCommands?: ICommand<string>[];\n  markdown?: string;\n  preview?: PreviewType;\n  height?: React.CSSProperties['height'];\n  fullscreen?: boolean;\n  highlightEnable?: boolean;\n  autoFocus?: boolean;\n  textarea?: HTMLTextAreaElement;\n  commandOrchestrator?: TextAreaCommandOrchestrator;\n  textareaWarp?: HTMLDivElement;\n  textareaPre?: HTMLPreElement;\n  container?: HTMLDivElement | null;\n  dispatch?: React.Dispatch<ContextStore>;\n  barPopup?: Record<string, boolean>;\n  scrollTop?: number;\n  scrollTopPreview?: number;\n  tabSize?: number;\n  defaultTabEnable?: boolean;\n};\n\nexport type ExecuteCommandState = Pick<ContextStore, 'fullscreen' | 'preview' | 'highlightEnable'>;\n\nexport function reducer(state: ContextStore, action: ContextStore) {\n  return { ...state, ...action };\n}\n\nexport const EditorContext = React.createContext<ContextStore>({ markdown: '' });\n","import { ICommand, TextAreaCommandOrchestrator } from '../../commands';\nimport { ContextStore, ExecuteCommandState } from '../../Context';\n\nfunction getCommands(data: ICommand[] = [], resulte: Record<string, ICommand> = {}): Record<string, ICommand> {\n  data.forEach((item) => {\n    if (item.children && Array.isArray(item.children)) {\n      resulte = { ...resulte, ...getCommands(item.children || []) };\n    } else if (item.keyCommand && item.shortcuts && item.execute) {\n      resulte[item.shortcuts.toLocaleLowerCase()] = item;\n    }\n  });\n  return resulte;\n}\n\nexport default function shortcutsHandle(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n  commands: ICommand[] = [],\n  commandOrchestrator?: TextAreaCommandOrchestrator,\n  dispatch?: React.Dispatch<ContextStore>,\n  state?: ExecuteCommandState,\n) {\n  const data = getCommands(commands || []);\n  const shortcuts: string[] = [];\n  if (e.altKey) {\n    shortcuts.push('alt');\n  }\n  if (e.shiftKey) {\n    shortcuts.push('shift');\n  }\n  if (e.metaKey) {\n    shortcuts.push('cmd');\n  }\n  if (e.ctrlKey) {\n    shortcuts.push('ctrl');\n  }\n  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {\n    shortcuts.push(e.key.toLocaleLowerCase());\n  }\n  if (/escape/.test(e.key.toLocaleLowerCase())) {\n    shortcuts.push('escape');\n  }\n  if (shortcuts.length < 1) {\n    return;\n  }\n\n  let equal = !!data[shortcuts.join('+')];\n  let command = equal ? data[shortcuts.join('+')] : undefined;\n\n  Object.keys(data).forEach((item) => {\n    const isequal = item.split('+').every((v) => {\n      if (/ctrlcmd/.test(v)) {\n        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');\n      }\n      return shortcuts.includes(v);\n    });\n    if (isequal) {\n      command = data[item];\n    }\n  });\n  if (command && commandOrchestrator) {\n    e.stopPropagation();\n    e.preventDefault();\n    commandOrchestrator.executeCommand(command, dispatch, state, shortcuts);\n    return;\n  }\n}\n","import {unified} from 'unified'\nimport rehypeParse from 'rehype-parse'\nimport rehypeStringify from 'rehype-stringify'\n\nexport const rehype = unified().use(rehypeParse).use(rehypeStringify).freeze()\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { IProps } from '../../Editor';\nimport { EditorContext } from '../../Context';\n\nfunction html2Escape(sHtml: string) {\n  return sHtml\n    .replace(/```(\\w+)?([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n      return str.replace(\n        /[<&\"]/g,\n        (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n      );\n    })\n    .replace(\n      /[<&\"]/g,\n      (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n    );\n}\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (!markdown) {\n    return <pre ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />;\n  }\n  let mdStr = `<pre class=\"language-markdown ${prefixCls}-text-pre wmde-markdown-color\"><code class=\"language-markdown\">${html2Escape(\n    String.raw`${markdown}`,\n  )}\\n</code></pre>`;\n\n  if (highlightEnable) {\n    try {\n      mdStr = rehype()\n        .data('settings', { fragment: true })\n        .use(rehypePrism, { ignoreMissing: true })\n        .processSync(mdStr)\n        .toString();\n    } catch (error) {}\n  }\n\n  return React.createElement('div', {\n    className: 'wmde-markdown-color',\n    dangerouslySetInnerHTML: { __html: mdStr || '' },\n  });\n}\n","/**\n * The MIT License\n * Copyright (c) 2018 Dmitriy Kubyshkin\n * Copied from https://github.com/grassator/insert-text-at-cursor\n */\n\nlet browserSupportsTextareaTextNodes: any;\n\n/**\n * @param {HTMLElement} input\n * @return {boolean}\n */\nfunction canManipulateViaTextNodes(input: HTMLTextAreaElement | HTMLInputElement): boolean {\n  if (input.nodeName !== 'TEXTAREA') {\n    return false;\n  }\n  if (typeof browserSupportsTextareaTextNodes === 'undefined') {\n    const textarea: HTMLTextAreaElement = document.createElement('textarea');\n    textarea.value = '1';\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n  return browserSupportsTextareaTextNodes;\n}\n\n/**\n * @param {string} val\n * @param {number} cursorIdx\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @return {void}\n */\nexport const insertAtLineStart = (\n  val: string,\n  cursorIdx: number,\n  input: HTMLTextAreaElement | HTMLInputElement,\n): void => {\n  const content = input.value;\n  let startIdx = 0;\n\n  while (cursorIdx--) {\n    let char = content[cursorIdx];\n    if (char === '\\n') {\n      startIdx = cursorIdx + 1;\n      break;\n    }\n  }\n\n  input.focus();\n  input.setRangeText(val, startIdx, startIdx);\n  input.dispatchEvent(new Event('input', { bubbles: true }));\n};\n\n/**\n * @param {HTMLTextAreaElement|HTMLInputElement} input\n * @param {string} text\n * @returns {void}\n */\nexport function insertTextAtPosition(input: HTMLTextAreaElement | HTMLInputElement, text: string): void {\n  // Most of the used APIs only work with the field selected\n  input.focus();\n\n  // IE 8-10\n  if ((document as any).selection) {\n    const ieRange = (document as any).selection.createRange();\n    ieRange.text = text;\n\n    // Move cursor after the inserted text\n    ieRange.collapse(false /* to the end */);\n    ieRange.select();\n\n    return;\n  }\n\n  // Webkit + Edge\n  const isSuccess = document.execCommand && document.execCommand('insertText', false, text);\n  if (!isSuccess) {\n    const start = input.selectionStart!;\n    const end = input.selectionEnd!;\n    // Firefox (non-standard method)\n    if (typeof input.setRangeText === 'function') {\n      input.setRangeText(text);\n    } else {\n      // To make a change we just need a Range, not a Selection\n      const range = document.createRange();\n      const textNode = document.createTextNode(text);\n\n      if (canManipulateViaTextNodes(input)) {\n        let node = input.firstChild;\n\n        // If textarea is empty, just insert the text\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          let offset = 0;\n          let startNode = null;\n          let endNode = null;\n\n          while (node && (startNode === null || endNode === null)) {\n            const nodeLength = node.nodeValue!.length;\n\n            // if start of the selection falls into current node\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart((startNode = node), start - offset);\n            }\n\n            // if end of the selection falls into current node\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd((endNode = node), end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          }\n\n          // If there is some text selected, remove it as we should replace it\n          if (start !== end) {\n            range.deleteContents();\n          }\n        }\n      }\n\n      // If the node is a textarea and the range doesn't span outside the element\n      //\n      // Get the commonAncestorContainer of the selected range and test its type\n      // If the node is of type `#text` it means that we're still working with text nodes within our textarea element\n      // otherwise, if it's of type `#document` for example it means our selection spans outside the textarea.\n      if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === '#text') {\n        // Finally insert a new node. The browser will automatically split start and end nodes into two if necessary\n        range.insertNode(textNode);\n      } else {\n        // If the node is not a textarea or the range spans outside a textarea the only way is to replace the whole value\n        const value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    }\n\n    // Correct the cursor position to be at the end of the insertion\n    input.setSelectionRange(start + text.length, start + text.length);\n\n    // Notify any possible listeners of the change\n    const e = document.createEvent('UIEvent');\n    e.initEvent('input', true, false);\n    input.dispatchEvent(e);\n  }\n}\n","import { TextRange } from '../commands';\n\nexport interface TextSection {\n  text: string;\n  selection: TextRange;\n}\n\nexport function selectWord({ text, selection }: TextSection): TextRange {\n  if (text && text.length && selection.start === selection.end) {\n    // the user is pointing to a word\n    return getSurroundingWord(text, selection.start);\n  }\n  return selection;\n}\n\n/**\n *  Gets the number of line-breaks that would have to be inserted before the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the previous text\n */\nexport function getBreaksNeededForEmptyLineBefore(text = '', startPosition: number): number {\n  if (startPosition === 0) return 0;\n\n  // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  let neededBreaks = 2;\n  let isInFirstLine = true;\n  for (let i = startPosition - 1; i >= 0 && neededBreaks >= 0; i--) {\n    switch (text.charCodeAt(i)) {\n      case 32: // blank space\n        continue;\n      case 10: // line break\n        neededBreaks--;\n        isInFirstLine = false;\n        break;\n      default:\n        return neededBreaks;\n    }\n  }\n  return isInFirstLine ? 0 : neededBreaks;\n}\n\n/**\n *  Gets the number of line-breaks that would have to be inserted after the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the next text\n */\nexport function getBreaksNeededForEmptyLineAfter(text = '', startPosition: number): number {\n  if (startPosition === text.length - 1) return 0;\n\n  // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  let neededBreaks = 2;\n  let isInLastLine = true;\n  for (let i = startPosition; i < text.length && neededBreaks >= 0; i++) {\n    switch (text.charCodeAt(i)) {\n      case 32:\n        continue;\n      case 10: {\n        neededBreaks--;\n        isInLastLine = false;\n        break;\n      }\n      default:\n        return neededBreaks;\n    }\n  }\n  return isInLastLine ? 0 : neededBreaks;\n}\n\nexport function getSurroundingWord(text: string, position: number): TextRange {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  const isWordDelimiter = (c: string) => c === ' ' || c.charCodeAt(0) === 10;\n\n  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n  let start = 0;\n  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n  let end = text.length;\n\n  // iterate to the left\n  for (let i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  }\n\n  // iterate to the right\n  for (let i = position; i < text.length; i++) {\n    if (isWordDelimiter(text[i])) {\n      end = i;\n      break;\n    }\n  }\n\n  return { start, end };\n}\n","import React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const bold: ICommand = {\n  name: 'bold',\n  keyCommand: 'bold',\n  shortcuts: 'ctrlcmd+b',\n  value: '**',\n  buttonProps: { 'aria-label': 'Add bold text (ctrl + b)', title: 'Add bold text (ctrl + b)' },\n  icon: (\n    <svg role=\"img\" width=\"12\" height=\"12\" viewBox=\"0 0 384 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M304.793 243.891c33.639-18.537 53.657-54.16 53.657-95.693 0-48.236-26.25-87.626-68.626-104.179C265.138 34.01 240.849 32 209.661 32H24c-8.837 0-16 7.163-16 16v33.049c0 8.837 7.163 16 16 16h33.113v318.53H24c-8.837 0-16 7.163-16 16V464c0 8.837 7.163 16 16 16h195.69c24.203 0 44.834-1.289 66.866-7.584C337.52 457.193 376 410.647 376 350.014c0-52.168-26.573-91.684-71.207-106.123zM142.217 100.809h67.444c16.294 0 27.536 2.019 37.525 6.717 15.828 8.479 24.906 26.502 24.906 49.446 0 35.029-20.32 56.79-53.029 56.79h-76.846V100.809zm112.642 305.475c-10.14 4.056-22.677 4.907-31.409 4.907h-81.233V281.943h84.367c39.645 0 63.057 25.38 63.057 63.057.001 28.425-13.66 52.483-34.782 61.284z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    const state2 = api.replaceSelection(`**${state1.selectedText}**`);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start: state2.selection.end - 2 - state1.selectedText?.length,\n      end: state2.selection.end - 2,\n    });\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport {\n  selectWord,\n  getBreaksNeededForEmptyLineBefore,\n  getBreaksNeededForEmptyLineAfter,\n} from '../utils/markdownUtils';\n\nexport const code: ICommand = {\n  name: 'code',\n  keyCommand: 'code',\n  shortcuts: 'ctrlcmd+j',\n  value: '``',\n  buttonProps: { 'aria-label': 'Insert code (ctrl + j)', title: 'Insert code (ctrl + j)' },\n  icon: (\n    <svg width=\"14\" height=\"14\" role=\"img\" viewBox=\"0 0 640 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"\n      />\n    </svg>\n  ),\n  execute: (tate: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: tate.text, selection: tate.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // when there's no breaking line\n    if (state1.selectedText.indexOf('\\n') === -1) {\n      api.replaceSelection(`\\`${state1.selectedText}\\``);\n      // Adjust the selection to not contain the **\n\n      const selectionStart = state1.selection.start + 1;\n      const selectionEnd = selectionStart + state1.selectedText.length;\n\n      api.setSelectionRange({\n        start: selectionStart,\n        end: selectionEnd,\n      });\n      return;\n    }\n\n    const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    const breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n\n    const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    const breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n    api.replaceSelection(`${breaksBefore}\\`\\`\\`\\n${state1.selectedText}\\n\\`\\`\\`${breaksAfter}`);\n\n    const selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    const selectionEnd = selectionStart + state1.selectedText.length;\n\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd,\n    });\n  },\n};\n\nexport const codeBlock: ICommand = {\n  name: 'codeBlock',\n  keyCommand: 'codeBlock',\n  shortcuts: 'ctrlcmd+shift+j',\n  value: '```\\n```',\n  icon: (\n    <svg width=\"13\" height=\"13\" role=\"img\" viewBox=\"0 0 156 156\">\n      <path\n        fill=\"currentColor\"\n        d=\"M110.85 120.575 43.7 120.483333 43.7083334 110.091667 110.85 110.191667 110.841667 120.583333 110.85 120.575ZM85.1333334 87.1916666 43.625 86.7083332 43.7083334 76.3166666 85.2083334 76.7916666 85.1333334 87.1916666 85.1333334 87.1916666ZM110.841667 53.4166666 43.7 53.3166666 43.7083334 42.925 110.85 43.025 110.841667 53.4166666ZM36 138C27.2916666 138 20.75 136.216667 16.4 132.666667 12.1333334 129.2 10 124.308333 10 118L10 95.3333332C10 91.0666666 9.25 88.1333332 7.7333334 86.5333332 6.3166668 84.8416666 3.7333334 84 0 84L0 72C3.7333334 72 6.3083334 71.2 7.7333334 69.6 9.2416668 67.9083334 10 64.9333334 10 60.6666666L10 38C10 31.775 12.1333334 26.8833334 16.4 23.3333332 20.7583334 19.7749998 27.2916666 18 36 18L40.6666668 18 40.6666668 30 36 30C34.0212222 29.9719277 32.1263151 30.7979128 30.8 32.2666666 29.3605875 33.8216362 28.5938182 35.8823287 28.6666668 38L28.6666668 60.6666666C28.6666668 67.5083332 26.6666668 72.4 22.6666668 75.3333332 20.9317416 76.7274684 18.8640675 77.6464347 16.6666668 78 18.8916668 78.35 20.8916668 79.2416666 22.6666668 80.6666666 26.6666668 83.95 28.6666668 88.8416666 28.6666668 95.3333332L28.6666668 118C28.6666668 120.308333 29.3750002 122.216667 30.8 123.733333 32.2166666 125.241667 33.9583334 126 36 126L40.6666668 126 40.6666668 138 36 138 36 138ZM114.116667 126 118.783333 126C120.833333 126 122.566667 125.241667 123.983333 123.733333 125.422746 122.178364 126.189515 120.117671 126.116667 118L126.116667 95.3333332C126.116667 88.8333332 128.116667 83.9499998 132.116667 80.6666666 133.9 79.2416666 135.9 78.35 138.116667 78 135.919156 77.6468047 133.851391 76.7277979 132.116667 75.3333332 128.116667 72.3999998 126.116667 67.5 126.116667 60.6666666L126.116667 38C126.189515 35.8823287 125.422746 33.8216361 123.983333 32.2666666 122.657018 30.7979128 120.762111 29.9719277 118.783333 30L114.116667 30 114.116667 18 118.783333 18C127.5 18 133.983333 19.775 138.25 23.3333332 142.608333 26.8833332 144.783333 31.7749998 144.783333 38L144.783333 60.6666666C144.783333 64.9333332 145.5 67.9083332 146.916667 69.6 148.433333 71.2 151.05 72 154.783333 72L154.783333 84C151.05 84 148.433333 84.8333334 146.916667 86.5333332 145.5 88.1333332 144.783333 91.0666666 144.783333 95.3333332L144.783333 118C144.783333 124.308333 142.616667 129.2 138.25 132.666667 133.983333 136.216667 127.5 138 118.783333 138L114.116667 138 114.116667 126 114.116667 126Z\"\n      />\n    </svg>\n  ),\n  buttonProps: { 'aria-label': 'Insert Code Block (ctrl + shift + j)', title: 'Insert Code Block (ctrl + shift +j)' },\n  execute: (tate: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: tate.text, selection: tate.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n\n    const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    const breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n\n    const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    const breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n    api.replaceSelection(`${breaksBefore}\\`\\`\\`\\n${state1.selectedText}\\n\\`\\`\\`${breaksAfter}`);\n\n    const selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    const selectionEnd = selectionStart + state1.selectedText.length;\n\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd,\n    });\n  },\n};\n","import { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const comment: ICommand = {\n  name: 'comment',\n  keyCommand: 'comment',\n  shortcuts: 'ctrlcmd+/',\n  value: '<!-- -->',\n  buttonProps: { 'aria-label': 'Insert comment (ctrl + /)', title: 'Insert comment (ctrl + /)' },\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    const state2 = api.replaceSelection(`<!-- ${state1.selectedText} -->`);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start: state2.selection.end - 4 - state1.selectedText.length,\n      end: state2.selection.end - 4,\n    });\n  },\n  icon: (\n    <svg height=\"1em\" width=\"1em\" viewBox=\"0 0 25 25\">\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <polygon points=\".769 .727 24.981 .727 24.981 24.727 .769 24.727\" />\n        <path\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"3\"\n          d=\"M12.625,23.8787879 L8.125,19.6969697 L5.125,19.6969697 C2.63971863,19.6969697 0.625,17.8247059 0.625,15.5151515 L0.625,7.15151515 C0.625,4.84196074 2.63971863,2.96969697 5.125,2.96969697 L20.125,2.96969697 C22.6102814,2.96969697 24.625,4.84196074 24.625,7.15151515 L24.625,15.5151515 C24.625,17.8247059 22.6102814,19.6969697 20.125,19.6969697 L17.125,19.6969697 L12.625,23.8787879\"\n        />\n        <path\n          stroke=\"currentColor\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"3\"\n          d=\"M10.625,8.54545455 L7.25,11.3333333 L10.625,14.1212121 M15.6875,8.54545455 L19.0625,11.3333333 L15.6875,14.1212121\"\n        />\n      </g>\n    </svg>\n  ),\n};\n","import { ICommand } from './';\n\nexport const divider: ICommand = {\n  keyCommand: 'divider',\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { ContextStore, ExecuteCommandState } from '../Context';\n\nexport const fullscreen: ICommand = {\n  name: 'fullscreen',\n  keyCommand: 'fullscreen',\n  shortcuts: 'ctrlcmd+0',\n  value: 'fullscreen',\n  buttonProps: { 'aria-label': 'Toggle fullscreen (ctrl + 0)', title: 'Toggle fullscreen (ctrl+ 0)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <path\n        fill=\"currentColor\"\n        d=\"M118 171.133334L118 342.200271C118 353.766938 126.675 365.333605 141.133333 365.333605L382.634614 365.333605C394.201281 365.333605 405.767948 356.658605 405.767948 342.200271L405.767948 171.133334C405.767948 159.566667 397.092948 148 382.634614 148L141.133333 148C126.674999 148 117.999999 156.675 118 171.133334zM465.353591 413.444444L370 413.444444 370 471.222222 474.0221 471.222222C500.027624 471.222222 520.254143 451 520.254143 425L520.254143 321 462.464089 321 462.464089 413.444444 465.353591 413.444444zM471.0221 43L367 43 367 100.777778 462.353591 100.777778 462.353591 196.111111 520.143647 196.111111 520.143647 89.2222219C517.254144 63.2222219 497.027624 43 471.0221 43zM57.7900547 100.777778L153.143646 100.777778 153.143646 43 46.2320439 43C20.2265191 43 0 63.2222219 0 89.2222219L0 193.222222 57.7900547 193.222222 57.7900547 100.777778zM57.7900547 321L0 321 0 425C0 451 20.2265191 471.222222 46.2320439 471.222223L150.254143 471.222223 150.254143 413.444445 57.7900547 413.444445 57.7900547 321z\"\n      />\n    </svg>\n  ),\n  execute: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n    shortcuts?: string[],\n  ) => {\n    api.textArea.focus();\n    if (shortcuts && dispatch && executeCommandState) {\n      dispatch({ fullscreen: !executeCommandState.fullscreen });\n    }\n  },\n};\n","import React from 'react';\nimport { ICommand, ICommandChildCommands, ICommandChildHandle } from './';\n\nexport type GroupOptions = Omit<ICommand<string>, 'children'> & {\n  children?: ICommandChildHandle['children'];\n};\n\nexport const group = (arr: ICommandChildCommands['children'], options?: GroupOptions): ICommand<string> => {\n  let data = {\n    children: arr as any,\n    icon: (\n      <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n        <path\n          fill=\"currentColor\"\n          d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\"\n        />\n      </svg>\n    ),\n    execute: () => {},\n    ...options,\n    keyCommand: 'group',\n  };\n  if (Array.isArray(data.children)) {\n    data.children = data.children.map(({ ...item }: ICommand) => {\n      item.parent = data;\n      return { ...item };\n    });\n  }\n  return data;\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const hr: ICommand = {\n  name: 'hr',\n  keyCommand: 'hr',\n  shortcuts: 'ctrlcmd+h',\n  value: '----------',\n  buttonProps: { 'aria-label': 'Insert HR (ctrl + h)', title: 'Insert HR (ctrl + h)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 175 175\">\n      <path\n        fill=\"currentColor\"\n        d=\"M0,129 L175,129 L175,154 L0,154 L0,129 Z M3,9 L28.2158203,9 L28.2158203,47.9824219 L55.7695313,47.9824219 L55.7695313,9 L81.0966797,9 L81.0966797,107.185547 L55.7695313,107.185547 L55.7695313,68.0214844 L28.2158203,68.0214844 L28.2158203,107.185547 L3,107.185547 L3,9 Z M93.1855469,100.603516 L93.1855469,19 L135.211914,19 C143.004922,19 148.960917,19.6679621 153.080078,21.0039063 C157.199239,22.3398504 160.520495,24.8168764 163.043945,28.4350586 C165.567395,32.0532407 166.829102,36.459935 166.829102,41.6552734 C166.829102,46.1826398 165.864267,50.0883625 163.93457,53.3725586 C162.004873,56.6567547 159.351579,59.3193257 155.974609,61.3603516 C153.822255,62.6591862 150.872089,63.7353473 147.124023,64.5888672 C150.129898,65.5908253 152.319329,66.5927684 153.692383,67.5947266 C154.620122,68.2626987 155.965323,69.6913953 157.728027,71.8808594 C159.490731,74.0703234 160.668942,75.7587831 161.262695,76.9462891 L173,100.603516 L144.953125,100.603516 L131.482422,75.6660156 C129.775382,72.4374839 128.253913,70.3408251 126.917969,69.3759766 C125.0996,68.1142515 123.040051,67.4833984 120.739258,67.4833984 L118.512695,67.4833984 L118.512695,100.603516 L93.1855469,100.603516 Z M118.512695,52.0644531 L129.144531,52.0644531 C130.294928,52.0644531 132.521468,51.6933631 135.824219,50.9511719 C137.494149,50.6171858 138.857905,49.7636787 139.915527,48.390625 C140.97315,47.0175713 141.501953,45.4404386 141.501953,43.6591797 C141.501953,41.0244009 140.667001,39.0019602 138.99707,37.5917969 C137.32714,36.1816336 134.191429,35.4765625 129.589844,35.4765625 L117.512695,35.4765625 L118.512695,52.0644531 Z\"\n        transform=\"translate(0 9)\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    api.replaceSelection(`${state.selectedText}\\n\\n----------\\n\\n`);\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const image: ICommand = {\n  name: 'image',\n  keyCommand: 'image',\n  shortcuts: 'ctrlcmd+k',\n  value: '![image]()',\n  buttonProps: { 'aria-label': 'Add image (ctrl + k)', title: 'Add image (ctrl + k)' },\n  icon: (\n    <svg width=\"13\" height=\"13\" viewBox=\"0 0 20 20\">\n      <path\n        fill=\"currentColor\"\n        d=\"M15 9c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4-7H1c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 13l-6-5-2 2-4-5-4 8V4h16v11z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Select everything\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the image\n    const imageTemplate = state1.selectedText || 'https://example.com/your-image.png';\n    api.replaceSelection(`![](${imageTemplate})`);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start: 4 + state1.selection.start,\n      end: 4 + state1.selection.start + imageTemplate.length,\n    });\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const italic: ICommand = {\n  name: 'italic',\n  keyCommand: 'italic',\n  shortcuts: 'ctrlcmd+i',\n  value: '* *',\n  buttonProps: { 'aria-label': 'Add italic text (ctrl + i)', title: 'Add italic text (ctrl + i)' },\n  icon: (\n    <svg data-name=\"italic\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 320 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the italic mark up\n    const state2 = api.replaceSelection(`*${state1.selectedText}*`);\n    // Adjust the selection to not contain the *\n    api.setSelectionRange({\n      start: state2.selection.end - 1 - state1.selectedText.length,\n      end: state2.selection.end - 1,\n    });\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const link: ICommand = {\n  name: 'link',\n  keyCommand: 'link',\n  shortcuts: 'ctrlcmd+l',\n  value: '[](url)',\n  buttonProps: { 'aria-label': 'Add a link (ctrl + l)', title: 'Add a link (ctrl + l)' },\n  icon: (\n    <svg data-name=\"italic\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 520 520\">\n      <path\n        fill=\"currentColor\"\n        d=\"M331.751196,182.121107 C392.438214,241.974735 391.605313,337.935283 332.11686,396.871226 C332.005129,396.991316 331.873084,397.121413 331.751196,397.241503 L263.493918,464.491645 C203.291404,523.80587 105.345257,523.797864 45.151885,464.491645 C-15.0506283,405.187427 -15.0506283,308.675467 45.151885,249.371249 L82.8416853,212.237562 C92.836501,202.39022 110.049118,208.9351 110.56511,222.851476 C111.223305,240.5867 114.451306,258.404985 120.407566,275.611815 C122.424812,281.438159 120.983487,287.882964 116.565047,292.23621 L103.272145,305.332975 C74.8052033,333.379887 73.9123737,379.047937 102.098973,407.369054 C130.563883,435.969378 177.350591,436.139505 206.033884,407.879434 L274.291163,340.6393 C302.9257,312.427264 302.805844,266.827265 274.291163,238.733318 C270.531934,235.036561 266.74528,232.16442 263.787465,230.157924 C259.544542,227.2873 256.928256,222.609848 256.731165,217.542518 C256.328935,206.967633 260.13184,196.070508 268.613213,187.714278 L289.998463,166.643567 C295.606326,161.118448 304.403592,160.439942 310.906317,164.911276 C318.353355,170.034591 325.328531,175.793397 331.751196,182.121107 Z M240.704978,55.4828366 L172.447607,122.733236 C172.325719,122.853326 172.193674,122.983423 172.081943,123.103513 C117.703294,179.334654 129.953294,261.569283 185.365841,328.828764 C191.044403,335.721376 198.762988,340.914712 206.209732,346.037661 C212.712465,350.509012 221.510759,349.829503 227.117615,344.305363 L248.502893,323.234572 C256.984277,314.87831 260.787188,303.981143 260.384957,293.406218 C260.187865,288.338869 257.571576,283.661398 253.328648,280.790763 C250.370829,278.78426 246.58417,275.912107 242.824936,272.215337 C214.310216,244.121282 206.209732,204.825874 229.906702,179.334654 L298.164073,112.094263 C326.847404,83.8340838 373.633159,84.0042113 402.099123,112.604645 C430.285761,140.92587 429.393946,186.594095 400.92595,214.641114 L387.63303,227.737929 C383.214584,232.091191 381.773257,238.536021 383.790506,244.362388 C389.746774,261.569283 392.974779,279.387637 393.632975,297.122928 C394.149984,311.039357 411.361608,317.584262 421.356437,307.736882 L459.046288,270.603053 C519.249898,211.29961 519.249898,114.787281 459.047304,55.4828366 C398.853851,-3.82360914 300.907572,-3.83161514 240.704978,55.4828366 Z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    const state2 = api.replaceSelection(`[${state1.selectedText}](url)`);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start: state2.selection.end - 6 - state1.selectedText.length,\n      end: state2.selection.end - 6,\n    });\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport {\n  selectWord,\n  getBreaksNeededForEmptyLineBefore,\n  getBreaksNeededForEmptyLineAfter,\n} from '../utils/markdownUtils';\n\nexport type AlterLineFunction = (line: string, index: number) => string;\n\n/**\n * Inserts insertionString before each line\n */\nexport function insertBeforeEachLine(\n  selectedText: string,\n  insertBefore: string | AlterLineFunction,\n): { modifiedText: string; insertionLength: number } {\n  const lines = selectedText.split(/\\n/);\n\n  let insertionLength = 0;\n  const modifiedText = lines\n    .map((item, index) => {\n      if (typeof insertBefore === 'string') {\n        insertionLength += insertBefore.length;\n        return insertBefore + item;\n      } else if (typeof insertBefore === 'function') {\n        const insertionResult = insertBefore(item, index);\n        insertionLength += insertionResult.length;\n        return insertBefore(item, index) + item;\n      }\n      throw Error('insertion is expected to be either a string or a function');\n    })\n    .join('\\n');\n\n  return { modifiedText, insertionLength };\n}\n\nexport const makeList = (state: TextState, api: TextAreaTextApi, insertBefore: string | AlterLineFunction) => {\n  // Adjust the selection to encompass the whole word if the caret is inside one\n  const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n  const state1 = api.setSelectionRange(newSelectionRange);\n\n  const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n  const breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n\n  const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n  const breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n  const modifiedText = insertBeforeEachLine(state1.selectedText, insertBefore);\n\n  api.replaceSelection(`${breaksBefore}${modifiedText.modifiedText}${breaksAfter}`);\n\n  // Specifically when the text has only one line, we can exclude the \"- \", for example, from the selection\n  const oneLinerOffset = state1.selectedText.indexOf('\\n') === -1 ? modifiedText.insertionLength : 0;\n\n  const selectionStart = state1.selection.start + breaksBeforeCount + oneLinerOffset;\n  const selectionEnd = selectionStart + modifiedText.modifiedText.length - oneLinerOffset;\n\n  // Adjust the selection to not contain the **\n  api.setSelectionRange({\n    start: selectionStart,\n    end: selectionEnd,\n  });\n};\n\nexport const unorderedListCommand: ICommand = {\n  name: 'unordered-list',\n  keyCommand: 'list',\n  shortcuts: 'ctrl+shift+u',\n  value: '- ',\n  buttonProps: {\n    'aria-label': 'Add unordered list (ctrl + shift + u)',\n    title: 'Add unordered list (ctrl + shift + u)',\n  },\n  icon: (\n    <svg data-name=\"unordered-list\" width=\"12\" height=\"12\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M96 96c0 26.51-21.49 48-48 48S0 122.51 0 96s21.49-48 48-48 48 21.49 48 48zM48 208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm0 160c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm96-236h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    makeList(state, api, '- ');\n  },\n};\n\nexport const orderedListCommand: ICommand = {\n  name: 'ordered-list',\n  keyCommand: 'list',\n  shortcuts: 'ctrl+shift+o',\n  value: '1. ',\n  buttonProps: { 'aria-label': 'Add ordered list (ctrl + shift + o)', title: 'Add ordered list (ctrl + shift + o)' },\n  icon: (\n    <svg data-name=\"ordered-list\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M3.263 139.527c0-7.477 3.917-11.572 11.573-11.572h15.131V88.078c0-5.163.534-10.503.534-10.503h-.356s-1.779 2.67-2.848 3.738c-4.451 4.273-10.504 4.451-15.666-1.068l-5.518-6.231c-5.342-5.341-4.984-11.216.534-16.379l21.72-19.938C32.815 33.602 36.732 32 42.785 32H54.89c7.656 0 11.749 3.916 11.749 11.572v84.384h15.488c7.655 0 11.572 4.094 11.572 11.572v8.901c0 7.477-3.917 11.572-11.572 11.572H14.836c-7.656 0-11.573-4.095-11.573-11.572v-8.902zM2.211 304.591c0-47.278 50.955-56.383 50.955-69.165 0-7.18-5.954-8.755-9.28-8.755-3.153 0-6.479 1.051-9.455 3.852-5.079 4.903-10.507 7.004-16.111 2.451l-8.579-6.829c-5.779-4.553-7.18-9.805-2.803-15.409C13.592 201.981 26.025 192 47.387 192c19.437 0 44.476 10.506 44.476 39.573 0 38.347-46.753 46.402-48.679 56.909h39.049c7.529 0 11.557 4.027 11.557 11.382v8.755c0 7.354-4.028 11.382-11.557 11.382h-67.94c-7.005 0-12.083-4.028-12.083-11.382v-4.028zM5.654 454.61l5.603-9.28c3.853-6.654 9.105-7.004 15.584-3.152 4.903 2.101 9.63 3.152 14.359 3.152 10.155 0 14.358-3.502 14.358-8.23 0-6.654-5.604-9.106-15.934-9.106h-4.728c-5.954 0-9.28-2.101-12.258-7.88l-1.05-1.926c-2.451-4.728-1.226-9.806 2.801-14.884l5.604-7.004c6.829-8.405 12.257-13.483 12.257-13.483v-.35s-4.203 1.051-12.608 1.051H16.685c-7.53 0-11.383-4.028-11.383-11.382v-8.755c0-7.53 3.853-11.382 11.383-11.382h58.484c7.529 0 11.382 4.027 11.382 11.382v3.327c0 5.778-1.401 9.806-5.079 14.183l-17.509 20.137c19.611 5.078 28.716 20.487 28.716 34.845 0 21.363-14.358 44.126-48.503 44.126-16.636 0-28.192-4.728-35.896-9.455-5.779-4.202-6.304-9.805-2.626-15.934zM144 132h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    makeList(state, api, (item, index) => `${index + 1}. `);\n  },\n};\n\nexport const checkedListCommand: ICommand = {\n  name: 'checked-list',\n  keyCommand: 'list',\n  shortcuts: 'ctrl+shift+c',\n  value: '- [x] ',\n  buttonProps: { 'aria-label': 'Add checked list (ctrl + shift + c)', title: 'Add checked list (ctrl + shift + c)' },\n  icon: (\n    <svg data-name=\"checked-list\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M208 132h288c8.8 0 16-7.2 16-16V76c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zM64 368c-26.5 0-48.6 21.5-48.6 48s22.1 48 48.6 48 48-21.5 48-48-21.5-48-48-48zm92.5-299l-72.2 72.2-15.6 15.6c-4.7 4.7-12.9 4.7-17.6 0L3.5 109.4c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.3c4.7-4.7 12.3-4.7 17 0l17 16.5c4.6 4.7 4.6 12.3-.1 17zm0 159.6l-72.2 72.2-15.7 15.7c-4.7 4.7-12.9 4.7-17.6 0L3.5 269c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.7c4.7-4.7 12.3-4.7 17 0l17 17c4.6 4.6 4.6 12.2-.1 16.9z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    makeList(state, api, (item, index) => `- [ ] `);\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { ContextStore, ExecuteCommandState } from '../Context';\n\nexport const codePreview: ICommand = {\n  name: 'preview',\n  keyCommand: 'preview',\n  value: 'preview',\n  shortcuts: 'ctrlcmd+9',\n  buttonProps: { 'aria-label': 'Preview code (ctrl + 9)', title: 'Preview code (ctrl + 9)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <polygon\n        fill=\"currentColor\"\n        points=\"0 71.293 0 122 38.023 123 38.023 398 0 397 0 449.707 91.023 450.413 91.023 72.293\"\n      />\n      <polygon\n        fill=\"currentColor\"\n        points=\"148.023 72.293 520 71.293 520 122 200.023 124 200.023 397 520 396 520 449.707 148.023 450.413\"\n      />\n    </svg>\n  ),\n  execute: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n    shortcuts?: string[],\n  ) => {\n    api.textArea.focus();\n    if (shortcuts && dispatch && executeCommandState) {\n      dispatch({ preview: 'preview' });\n    }\n  },\n};\n\nexport const codeEdit: ICommand = {\n  name: 'edit',\n  keyCommand: 'preview',\n  value: 'edit',\n  shortcuts: 'ctrlcmd+7',\n  buttonProps: { 'aria-label': 'Edit code (ctrl + 7)', title: 'Edit code (ctrl + 7)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <polygon fill=\"currentColor\" points=\"0 71.293 0 122 319 122 319 397 0 397 0 449.707 372 449.413 372 71.293\" />\n      <polygon\n        fill=\"currentColor\"\n        points=\"429 71.293 520 71.293 520 122 481 123 481 396 520 396 520 449.707 429 449.413\"\n      />\n    </svg>\n  ),\n  execute: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n    shortcuts?: string[],\n  ) => {\n    api.textArea.focus();\n    if (shortcuts && dispatch && executeCommandState) {\n      dispatch({ preview: 'edit' });\n    }\n  },\n};\n\nexport const codeLive: ICommand = {\n  name: 'live',\n  keyCommand: 'preview',\n  value: 'live',\n  shortcuts: 'ctrlcmd+8',\n  buttonProps: { 'aria-label': 'Live code (ctrl + 8)', title: 'Live code (ctrl + 8)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <polygon fill=\"currentColor\" points=\"0 71.293 0 122 179 122 179 397 0 397 0 449.707 232 449.413 232 71.293\" />\n      <polygon\n        fill=\"currentColor\"\n        points=\"289 71.293 520 71.293 520 122 341 123 341 396 520 396 520 449.707 289 449.413\"\n      />\n    </svg>\n  ),\n  execute: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n    shortcuts?: string[],\n  ) => {\n    api.textArea.focus();\n    if (shortcuts && dispatch && executeCommandState) {\n      dispatch({ preview: 'live' });\n    }\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport {\n  getBreaksNeededForEmptyLineBefore,\n  getBreaksNeededForEmptyLineAfter,\n  selectWord,\n} from '../utils/markdownUtils';\n\nexport const quote: ICommand = {\n  name: 'quote',\n  keyCommand: 'quote',\n  shortcuts: 'ctrlcmd+q',\n  buttonProps: { 'aria-label': 'Insert a quote (ctrl + q)', title: 'Insert a quote (ctrl + q)' },\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <path\n        fill=\"currentColor\"\n        d=\"M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    const breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n\n    const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    const breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n    // Replaces the current selection with the quote mark up\n    api.replaceSelection(`${breaksBefore}> ${state1.selectedText}${breaksAfter}`);\n\n    const selectionStart = state1.selection.start + breaksBeforeCount + 2;\n    const selectionEnd = selectionStart + state1.selectedText.length;\n\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd,\n    });\n  },\n};\n","import * as React from 'react';\nimport { ICommand, TextState, TextAreaTextApi } from './';\nimport { selectWord } from '../utils/markdownUtils';\n\nexport const strikethrough: ICommand = {\n  name: 'strikethrough',\n  keyCommand: 'strikethrough',\n  shortcuts: 'ctrl+shift+x',\n  buttonProps: {\n    'aria-label': 'Add strikethrough text (ctrl + shift + x)',\n    title: 'Add strikethrough text (ctrl + shift + x)',\n  },\n  value: '~~',\n  icon: (\n    <svg data-name=\"strikethrough\" width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M496 288H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h480c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16zm-214.666 16c27.258 12.937 46.524 28.683 46.524 56.243 0 33.108-28.977 53.676-75.621 53.676-32.325 0-76.874-12.08-76.874-44.271V368c0-8.837-7.164-16-16-16H113.75c-8.836 0-16 7.163-16 16v19.204c0 66.845 77.717 101.82 154.487 101.82 88.578 0 162.013-45.438 162.013-134.424 0-19.815-3.618-36.417-10.143-50.6H281.334zm-30.952-96c-32.422-13.505-56.836-28.946-56.836-59.683 0-33.92 30.901-47.406 64.962-47.406 42.647 0 64.962 16.593 64.962 32.985V136c0 8.837 7.164 16 16 16h45.613c8.836 0 16-7.163 16-16v-30.318c0-52.438-71.725-79.875-142.575-79.875-85.203 0-150.726 40.972-150.726 125.646 0 22.71 4.665 41.176 12.777 56.547h129.823z\"\n      />\n    </svg>\n  ),\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: state.text, selection: state.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the strikethrough mark up\n    const state2 = api.replaceSelection(`~~${state1.selectedText}~~`);\n    // Adjust the selection to not contain the ~~\n    api.setSelectionRange({\n      start: state2.selection.end - 2 - state1.selectedText.length,\n      end: state2.selection.end - 2,\n    });\n  },\n};\n","import React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title1: ICommand = {\n  name: 'title1',\n  keyCommand: 'title1',\n  shortcuts: 'ctrlcmd+1',\n  value: 'title1',\n  buttonProps: { 'aria-label': 'Insert title1 (ctrl + 1)', title: 'Insert title1 (ctrl + 1)' },\n  icon: <div style={{ fontSize: 18, textAlign: 'left' }}>Title 1</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('# ');\n    } else {\n      insertAtLineStart('# ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import * as React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title2: ICommand = {\n  name: 'title2',\n  keyCommand: 'title2',\n  shortcuts: 'ctrlcmd+2',\n  value: 'title2',\n  buttonProps: { 'aria-label': 'Insert title2 (ctrl + 2)', title: 'Insert title2 (ctrl + 2)' },\n  icon: <div style={{ fontSize: 16, textAlign: 'left' }}>Title 2</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('## ');\n    } else {\n      insertAtLineStart('## ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import React from 'react';\nimport { ICommand } from './';\nimport { title1 } from './title1';\n\nexport const title: ICommand = {\n  ...title1,\n  icon: (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 520 520\">\n      <path\n        fill=\"currentColor\"\n        d=\"M15.7083333,468 C7.03242448,468 0,462.030833 0,454.666667 L0,421.333333 C0,413.969167 7.03242448,408 15.7083333,408 L361.291667,408 C369.967576,408 377,413.969167 377,421.333333 L377,454.666667 C377,462.030833 369.967576,468 361.291667,468 L15.7083333,468 Z M21.6666667,366 C9.69989583,366 0,359.831861 0,352.222222 L0,317.777778 C0,310.168139 9.69989583,304 21.6666667,304 L498.333333,304 C510.300104,304 520,310.168139 520,317.777778 L520,352.222222 C520,359.831861 510.300104,366 498.333333,366 L21.6666667,366 Z M136.835938,64 L136.835937,126 L107.25,126 L107.25,251 L40.75,251 L40.75,126 L-5.68434189e-14,126 L-5.68434189e-14,64 L136.835938,64 Z M212,64 L212,251 L161.648438,251 L161.648438,64 L212,64 Z M378,64 L378,126 L343.25,126 L343.25,251 L281.75,251 L281.75,126 L238,126 L238,64 L378,64 Z M449.047619,189.550781 L520,189.550781 L520,251 L405,251 L405,64 L449.047619,64 L449.047619,189.550781 Z\"\n      />\n    </svg>\n  ),\n};\n","import * as React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title3: ICommand = {\n  name: 'title3',\n  keyCommand: 'title3',\n  shortcuts: 'ctrlcmd+3',\n  value: 'title3',\n  buttonProps: { 'aria-label': 'Insert title3 (ctrl + 3)', title: 'Insert title3 (ctrl + 3)' },\n  icon: <div style={{ fontSize: 15, textAlign: 'left' }}>Title 3</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('### ');\n    } else {\n      insertAtLineStart('### ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import * as React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title4: ICommand = {\n  name: 'title4',\n  keyCommand: 'title4',\n  shortcuts: 'ctrlcmd+4',\n  value: 'title4',\n  buttonProps: { 'aria-label': 'Insert title4 (ctrl + 4)', title: 'Insert title4 (ctrl + 4)' },\n  icon: <div style={{ fontSize: 14, textAlign: 'left' }}>Title 4</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('#### ');\n    } else {\n      insertAtLineStart('#### ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import * as React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title5: ICommand = {\n  name: 'title5',\n  keyCommand: 'title5',\n  shortcuts: 'ctrlcmd+5',\n  value: 'title5',\n  buttonProps: { 'aria-label': 'Insert title5 (ctrl + 5)', title: 'Insert title5 (ctrl + 5)' },\n  icon: <div style={{ fontSize: 12, textAlign: 'left' }}>Title 5</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('##### ');\n    } else {\n      insertAtLineStart('##### ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import * as React from 'react';\nimport { insertAtLineStart } from '../utils/InsertTextAtPosition';\nimport { ICommand, TextState, TextAreaTextApi } from './';\n\nexport const title6: ICommand = {\n  name: 'title6',\n  keyCommand: 'title6',\n  shortcuts: 'ctrlcmd+6',\n  value: 'title6',\n  buttonProps: { 'aria-label': 'Insert title6 (ctrl + 6)', title: 'Insert title6 (ctrl + 6)' },\n  icon: <div style={{ fontSize: 12, textAlign: 'left' }}>Title 6</div>,\n  execute: (state: TextState, api: TextAreaTextApi) => {\n    if (state.selection.start === 0 || /\\n$/.test(state.text)) {\n      api.replaceSelection('###### ');\n    } else {\n      insertAtLineStart('###### ', state.selection.start, api.textArea);\n    }\n  },\n};\n","import React from 'react';\nimport { ContextStore, ExecuteCommandState } from '../Context';\nimport { insertTextAtPosition } from '../utils/InsertTextAtPosition';\nimport { bold } from './bold';\nimport { code, codeBlock } from './code';\nimport { comment } from './comment';\nimport { divider } from './divider';\nimport { fullscreen } from './fullscreen';\nimport { group } from './group';\nimport { hr } from './hr';\nimport { image } from './image';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { checkedListCommand, orderedListCommand, unorderedListCommand } from './list';\nimport { codeEdit, codeLive, codePreview } from './preview';\nimport { quote } from './quote';\nimport { strikethrough } from './strikeThrough';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void;\n}\n\nexport interface ICommandChildHandle<T = string> extends ICommandBase<T> {\n  children?: (handle: {\n    close: () => void;\n    execute: () => void;\n    getState?: TextAreaCommandOrchestrator['getState'];\n    textApi?: TextAreaTextApi;\n  }) => React.ReactElement;\n}\n\nexport interface ICommandChildCommands<T = string> extends ICommandBase<T> {\n  children?: Array<ICommand<T>>;\n}\n\nexport interface ICommandBase<T> {\n  parent?: ICommand<any>;\n  keyCommand?: string;\n  name?: string;\n  shortcuts?: string;\n  groupName?: string;\n  icon?: React.ReactElement;\n  value?: T;\n  position?: 'right';\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>;\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null;\n  render?: (\n    command: ICommand<T>,\n    disabled: boolean,\n    executeCommand: (command: ICommand<T>, name?: string) => void,\n    index: number,\n  ) => void | undefined | null | React.ReactElement;\n  execute?: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n    shortcuts?: string[],\n  ) => void;\n}\n\nexport type ICommand<T = string> = ICommandChildCommands<T> | ICommandChildHandle<T>;\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string;\n  selectedText: string;\n  selection: TextRange;\n}\n\nconst getCommands: () => ICommand[] = () => [\n  bold,\n  italic,\n  strikethrough,\n  hr,\n  group([title1, title2, title3, title4, title5, title6], {\n    name: 'title',\n    groupName: 'title',\n    buttonProps: { 'aria-label': 'Insert title', title: 'Insert title' },\n  }),\n  divider,\n  link,\n  quote,\n  code,\n  codeBlock,\n  comment,\n  image,\n  divider,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n];\n\nconst getExtraCommands: () => ICommand[] = () => [codeEdit, codeLive, codePreview, divider, fullscreen];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd,\n    },\n    text: textArea.value,\n    selectedText: textArea.value?.slice(textArea.selectionStart, textArea.selectionEnd),\n  };\n}\n\nclass TextAreaTextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState {\n    insertTextAtPosition(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextAreaTextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  getState() {\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n\n  executeCommand(\n    command: ICommand<string>,\n    dispatch?: React.Dispatch<ContextStore>,\n    state?: ExecuteCommandState,\n    shortcuts?: string[],\n  ): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi, dispatch, state, shortcuts);\n  }\n}\n\nexport {\n  title,\n  title1,\n  title2,\n  title3,\n  title4,\n  title5,\n  title6,\n  bold,\n  codeBlock,\n  comment,\n  italic,\n  strikethrough,\n  hr,\n  group,\n  divider,\n  link,\n  quote,\n  code,\n  image,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n  codeEdit,\n  codeLive,\n  codePreview,\n  fullscreen,\n  // Tool method.\n  getCommands,\n  getExtraCommands,\n  getStateFromTextArea,\n  TextAreaCommandOrchestrator,\n  TextAreaTextApi,\n};\n","import { insertTextAtPosition } from '../../utils/InsertTextAtPosition';\nimport { TextAreaTextApi } from '../../commands';\nimport { insertBeforeEachLine } from '../../commands/list';\n\n/**\n * - `13` - `Enter`\n * - `9` - `Tab`\n */\nfunction stopPropagation(e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexport default function handleKeyDown(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n  tabSize: number = 2,\n  defaultTabEnable: boolean = false,\n) {\n  const target = e.target as HTMLTextAreaElement;\n  const starVal = target.value.substr(0, target.selectionStart);\n  const valArr = starVal.split('\\n');\n  const currentLineStr = valArr[valArr.length - 1];\n  const textArea = new TextAreaTextApi(target);\n\n  /**\n   * `9` - `Tab`\n   */\n  if (!defaultTabEnable && e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    const space = new Array(tabSize + 1).join('  ');\n    if (target.selectionStart !== target.selectionEnd) {\n      const _star = target.value.substring(0, target.selectionStart).split('\\n');\n      const _end = target.value.substring(0, target.selectionEnd).split('\\n');\n      const modifiedTextLine: string[] = [];\n      _end.forEach((item, idx) => {\n        if (item !== _star[idx]) {\n          modifiedTextLine.push(item);\n        }\n      });\n      const modifiedText = modifiedTextLine.join('\\n');\n      const oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);\n      const newStarNum = target.value.substring(0, target.selectionStart).length;\n\n      textArea.setSelectionRange({\n        start: target.value.indexOf(modifiedText),\n        end: target.selectionEnd,\n      });\n\n      const modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);\n\n      let text = modifiedTextObj.modifiedText;\n      if (e.shiftKey) {\n        text = text\n          .split('\\n')\n          .map((item) => item.replace(new RegExp(`^${space}`), ''))\n          .join('\\n');\n      }\n      textArea.replaceSelection(text);\n\n      let startTabSize = e.shiftKey ? -tabSize : tabSize;\n      let endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;\n\n      textArea.setSelectionRange({\n        start: newStarNum + startTabSize,\n        end: newStarNum + oldSelectText.length + endTabSize,\n      });\n    } else {\n      return insertTextAtPosition(target, space);\n    }\n  } else if (\n    e.keyCode === 13 &&\n    e.code.toLowerCase() === 'enter' &&\n    (/^(-|\\*)\\s/.test(currentLineStr) || /^\\d+.\\s/.test(currentLineStr))\n  ) {\n    /**\n     * `13` - `Enter`\n     */\n    stopPropagation(e);\n    let startStr = '\\n- ';\n\n    if (currentLineStr.startsWith('*')) {\n      startStr = '\\n* ';\n    }\n\n    if (currentLineStr.startsWith('- [ ]')) {\n      startStr = '\\n- [ ] ';\n    } else if (currentLineStr.startsWith('- [X]')) {\n      startStr = '\\n- [X] ';\n    }\n\n    if (/^\\d+.\\s/.test(currentLineStr)) {\n      startStr = `\\n${parseInt(currentLineStr) + 1}. `;\n    }\n    return insertTextAtPosition(target, startStr);\n  }\n}\n","import React, { useContext, useEffect } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, ExecuteCommandState } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport './index.less';\n\nexport interface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value'>, IProps {}\n\nexport default function Textarea(props: TextAreaProps) {\n  const { prefixCls, onChange, ...other } = props;\n  const {\n    markdown,\n    commands,\n    fullscreen,\n    preview,\n    highlightEnable,\n    extraCommands,\n    tabSize,\n    defaultTabEnable,\n    dispatch,\n  } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const statesRef = React.useRef<ExecuteCommandState>({ fullscreen, preview });\n\n  useEffect(() => {\n    statesRef.current = { fullscreen, preview, highlightEnable };\n  }, [fullscreen, preview, highlightEnable]);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onKeyDown = (e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) => {\n    handleKeyDown(e, tabSize, defaultTabEnable);\n    shortcuts(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);\n  };\n  useEffect(() => {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n    return () => {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <textarea\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={false}\n      {...other}\n      ref={textRef}\n      className={`${prefixCls}-text-input ${other.className ? other.className : ''}`}\n      value={markdown}\n      onChange={(e) => {\n        dispatch && dispatch({ markdown: e.target.value });\n        onChange && onChange(e);\n      }}\n    />\n  );\n}\n","import React, { useEffect, Fragment, useContext } from 'react';\nimport { EditorContext, ContextStore, ExecuteCommandState } from '../../Context';\nimport shortcuts from './shortcuts';\nimport Markdown from './Markdown';\nimport Textarea, { TextAreaProps } from './Textarea';\nimport { IProps } from '../../Editor';\nimport { TextAreaCommandOrchestrator, ICommand } from '../../commands';\nimport './index.less';\n\ntype RenderTextareaHandle = {\n  dispatch: ContextStore['dispatch'];\n  onChange?: TextAreaProps['onChange'];\n  useContext?: {\n    commands: ContextStore['commands'];\n    extraCommands: ContextStore['extraCommands'];\n    commandOrchestrator?: TextAreaCommandOrchestrator;\n  };\n  shortcuts?: (\n    e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n    commands: ICommand[],\n    commandOrchestrator?: TextAreaCommandOrchestrator,\n    dispatch?: React.Dispatch<ContextStore>,\n    state?: ExecuteCommandState,\n  ) => void;\n};\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onScroll'>,\n    IProps {\n  value?: string;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  renderTextarea?: (\n    props: React.TextareaHTMLAttributes<HTMLTextAreaElement> | React.HTMLAttributes<HTMLDivElement>,\n    opts: RenderTextareaHandle,\n  ) => JSX.Element;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default function TextArea(props: ITextAreaProps) {\n  const { prefixCls, className, onScroll, renderTextarea, ...otherProps } = props || {};\n  const { markdown, scrollTop, commands, highlightEnable, extraCommands, dispatch } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const warp = React.createRef<HTMLDivElement>();\n  useEffect(() => {\n    const state: ContextStore = {};\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n    if (dispatch) {\n      dispatch({ ...state });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const textStyle: React.CSSProperties = highlightEnable ? {} : { WebkitTextFillColor: 'initial', overflow: 'auto' };\n\n  return (\n    <div ref={warp} className={`${prefixCls}-aree ${className || ''}`} onScroll={onScroll}>\n      <div className={`${prefixCls}-text`}>\n        {renderTextarea ? (\n          React.cloneElement(\n            renderTextarea(\n              {\n                ...otherProps,\n                value: markdown,\n                autoComplete: 'off',\n                autoCorrect: 'off',\n                spellCheck: 'false',\n                autoCapitalize: 'off',\n                className: `${prefixCls}-text-input`,\n                style: {\n                  WebkitTextFillColor: 'inherit',\n                  overflow: 'auto',\n                },\n              },\n              {\n                dispatch,\n                onChange: otherProps.onChange,\n                shortcuts,\n                useContext: { commands, extraCommands, commandOrchestrator: executeRef.current },\n              },\n            ),\n            {\n              ref: textRef,\n            },\n          )\n        ) : (\n          <Fragment>\n            {highlightEnable && <Markdown prefixCls={prefixCls} />}\n            <Textarea prefixCls={prefixCls} {...otherProps} style={textStyle} />\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useContext, useMemo } from 'react';\nimport './Child.less';\nimport Toolbar, { IToolbarProps } from './';\nimport { EditorContext } from '../../Context';\n\nexport type ChildProps = IToolbarProps & {\n  children?: JSX.Element;\n  groupName?: string;\n};\n\nexport default function Child(props: ChildProps) {\n  const { prefixCls, groupName, commands, children } = props || {};\n  const { barPopup = {} } = useContext(EditorContext);\n  return useMemo(\n    () => (\n      <div\n        className={`${prefixCls}-toolbar-child ${groupName && barPopup[groupName] ? 'active' : ''}`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {Array.isArray(commands) ? <Toolbar commands={commands} {...props} isChild /> : children}\n      </div>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [commands, barPopup, groupName, prefixCls],\n  );\n}\n","import React, { Fragment, useContext, useEffect, useRef } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, PreviewType, ContextStore } from '../../Context';\nimport { ICommand } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  overflow?: boolean;\n  toolbarBottom?: boolean;\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n  isChild?: boolean;\n}\n\nexport function ToolbarItems(props: IToolbarProps) {\n  const { prefixCls, overflow } = props;\n  const { fullscreen, preview, barPopup = {}, components, commandOrchestrator, dispatch } = useContext(EditorContext);\n  const originalOverflow = useRef('');\n\n  function handleClick(command: ICommand<string>, name?: string) {\n    if (!dispatch) return;\n    const state: ContextStore = { barPopup: { ...barPopup } };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value as PreviewType;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach((item) => {\n        if (name === item.groupName) {\n          state.barPopup![name!] = true;\n        } else if (item.keyCommand) {\n          state.barPopup![item.groupName!] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach((keyName) => {\n        state.barPopup![keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch({ ...state });\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  useEffect(() => {\n    if (document && overflow) {\n      if (fullscreen) {\n        // prevent scroll on fullscreen\n        document.body.style.overflow = 'hidden';\n      } else {\n        // get the original overflow only the first time\n        if (!originalOverflow.current) {\n          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;\n        }\n        // reset to the original overflow\n        document.body.style.overflow = originalOverflow.current;\n      }\n    }\n  }, [fullscreen, originalOverflow, overflow]);\n\n  return (\n    <ul>\n      {(props.commands || []).map((item, idx) => {\n        if (item.keyCommand === 'divider') {\n          return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n        }\n        if (!item.keyCommand) return <Fragment key={idx} />;\n        const activeBtn =\n          (fullscreen && item.keyCommand === 'fullscreen') || (item.keyCommand === 'preview' && preview === item.value);\n        const childNode =\n          item.children && typeof item.children === 'function'\n            ? item.children({\n                getState: () => commandOrchestrator!.getState(),\n                textApi: commandOrchestrator ? commandOrchestrator!.textApi : undefined,\n                close: () => handleClick({}, item.groupName),\n                execute: () => handleClick({ execute: item.execute }),\n              })\n            : undefined;\n        const disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n        const render = components?.toolbar || item.render;\n        const com = (\n          render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null\n        ) as React.ReactElement;\n        return (\n          <li key={idx} {...item.liProps} className={activeBtn ? `active` : ''}>\n            {com && React.isValidElement(com) && com}\n            {!com && !item.buttonProps && item.icon}\n            {!com &&\n              item.buttonProps &&\n              React.createElement(\n                'button',\n                {\n                  type: 'button',\n                  key: idx,\n                  disabled,\n                  'data-name': item.name,\n                  ...item.buttonProps,\n                  onClick: (evn: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                    evn.stopPropagation();\n                    handleClick(item, item.groupName);\n                  },\n                },\n                item.icon,\n              )}\n            {item.children && (\n              <Child\n                overflow={overflow}\n                groupName={item.groupName}\n                prefixCls={prefixCls}\n                children={childNode}\n                commands={Array.isArray(item.children) ? item.children : undefined}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, toolbarBottom, isChild } = props;\n  const { commands, extraCommands } = useContext(EditorContext);\n  const bottomClassName = toolbarBottom ? 'bottom' : '';\n  return (\n    <div className={`${prefixCls}-toolbar ${bottomClassName}`}>\n      <ToolbarItems {...props} commands={props.commands || commands || []} />\n      {!isChild && <ToolbarItems {...props} commands={extraCommands || []} />}\n    </div>\n  );\n}\n","import React, { useEffect, useMemo, useRef } from 'react';\nimport { IProps } from '../../Editor';\nimport './index.less';\n\nexport interface IDragBarProps extends IProps {\n  height: number;\n  maxHeight: number;\n  minHeight: number;\n  onChange: (value: number) => void;\n}\n\nconst DragBar: React.FC<IDragBarProps> = (props) => {\n  const { prefixCls, onChange } = props || {};\n  const $dom = useRef<HTMLDivElement>(null);\n  const dragRef = useRef<{ height: number; dragY: number }>();\n  function handleMouseMove(event: Event) {\n    if (dragRef.current) {\n      const clientY =\n        (event as unknown as MouseEvent).clientY || (event as unknown as TouchEvent).changedTouches[0]?.clientY;\n      const newHeight = dragRef.current.height + clientY - dragRef.current.dragY;\n      if (newHeight >= props.minHeight && newHeight <= props.maxHeight) {\n        onChange && onChange(dragRef.current.height + (clientY - dragRef.current.dragY));\n      }\n    }\n  }\n  function handleMouseUp() {\n    dragRef.current = undefined;\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n    $dom.current?.removeEventListener('touchmove', handleMouseMove);\n    $dom.current?.removeEventListener('touchend', handleMouseUp);\n  }\n  function handleMouseDown(event: Event) {\n    event.preventDefault();\n    const clientY =\n      (event as unknown as MouseEvent).clientY || (event as unknown as TouchEvent).changedTouches[0]?.clientY;\n    dragRef.current = {\n      height: props.height,\n      dragY: clientY,\n    };\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    $dom.current?.addEventListener('touchmove', handleMouseMove, { passive: false });\n    $dom.current?.addEventListener('touchend', handleMouseUp, { passive: false });\n  }\n\n  useEffect(() => {\n    if (document) {\n      $dom.current?.addEventListener('touchstart', handleMouseDown, { passive: false });\n      $dom.current?.addEventListener('mousedown', handleMouseDown);\n    }\n    return () => {\n      if (document) {\n        $dom.current?.removeEventListener('touchstart', handleMouseDown);\n        document.removeEventListener('mousemove', handleMouseMove);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const svg = useMemo(\n    () => (\n      <svg viewBox=\"0 0 512 512\" height=\"100%\">\n        <path\n          fill=\"currentColor\"\n          d=\"M304 256c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm120-48c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm-336 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\"\n        />\n      </svg>\n    ),\n    [],\n  );\n  return (\n    <div className={`${prefixCls}-bar`} ref={$dom}>\n      {svg}\n    </div>\n  );\n};\n\nexport default DragBar;\n","import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle, CSSProperties, PropsWithRef } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps } from '@uiw/react-markdown-preview';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface IProps {\n  prefixCls?: string;\n  className?: string;\n}\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, state?: ContextStore) => void;\n  /**\n   * editor height change listener\n   */\n  onHeightChange?: (value?: CSSProperties['height'], oldValue?: CSSProperties['height'], state?: ContextStore) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   * ⚠️ `Dragbar` is invalid when **`height`** parameter percentage.\n   */\n  height?: number;\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   *\n   * @deprecated toolbar height adaptive: https://github.com/uiwjs/react-md-editor/issues/427\n   *\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visibleDragbar?: boolean;\n  /**\n   * @deprecated use `visibleDragbar`\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Disable `fullscreen` setting body styles\n   */\n  overflow?: boolean;\n  /**\n   * Maximum drag height. `visibleDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visibleDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * Use div to replace TextArea or re-render TextArea\n   * @deprecated Please use ~~`renderTextarea`~~ -> `components`\n   */\n  renderTextarea?: ITextAreaProps['renderTextarea'];\n  /**\n   * re-render element\n   */\n  components?: {\n    /** Use div to replace TextArea or re-render TextArea */\n    textarea?: ITextAreaProps['renderTextarea'];\n    /**\n     * Override the default command element\n     * _`toolbar`_ < _`command[].render`_\n     */\n    toolbar?: ICommand['render'];\n    /** Custom markdown preview */\n    preview?: (source: string, state: ContextStore, dispath: React.Dispatch<ContextStore>) => JSX.Element;\n  };\n  /** Theme configuration */\n  'data-color-mode'?: 'light' | 'dark';\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * If `false`, the `tab` key inserts a tab character into the textarea. If `true`, the `tab` key executes default behavior e.g. focus shifts to next element.\n   */\n  defaultTabEnable?: boolean;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Filter or modify your commands.\n   * https://github.com/uiwjs/react-md-editor/issues/296\n   */\n  commandsFilter?: (command: ICommand, isExtra: boolean) => false | ICommand;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n  /** Toolbar on bottom */\n  toolbarBottom?: boolean;\n  /**\n   * The **`direction`** property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * https://github.com/uiwjs/react-md-editor/issues/462\n   */\n  direction?: CSSProperties['direction'];\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    commandsFilter,\n    direction,\n    extraCommands = getExtraCommands(),\n    height = 200,\n    enableScroll = true,\n    visibleDragbar = typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    overflow = true,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    defaultTabEnable = false,\n    onChange,\n    onHeightChange,\n    hideToolbar,\n    toolbarBottom = false,\n    components,\n    renderTextarea,\n    ...other\n  } = props || {};\n  const cmds = commands\n    .map((item) => (commandsFilter ? commandsFilter(item, false) : item))\n    .filter(Boolean) as ICommand[];\n  const extraCmds = extraCommands\n    .map((item) => (commandsFilter ? commandsFilter(item, true) : item))\n    .filter(Boolean) as ICommand[];\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    components,\n    height,\n    highlightEnable,\n    tabSize,\n    defaultTabEnable,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: cmds,\n    extraCommands: extraCmds,\n    fullscreen,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    'wmde-markdown-var',\n    direction ? `${prefixCls}-${direction}` : null,\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(\n    () => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }),\n    [propsValue, state.markdown],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(\n    () => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [highlightEnable],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(\n    () => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fullscreen],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  useMemo(\n    () => height !== state.height && onHeightChange && onHeightChange(state.height, height, state),\n    [height, onHeightChange, state],\n  );\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>('preview');\n  const initScroll = useRef(false);\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>, type: 'text' | 'preview') => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  const previewClassName = `${prefixCls}-preview ${previewOptions.className || ''}`;\n  const handlePreviewScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => handleScroll(e, 'preview');\n  let mdPreview = useMemo(\n    () => (\n      <div ref={previewRef} className={previewClassName}>\n        <MarkdownPreview {...previewOptions} onScroll={handlePreviewScroll} source={state.markdown || ''} />\n      </div>\n    ),\n    [previewClassName, previewOptions, state.markdown],\n  );\n  const preview = components?.preview && components?.preview(state.markdown || '', state, dispatch);\n  if (preview && React.isValidElement(preview)) {\n    mdPreview = (\n      <div className={previewClassName} ref={previewRef} onScroll={handlePreviewScroll}>\n        {preview}\n      </div>\n    );\n  }\n\n  const containerStyle = { ...other.style, height: state.height || '100%' };\n  const containerClick = () => dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n  const dragBarChange = (newHeight: number) => dispatch({ height: newHeight });\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div ref={container} className={cls} {...other} onClick={containerClick} style={containerStyle}>\n        {!hideToolbar && !toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n        <div className={`${prefixCls}-content`}>\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onChange={(evn) => {\n                onChange && onChange(evn.target.value, evn, state);\n                if (textareaProps && textareaProps.onChange) {\n                  textareaProps.onChange(evn);\n                }\n              }}\n              renderTextarea={components?.textarea || renderTextarea}\n              onScroll={(e) => handleScroll(e, 'text')}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && mdPreview}\n        </div>\n        {visibleDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={dragBarChange}\n          />\n        )}\n        {!hideToolbar && toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\ntype Editor = React.FC<PropsWithRef<MDEditorProps>> & { Markdown: typeof MarkdownPreview };\n\nconst mdEditor: Editor = React.forwardRef(InternalMDEditor) as unknown as Editor;\n\nmdEditor.Markdown = MarkdownPreview;\n\nexport default mdEditor;\n","import MDEditor from './Editor';\nimport * as commands from './commands';\nimport * as MarkdownUtil from './utils/markdownUtils';\n\nexport * from './commands';\nexport * from './utils/markdownUtils';\nexport * from './Editor';\nexport * from './Context';\n\nexport { MarkdownUtil, commands };\n\nexport default MDEditor;\n","export const errors = {\n  abandonedHeadElementChild: {\n    reason: 'Unexpected metadata element after head',\n    description:\n      'Unexpected element after head. Expected the element before `</head>`',\n    url: false\n  },\n  abruptClosingOfEmptyComment: {\n    reason: 'Unexpected abruptly closed empty comment',\n    description: 'Unexpected `>` or `->`. Expected `-->` to close comments'\n  },\n  abruptDoctypePublicIdentifier: {\n    reason: 'Unexpected abruptly closed public identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the public identifier'\n  },\n  abruptDoctypeSystemIdentifier: {\n    reason: 'Unexpected abruptly closed system identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the identifier identifier'\n  },\n  absenceOfDigitsInNumericCharacterReference: {\n    reason: 'Unexpected non-digit at start of numeric character reference',\n    description:\n      'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'\n  },\n  cdataInHtmlContent: {\n    reason: 'Unexpected CDATA section in HTML',\n    description:\n      'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'\n  },\n  characterReferenceOutsideUnicodeRange: {\n    reason: 'Unexpected too big numeric character reference',\n    description:\n      'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'\n  },\n  closingOfElementWithOpenChildElements: {\n    reason: 'Unexpected closing tag with open child elements',\n    description:\n      'Unexpectedly closing tag. Expected other tags to be closed first',\n    url: false\n  },\n  controlCharacterInInputStream: {\n    reason: 'Unexpected control character',\n    description:\n      'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  controlCharacterReference: {\n    reason: 'Unexpected control character reference',\n    description:\n      'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  disallowedContentInNoscriptInHead: {\n    reason: 'Disallowed content inside `<noscript>` in `<head>`',\n    description:\n      'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',\n    url: false\n  },\n  duplicateAttribute: {\n    reason: 'Unexpected duplicate attribute',\n    description:\n      'Unexpectedly double attribute. Expected attributes to occur only once'\n  },\n  endTagWithAttributes: {\n    reason: 'Unexpected attribute on closing tag',\n    description: 'Unexpected attribute. Expected `>` instead'\n  },\n  endTagWithTrailingSolidus: {\n    reason: 'Unexpected slash at end of closing tag',\n    description: 'Unexpected `%c-1`. Expected `>` instead'\n  },\n  endTagWithoutMatchingOpenElement: {\n    reason: 'Unexpected unopened end tag',\n    description: 'Unexpected end tag. Expected no end tag or another end tag',\n    url: false\n  },\n  eofBeforeTagName: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected tag name instead'\n  },\n  eofInCdata: {\n    reason: 'Unexpected end of file in CDATA',\n    description: 'Unexpected end of file. Expected `]]>` to close the CDATA'\n  },\n  eofInComment: {\n    reason: 'Unexpected end of file in comment',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInDoctype: {\n    reason: 'Unexpected end of file in doctype',\n    description:\n      'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'\n  },\n  eofInElementThatCanContainOnlyText: {\n    reason: 'Unexpected end of file in element that can only contain text',\n    description: 'Unexpected end of file. Expected text or a closing tag',\n    url: false\n  },\n  eofInScriptHtmlCommentLikeText: {\n    reason: 'Unexpected end of file in comment inside script',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInTag: {\n    reason: 'Unexpected end of file in tag',\n    description: 'Unexpected end of file. Expected `>` to close the tag'\n  },\n  incorrectlyClosedComment: {\n    reason: 'Incorrectly closed comment',\n    description: 'Unexpected `%c-1`. Expected `-->` to close the comment'\n  },\n  incorrectlyOpenedComment: {\n    reason: 'Incorrectly opened comment',\n    description: 'Unexpected `%c`. Expected `<!--` to open the comment'\n  },\n  invalidCharacterSequenceAfterDoctypeName: {\n    reason: 'Invalid sequence after doctype name',\n    description: 'Unexpected sequence at `%c`. Expected `public` or `system`'\n  },\n  invalidFirstCharacterOfTagName: {\n    reason: 'Invalid first character in tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  misplacedDoctype: {\n    reason: 'Misplaced doctype',\n    description: 'Unexpected doctype. Expected doctype before head',\n    url: false\n  },\n  misplacedStartTagForHeadElement: {\n    reason: 'Misplaced `<head>` start tag',\n    description:\n      'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',\n    url: false\n  },\n  missingAttributeValue: {\n    reason: 'Missing attribute value',\n    description:\n      'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'\n  },\n  missingDoctype: {\n    reason: 'Missing doctype before other content',\n    description: 'Expected a `<!doctype html>` before anything else',\n    url: false\n  },\n  missingDoctypeName: {\n    reason: 'Missing doctype name',\n    description: 'Unexpected doctype end at `%c`. Expected `html` instead'\n  },\n  missingDoctypePublicIdentifier: {\n    reason: 'Missing public identifier in doctype',\n    description: 'Unexpected `%c`. Expected identifier for `public` instead'\n  },\n  missingDoctypeSystemIdentifier: {\n    reason: 'Missing system identifier in doctype',\n    description:\n      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `\"about:legacy-compat\"`)'\n  },\n  missingEndTagName: {\n    reason: 'Missing name in end tag',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  missingQuoteBeforeDoctypePublicIdentifier: {\n    reason: 'Missing quote before public identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingQuoteBeforeDoctypeSystemIdentifier: {\n    reason: 'Missing quote before system identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingSemicolonAfterCharacterReference: {\n    reason: 'Missing semicolon after character reference',\n    description: 'Unexpected `%c`. Expected `;` instead'\n  },\n  missingWhitespaceAfterDoctypePublicKeyword: {\n    reason: 'Missing whitespace after public identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceAfterDoctypeSystemKeyword: {\n    reason: 'Missing whitespace after system identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBeforeDoctypeName: {\n    reason: 'Missing whitespace before doctype name',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenAttributes: {\n    reason: 'Missing whitespace between attributes',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {\n    reason:\n      'Missing whitespace between public and system identifiers in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  nestedComment: {\n    reason: 'Unexpected nested comment',\n    description: 'Unexpected `<!--`. Expected `-->`'\n  },\n  nestedNoscriptInHead: {\n    reason: 'Unexpected nested `<noscript>` in `<head>`',\n    description:\n      'Unexpected `<noscript>`. Expected a closing tag or a meta element',\n    url: false\n  },\n  nonConformingDoctype: {\n    reason: 'Unexpected non-conforming doctype declaration',\n    description:\n      'Expected `<!doctype html>` or `<!doctype html system \"about:legacy-compat\">`',\n    url: false\n  },\n  nonVoidHtmlElementStartTagWithTrailingSolidus: {\n    reason: 'Unexpected trailing slash on start tag of non-void element',\n    description: 'Unexpected `/`. Expected `>` instead'\n  },\n  noncharacterCharacterReference: {\n    reason:\n      'Unexpected noncharacter code point referenced by character reference',\n    description: 'Unexpected code point. Do not use noncharacters in HTML'\n  },\n  noncharacterInInputStream: {\n    reason: 'Unexpected noncharacter character',\n    description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'\n  },\n  nullCharacterReference: {\n    reason: 'Unexpected NULL character referenced by character reference',\n    description: 'Unexpected code point. Do not use NULL characters in HTML'\n  },\n  openElementsLeftAfterEof: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected closing tag instead',\n    url: false\n  },\n  surrogateCharacterReference: {\n    reason: 'Unexpected surrogate character referenced by character reference',\n    description:\n      'Unexpected code point. Do not use lone surrogate characters in HTML'\n  },\n  surrogateInInputStream: {\n    reason: 'Unexpected surrogate character',\n    description:\n      'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'\n  },\n  unexpectedCharacterAfterDoctypeSystemIdentifier: {\n    reason: 'Invalid character after system identifier in doctype',\n    description: 'Unexpected character at `%c`. Expected `>`'\n  },\n  unexpectedCharacterInAttributeName: {\n    reason: 'Unexpected character in attribute name',\n    description:\n      'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'\n  },\n  unexpectedCharacterInUnquotedAttributeValue: {\n    reason: 'Unexpected character in unquoted attribute value',\n    description: 'Unexpected `%c`. Quote the attribute value to include it'\n  },\n  unexpectedEqualsSignBeforeAttributeName: {\n    reason: 'Unexpected equals sign before attribute name',\n    description: 'Unexpected `%c`. Add an attribute name before it'\n  },\n  unexpectedNullCharacter: {\n    reason: 'Unexpected NULL character',\n    description:\n      'Unexpected code point `%x`. Do not use NULL characters in HTML'\n  },\n  unexpectedQuestionMarkInsteadOfTagName: {\n    reason: 'Unexpected question mark instead of tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  unexpectedSolidusInTag: {\n    reason: 'Unexpected slash in tag',\n    description:\n      'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'\n  },\n  unknownNamedCharacterReference: {\n    reason: 'Unexpected unknown named character reference',\n    description:\n      'Unexpected character reference. Expected known named character references'\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {errors} from './errors.js'\n\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-'\n\nconst fatalities = {2: true, 1: false, 0: null}\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, options)\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse'\n    const onParseError = settings.emitParseErrors ? onerror : null\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    })\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    })\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code\n      const name = camelcase(code)\n      const setting = settings[name]\n      const config = setting === undefined || setting === null ? true : setting\n      const level = typeof config === 'number' ? config : config ? 1 : 0\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      }\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      }\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {reason: '', description: '', url: ''}\n        const message = file.message(format(info.reason), {start, end})\n        message.source = 'parse-error'\n        message.ruleId = code\n        message.fatal = fatalities[level]\n        message.note = format(info.description)\n        message.url = 'url' in info && info.url === false ? null : base + code\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value\n          .replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */ $1) => {\n            const offset = $1 ? -Number.parseInt($1, 10) : 0\n            const char = doc.charAt(error.startOffset + offset)\n            return char === '`' ? '` ` `' : char\n          })\n          .replace(\n            /%x/g,\n            () =>\n              '0x' +\n              doc.charCodeAt(error.startOffset).toString(16).toUpperCase()\n          )\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())\n}\n"],"names":["reducer","state","action","EditorContext","React","markdown","getCommands","data","resulte","forEach","item","children","Array","isArray","keyCommand","shortcuts","execute","toLocaleLowerCase","shortcutsHandle","e","commands","commandOrchestrator","dispatch","altKey","push","shiftKey","metaKey","ctrlKey","length","test","key","command","join","undefined","Object","keys","split","every","v","includes","stopPropagation","preventDefault","executeCommand","rehype","unified","use","rehypeParse","rehypeStringify","freeze","Markdown","props","prefixCls","useContext","highlightEnable","preRef","useEffect","current","textareaPre","_jsx","ref","className","mdStr","String","raw","replace","str","c","fragment","rehypePrism","ignoreMissing","processSync","toString","error","dangerouslySetInnerHTML","__html","browserSupportsTextareaTextNodes","canManipulateViaTextNodes","input","nodeName","textarea","document","createElement","value","firstChild","insertAtLineStart","val","cursorIdx","content","startIdx","focus","setRangeText","dispatchEvent","Event","bubbles","insertTextAtPosition","text","selection","ieRange","createRange","collapse","select","execCommand","start","selectionStart","end","selectionEnd","range","textNode","createTextNode","node","offset","startNode","endNode","nodeLength","nodeValue","setStart","setEnd","nextSibling","deleteContents","appendChild","commonAncestorContainer","insertNode","slice","setSelectionRange","createEvent","initEvent","selectWord","_ref","position","Error","isWordDelimiter","charCodeAt","i","getSurroundingWord","getBreaksNeededForEmptyLineBefore","startPosition","neededBreaks","isInFirstLine","getBreaksNeededForEmptyLineAfter","isInLastLine","bold","name","buttonProps","title","icon","role","width","height","viewBox","fill","d","api","newSelectionRange","state1","state2","replaceSelection","selectedText","_state1$selectedText","code","tate","indexOf","breaksBeforeCount","breaksBefore","breaksAfterCount","breaksAfter","codeBlock","comment","_jsxs","fillRule","points","stroke","strokeLinecap","strokeLinejoin","strokeWidth","divider","fullscreen","executeCommandState","textArea","group","arr","options","map","parent","hr","transform","image","imageTemplate","italic","link","insertBeforeEachLine","insertBefore","lines","insertionLength","modifiedText","index","insertionResult","makeList","oneLinerOffset","unorderedListCommand","orderedListCommand","checkedListCommand","codePreview","preview","codeEdit","codeLive","quote","strikethrough","title1","style","fontSize","textAlign","title2","title3","title4","title5","title6","getExtraCommands","getStateFromTextArea","_textArea$value","TextAreaTextApi","constructor","this","TextAreaCommandOrchestrator","textApi","getState","Textarea","onChange","other","extraCommands","tabSize","defaultTabEnable","textRef","executeRef","statesRef","onKeyDown","target","valArr","substr","currentLineStr","toLowerCase","space","_star","substring","_end","modifiedTextLine","idx","oldSelectText","newStarNum","RegExp","startTabSize","endTabSize","keyCode","startStr","startsWith","parseInt","handleKeyDown","addEventListener","removeEventListener","autoComplete","autoCorrect","autoCapitalize","spellCheck","TextArea","onScroll","renderTextarea","otherProps","scrollTop","warp","textareaWarp","textStyle","WebkitTextFillColor","overflow","Fragment","Child","groupName","barPopup","useMemo","onClick","Toolbar","isChild","ToolbarItems","components","originalOverflow","useRef","handleClick","keyName","body","window","getComputedStyle","liProps","activeBtn","childNode","close","disabled","render","toolbar","com","type","evn","toolbarBottom","bottomClassName","$dom","dragRef","handleMouseMove","event","clientY","changedTouches","_changedTouches$","newHeight","dragY","minHeight","maxHeight","handleMouseUp","_$dom$current","_$dom$current2","handleMouseDown","_changedTouches$2","_$dom$current3","passive","_$dom$current4","_$dom$current5","_$dom$current6","_$dom$current7","svg","InternalMDEditor","propsValue","commandsFilter","direction","enableScroll","visibleDragbar","visiableDragbar","previewType","previewOptions","textareaProps","autoFocus","onHeightChange","hideToolbar","cmds","filter","Boolean","extraCmds","useReducer","scrollTopPreview","container","previewRef","enableScrollRef","useImperativeHandle","stateInit","cls","trim","textareaDomRef","active","initScroll","handleScroll","textareaDom","previewDom","scale","scrollHeight","offsetHeight","previewClassName","handlePreviewScroll","mdPreview","MarkdownPreview","source","containerStyle","Provider","keyname","DragBar","mdEditor","errors","abandonedHeadElementChild","reason","description","url","abruptClosingOfEmptyComment","abruptDoctypePublicIdentifier","abruptDoctypeSystemIdentifier","absenceOfDigitsInNumericCharacterReference","cdataInHtmlContent","characterReferenceOutsideUnicodeRange","closingOfElementWithOpenChildElements","controlCharacterInInputStream","controlCharacterReference","disallowedContentInNoscriptInHead","duplicateAttribute","endTagWithAttributes","endTagWithTrailingSolidus","endTagWithoutMatchingOpenElement","eofBeforeTagName","eofInCdata","eofInComment","eofInDoctype","eofInElementThatCanContainOnlyText","eofInScriptHtmlCommentLikeText","eofInTag","incorrectlyClosedComment","incorrectlyOpenedComment","invalidCharacterSequenceAfterDoctypeName","invalidFirstCharacterOfTagName","misplacedDoctype","misplacedStartTagForHeadElement","missingAttributeValue","missingDoctype","missingDoctypeName","missingDoctypePublicIdentifier","missingDoctypeSystemIdentifier","missingEndTagName","missingQuoteBeforeDoctypePublicIdentifier","missingQuoteBeforeDoctypeSystemIdentifier","missingSemicolonAfterCharacterReference","missingWhitespaceAfterDoctypePublicKeyword","missingWhitespaceAfterDoctypeSystemKeyword","missingWhitespaceBeforeDoctypeName","missingWhitespaceBetweenAttributes","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","nestedComment","nestedNoscriptInHead","nonConformingDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","noncharacterCharacterReference","noncharacterInInputStream","nullCharacterReference","openElementsLeftAfterEof","surrogateCharacterReference","surrogateInInputStream","unexpectedCharacterAfterDoctypeSystemIdentifier","unexpectedCharacterInAttributeName","unexpectedCharacterInUnquotedAttributeValue","unexpectedEqualsSignBeforeAttributeName","unexpectedNullCharacter","unexpectedQuestionMarkInsteadOfTagName","unexpectedSolidusInTag","unknownNamedCharacterReference","base","fatalities","processorSettings","settings","assign","Parser","doc","file","fn","onParseError","emitParseErrors","$0","charAt","toUpperCase","setting","config","level","line","startLine","column","startCol","startOffset","endLine","endCol","endOffset","info","message","format","ruleId","fatal","note","_","$1","Number","char","parse5","Parser5","sourceCodeLocationInfo","scriptingEnabled","fromParse5","verbose"],"sourceRoot":""}