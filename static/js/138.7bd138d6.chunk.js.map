{"version":3,"file":"static/js/138.7bd138d6.chunk.js","mappings":"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","sources":["../../packages/generate-password/src/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Wrapper, StyledLayout, CodeLineCopy, Button, Spacing } from '@wcj/tools-react-components';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  border-radius: 6px;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  user-select: none;\n`;\n\nexport interface InputRangeProps\n  extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n  ref?: any;\n  range?: number;\n}\n\nconst InputRange: React.FC<React.PropsWithChildren<InputRangeProps>> = (props) => {\n  return (\n    <Label>\n      <Input type=\"range\" min={8} max={50} style={{ flex: 1 }} {...props} defaultValue={props.range} />\n      <span>{props.range}</span>\n    </Label>\n  );\n};\n\nconst LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\nconst UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst NUMERIC = '0123456789';\nconst SPECIAL_CHARACTER = '!@#$%^&*()_+~`|}{[]:;?><,./-=';\n\nfunction generatePassword(\n  len: number = 8,\n  lowerCase: boolean = true,\n  upperCase: boolean = true,\n  numeric: boolean = true,\n  special: boolean = true,\n) {\n  let password = '';\n  if (!lowerCase && !upperCase && !numeric && !special) {\n    return password;\n  }\n  while (password.length < len) {\n    const entity1 = Math.ceil(LOWERCASE.length * Math.random() * Math.random()) - 1;\n    const entity2 = Math.ceil(NUMERIC.length * Math.random() * Math.random()) - 1;\n    const entity3 = Math.ceil(SPECIAL_CHARACTER.length * Math.random() * Math.random()) - 1;\n    const entity4 = Math.ceil(UPPERCASE.length * Math.random() * Math.random()) - 1;\n    if (lowerCase && password.length < len) {\n      password += LOWERCASE.charAt(entity1);\n    }\n    if (upperCase && password.length < len) {\n      password += UPPERCASE.charAt(entity4);\n    }\n    if (numeric && password.length < len) {\n      password += NUMERIC.charAt(entity2);\n    }\n    if (special && password.length < len) {\n      password += SPECIAL_CHARACTER.charAt(entity3);\n    }\n  }\n  return password.trim();\n}\n\nexport default function GeneratePassword() {\n  const [range, setRange] = useState<number>(12);\n  const [lowerCase, setLowerCase] = useState<boolean>(true);\n  const [history, setHistory] = useState<string[]>([]);\n  const [upperCase, setUpperCase] = useState<boolean>(true);\n  const [numeric, setNumeric] = useState<boolean>(true);\n  const [special, setSpecial] = useState<boolean>(true);\n  const [result, setResult] = useState<string>();\n  const addHistory = (str: string) => {\n    const data = [...history];\n    data.unshift(str);\n    setHistory(data.slice(0, 20));\n  };\n  useEffect(() => {\n    const password = generatePassword(range, lowerCase, upperCase, numeric, special);\n    addHistory(password);\n    setResult(password);\n  }, [range, lowerCase, upperCase, numeric, special]);\n\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Setting\">\n        <InputRange\n          style={{ maxWidth: 630 }}\n          range={range}\n          onChange={(evn) => setRange(Number((evn.target as HTMLInputElement).value))}\n        />\n        <Spacing style={{ paddingTop: 10 }}>\n          <Label>\n            <Input type=\"checkbox\" checked={lowerCase} onChange={(evn) => setLowerCase(evn.target.checked)} />\n            Lower Case Letter(a..z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={upperCase} onChange={(evn) => setUpperCase(evn.target.checked)} />\n            Upper Case Letter(A..Z)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={numeric} onChange={(evn) => setNumeric(evn.target.checked)} />\n            Number (0..9)\n          </Label>\n          <Label>\n            <Input type=\"checkbox\" checked={special} onChange={(evn) => setSpecial(evn.target.checked)} />\n            Special characters\n          </Label>\n        </Spacing>\n        <Button\n          style={{ marginTop: 10 }}\n          onClick={() => {\n            const password = generatePassword(range, lowerCase, upperCase, numeric, special);\n            addHistory(password);\n            setResult(password);\n          }}\n        >\n          Generate Password\n        </Button>\n        <Spacing style={{ paddingTop: 10 }}>\n          {history.map((password, key) => {\n            return (\n              <CodeLineCopy label={`${key + 1}`} key={key}>\n                {password}\n              </CodeLineCopy>\n            );\n          })}\n        </Spacing>\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["Input","styled","_templateObject","Label","_templateObject2","InputRange","props","_jsxs","children","_jsx","type","min","max","style","flex","defaultValue","range","LOWERCASE","UPPERCASE","NUMERIC","SPECIAL_CHARACTER","generatePassword","len","lowerCase","upperCase","numeric","special","password","length","entity1","Math","ceil","random","entity2","entity3","entity4","charAt","trim","GeneratePassword","useState","setRange","setLowerCase","history","setHistory","setUpperCase","setNumeric","setSpecial","setResult","addHistory","str","data","unshift","slice","useEffect","Wrapper","StyledLayout","title","maxWidth","onChange","evn","Number","target","value","Spacing","paddingTop","checked","Button","marginTop","onClick","map","key","CodeLineCopy","label"],"sourceRoot":""}