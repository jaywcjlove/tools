{"version":3,"file":"static/js/2064.c1875f20.chunk.js","mappings":"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","sources":["../../packages/html-formatter/src/index.tsx","../../packages/html-formatter/src/sample.ts"],"sourcesContent":["import { Fragment, useRef, useState } from 'react';\nimport {\n  StyledLayout,\n  CopyButton,\n  CodeEditor,\n  Button,\n  Wrapper,\n  ErrorLayout,\n  ResultCode,\n  Spacing,\n} from '@wcj/tools-react-components';\nimport { html } from '@codemirror/lang-html';\nimport { minify, Options } from 'html-minifier';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport prettier from 'prettier';\nimport parserHTML from 'prettier/parser-html';\nimport * as sample from './sample';\n\ntype Type = 'formatter' | 'minify';\n\nconst Info = styled.span`\n  color: var(--color-fg-subtle);\n`;\n\nconst Danger = styled.span`\n  color: red;\n`;\n\nconst defaultOptions: Options = {\n  collapseBooleanAttributes: true,\n  collapseWhitespace: true,\n  decodeEntities: true,\n  html5: true,\n  minifyCSS: true,\n  processConditionalComments: true,\n  minifyJS: true,\n  processScripts: ['text/html'],\n  removeAttributeQuotes: true,\n  removeComments: true,\n  removeEmptyAttributes: true,\n  removeOptionalTags: true,\n  removeRedundantAttributes: true,\n  removeScriptTypeAttributes: true,\n  removeStyleLinkTypeAttributes: true,\n  removeTagWhitespace: true,\n  sortAttributes: true,\n  sortClassName: true,\n  trimCustomFragments: true,\n  useShortDoctype: true,\n};\n\nconst allOptions: Options = {\n  ...defaultOptions,\n  caseSensitive: true,\n  collapseInlineTagWhitespace: true,\n  conservativeCollapse: true,\n  includeAutoGeneratedTags: true,\n  keepClosingSlash: true,\n  preserveLineBreaks: true,\n  preventAttributesEscaping: true,\n  removeEmptyElements: true,\n};\n\nexport default function HTMLFormatter() {\n  const { t } = useTranslation('html-formatter');\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [type, setType] = useState<Type>('minify');\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState<Options>(defaultOptions);\n  const [error, setError] = useState('');\n  const [tabWidth, setTabWidth] = useState(2);\n  const handleFormat = () => {\n    try {\n      setError('');\n      setValue(prettier.format(value, { parser: 'html', tabWidth: tabWidth, printWidth: 120, plugins: [parserHTML] }));\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  const handleMinify = () => {\n    try {\n      setError('');\n      const val = minify(value, { ...options });\n      setValue(val || '');\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('error', error);\n        setError(error.message);\n      }\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"HTML Formatter/Minify\"\n        extra={\n          <Fragment>\n            {value && (\n              <Fragment>\n                {type === 'formatter' && <Button onClick={() => handleFormat()}>Formatter</Button>}\n                {type === 'minify' && <Button onClick={() => handleMinify()}>Minify</Button>}\n              </Fragment>\n            )}\n            {value && (\n              <select value={type} onChange={(evn) => setType(evn.target.value as Type)}>\n                <option value=\"formatter\">Formatter</option>\n                <option value=\"minify\">Minify</option>\n              </select>\n            )}\n            {value && type === 'formatter' && (\n              <select onChange={(evn) => setTabWidth(Number(evn.target.value))}>\n                <option value={2}>2 Tab Space</option>\n                <option value={3}>3 Tab Space</option>\n                <option value={4}>4 Tab Space</option>\n                <option value={5}>5 Tab Space</option>\n              </select>\n            )}\n            {value && <CopyButton value={value} />}\n            <Button\n              onClick={() => {\n                editor.current?.view?.focus();\n                if (type === 'formatter') {\n                  setValue(sample.html);\n                }\n                if (type === 'minify') {\n                  setValue(sample.val);\n                }\n              }}\n            >\n              Sample\n            </Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={value}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[html()]}\n          onChange={(value) => {\n            setValue(value);\n          }}\n        />\n      </StyledLayout>\n      {type === 'minify' && (\n        <StyledLayout\n          title={t('Options')}\n          style={{ maxWidth: 420 }}\n          extra={\n            <Fragment>\n              <Button onClick={() => setOptions(defaultOptions)}>Reset</Button>\n              <Button onClick={() => setOptions(allOptions)}>All</Button>\n              <Button onClick={() => setOptions({})}>None</Button>\n            </Fragment>\n          }\n        >\n          <ResultCode codeProps={{ style: { height: 'calc(100vh - 87px)', overflow: 'auto', margin: 0 } }}>\n            <Spacing>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.caseSensitive}\n                    onChange={({ target }) => setOptions({ ...options, caseSensitive: target.checked })}\n                  />\n                  {t('Case-sensitive').toString()}{' '}\n                  <Info>{t('Treat attributes in case sensitive manner (useful for custom HTML tags)').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseBooleanAttributes}\n                    onChange={({ target }) => setOptions({ ...options, collapseBooleanAttributes: target.checked })}\n                  />\n                  {t('Collapse boolean attributes').toString()}{' '}\n                  <Info>{t('Omit attribute values from boolean attributes').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseInlineTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseInlineTagWhitespace: target.checked })}\n                  />\n                  <Danger>{t('Collapse inline tag whitespace').toString()}</Danger>{' '}\n                  <Info>\n                    {t(\n                      `Don't leave any spaces between display:inline; elements when collapsing. Must be used in conjunction with collapseWhitespace=true`,\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseWhitespace: target.checked })}\n                  />\n                  {t('Collapse whitespace').toString()}{' '}\n                  <Info>{t(`Collapse white space that contributes to text nodes in a document tree`).toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.conservativeCollapse}\n                    onChange={({ target }) => setOptions({ ...options, conservativeCollapse: target.checked })}\n                  />\n                  {t('Conservative collapse').toString()}{' '}\n                  <Info>\n                    {t(\n                      `Always collapse to 1 space (never remove it entirely). Must be used in conjunction with collapseWhitespace=true`,\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.decodeEntities}\n                    onChange={({ target }) => setOptions({ ...options, decodeEntities: target.checked })}\n                  />\n                  {t('Decode Entity Characters').toString()}{' '}\n                  <Info>{t('Use direct Unicode characters whenever possible').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.html5}\n                    onChange={({ target }) => setOptions({ ...options, html5: target.checked })}\n                  />\n                  HTML5 <Info>{t('Parse input according to HTML5 specifications').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.includeAutoGeneratedTags}\n                    onChange={({ target }) => setOptions({ ...options, includeAutoGeneratedTags: target.checked })}\n                  />\n                  {t('Include auto-generated tags').toString()}{' '}\n                  <Info>{t('Insert tags generated by HTML parser').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.keepClosingSlash}\n                    onChange={({ target }) => setOptions({ ...options, keepClosingSlash: target.checked })}\n                  />\n                  {t('Keep closing slash').toString()}{' '}\n                  <Info>{t('Keep the trailing slash on singleton elements').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Max.line length\n                  <input\n                    type=\"number\"\n                    value={options.maxLineLength}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { maxLineLength: Number(target.value) } : {}) })\n                    }\n                  />\n                  <Info>\n                    {t(\n                      'Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points',\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyCSS}\n                    onChange={({ target }) => setOptions({ ...options, minifyCSS: target.checked })}\n                  />\n                  {t('Minify CSS').toString()}{' '}\n                  <Info>\n                    {t('Minify CSS in style elements and style attributes (uses').toString()}{' '}\n                    <a href=\"https://github.com/jakubpawlowicz/clean-css\" target=\"_blank\">\n                      clean-css\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyJS}\n                    onChange={({ target }) => setOptions({ ...options, minifyJS: target.checked })}\n                  />\n                  {t('Minify JavaScript').toString()}{' '}\n                  <Info>\n                    {t('Minify JavaScript in script elements and event attributes (uses').toString()}{' '}\n                    <a href=\"https://github.com/jaywcjlove/uglify-js-export\" target=\"_blank\">\n                      UglifyJS\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Minify URLs').toString()}{' '}\n                  <input\n                    type=\"number\"\n                    value={options.minifyURLs as string}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? ({ minifyURLs: target.value } as any) : {}) })\n                    }\n                  />\n                  <Info>\n                    Minify URLs in various attributes (uses{' '}\n                    <a href=\"https://github.com/stevenvachon/relateurl\" target=\"_blank\">\n                      relateurl\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preserveLineBreaks}\n                    onChange={({ target }) => setOptions({ ...options, preserveLineBreaks: target.checked })}\n                  />\n                  {t('Preserve line-breaks').toString()}\n                  <Info>\n                    Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a\n                    line break. Must be used in conjunction with collapseWhitespace=true\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preventAttributesEscaping}\n                    onChange={({ target }) => setOptions({ ...options, preventAttributesEscaping: target.checked })}\n                  />\n                  <Danger>{t('Prevent attributes escaping').toString()}</Danger>{' '}\n                  <Info>Prevents the escaping of the values of attributes</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.processConditionalComments}\n                    onChange={({ target }) => setOptions({ ...options, processConditionalComments: target.checked })}\n                  />\n                  {t('Process conditional comments').toString()}{' '}\n                  <Info>Process contents of conditional comments through minifier</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Process scripts').toString()}{' '}\n                  <input\n                    type=\"text\"\n                    value={options.processScripts || ''}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { processScripts: target.value.split(',') } : {}) })\n                    }\n                  />\n                  <Info>\n                    Comma-delimited string corresponding to types of script elements to process through minifier (e.g.\n                    text/ng-template, text/x-handlebars-template)\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Quote character').toString()}\n                  <input\n                    type=\"text\"\n                    value={options.quoteCharacter || ''}\n                    onChange={({ target }) => setOptions({ ...options, quoteCharacter: target.value })}\n                  />\n                  <Info>Type of quote to use for attribute values (' or \")</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeAttributeQuotes}\n                    onChange={({ target }) => setOptions({ ...options, removeAttributeQuotes: target.checked })}\n                  />\n                  {t('Remove attribute quotes').toString()} <Info>Remove quotes around attributes when possible</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeComments}\n                    onChange={({ target }) => setOptions({ ...options, removeComments: target.checked })}\n                  />\n                  {t('Remove comments').toString()} <Info>Strip HTML comments</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyAttributes: target.checked })}\n                  />\n                  {t('Remove empty attributes').toString()}{' '}\n                  <Info>Remove all attributes with whitespace-only values</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyElements}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyElements: target.checked })}\n                  />\n                  <Danger>{t('Remove empty elements').toString()}</Danger>{' '}\n                  <Info>Remove all elements with empty contents</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeOptionalTags}\n                    onChange={({ target }) => setOptions({ ...options, removeOptionalTags: target.checked })}\n                  />\n                  {t('Remove optional tags').toString()}\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeRedundantAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeRedundantAttributes: target.checked })}\n                  />\n                  {t('Remove redundant attributes').toString()}{' '}\n                  <Info>{t('Remove attributes when value matches default.').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeScriptTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeScriptTypeAttributes: target.checked })}\n                  />\n                  {t('Remove script type attributes').toString()}{' '}\n                  <Info>\n                    Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeStyleLinkTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeStyleLinkTypeAttributes: target.checked })}\n                  />\n                  {t('Remove style link type attributes').toString()}{' '}\n                  <Info>\n                    Remove type=\"text/css\" from style and link tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, removeTagWhitespace: target.checked })}\n                  />\n                  <Danger>{t('Remove tag whitespace').toString()}</Danger>{' '}\n                  <Info>\n                    Remove space between attributes whenever possible. Note that this will result in invalid HTML!\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortAttributes}\n                    onChange={({ target }) => setOptions({ ...options, sortAttributes: target.checked })}\n                  />\n                  <Danger>{t('Sort attributes').toString()}</Danger>{' '}\n                  <Info>{t('Sort attributes by frequency').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortClassName}\n                    onChange={({ target }) => setOptions({ ...options, sortClassName: target.checked })}\n                  />\n                  <Danger>{t('Sort class name').toString()}</Danger>{' '}\n                  <Info>{t('Sort style classes by frequency').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.trimCustomFragments}\n                    onChange={({ target }) => setOptions({ ...options, trimCustomFragments: target.checked })}\n                  />\n                  {t('Trim white space around custom fragments').toString()}{' '}\n                  <Info>Trim white space around ignoreCustomFragments.</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.useShortDoctype}\n                    onChange={({ target }) => setOptions({ ...options, useShortDoctype: target.checked })}\n                  />\n                  {t('Use short doctype').toString()} <Info>Replaces the doctype with the short (HTML5) doctype</Info>\n                </span>\n              </label>\n            </Spacing>\n          </ResultCode>\n        </StyledLayout>\n      )}\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n","export const html = `<!DOCTYPE html> <html> <head> <title>Page Title</title> <style> body { margin: 0; } </style></head> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html>`;\nexport const val = `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>My First Heading</h1>\n    <p>My first paragraph.</p>\n  </body>\n  <script>\n    function formatter(name) {\n      return 'Hi!' + name\n    }\n  </script>\n</html>\n`;\n"],"names":["Info","styled","Danger","defaultOptions","collapseBooleanAttributes","collapseWhitespace","decodeEntities","html5","minifyCSS","processConditionalComments","minifyJS","processScripts","removeAttributeQuotes","removeComments","removeEmptyAttributes","removeOptionalTags","removeRedundantAttributes","removeScriptTypeAttributes","removeStyleLinkTypeAttributes","removeTagWhitespace","sortAttributes","sortClassName","trimCustomFragments","useShortDoctype","allOptions","caseSensitive","collapseInlineTagWhitespace","conservativeCollapse","includeAutoGeneratedTags","keepClosingSlash","preserveLineBreaks","preventAttributesEscaping","removeEmptyElements","HTMLFormatter","t","useTranslation","editor","useRef","useState","type","setType","value","setValue","options","setOptions","error","setError","tabWidth","setTabWidth","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","prettier","parser","printWidth","plugins","parserHTML","Error","message","handleFormat","val","minify","console","log","handleMinify","onChange","evn","target","Number","CopyButton","current","_editor$current","view","_editor$current$view","focus","CodeEditor","ref","height","extensions","html","style","maxWidth","ResultCode","codeProps","overflow","margin","Spacing","checked","_ref","toString","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","maxLineLength","_ref10","_ref11","href","_ref12","minifyURLs","_ref13","_ref14","_ref15","_ref16","_ref17","split","quoteCharacter","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","ErrorLayout"],"sourceRoot":""}