{"version":3,"file":"static/js/2064.ba469500.chunk.js","mappings":"wSAAaA,EAAO,kLACPC,EAAM,+U,WCqBbC,EAAOC,EAAAA,GAAAA,KAAW,0DAIlBC,EAASD,EAAAA,GAAAA,KAAW,uCAIpBE,EAA0B,CAC9BC,2BAA2B,EAC3BC,oBAAoB,EACpBC,gBAAgB,EAChBC,OAAO,EACPC,WAAW,EACXC,4BAA4B,EAC5BC,UAAU,EACVC,eAAgB,CAAC,aACjBC,uBAAuB,EACvBC,gBAAgB,EAChBC,uBAAuB,EACvBC,oBAAoB,EACpBC,2BAA2B,EAC3BC,4BAA4B,EAC5BC,+BAA+B,EAC/BC,qBAAqB,EACrBC,gBAAgB,EAChBC,eAAe,EACfC,qBAAqB,EACrBC,iBAAiB,GAGbC,GAAsB,UACvBrB,EAAc,CACjBsB,eAAe,EACfC,6BAA6B,EAC7BC,sBAAsB,EACtBC,0BAA0B,EAC1BC,kBAAkB,EAClBC,oBAAoB,EACpBC,2BAA2B,EAC3BC,qBAAqB,IAGR,SAASC,IACtB,IAAQC,GAAMC,EAAAA,EAAAA,IAAe,kBAArBD,EACFE,GAASC,EAAAA,EAAAA,QAA2B,MAC1C,GAAwBC,EAAAA,EAAAA,UAAe,UAAS,eAAzCC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACtB,GAA8BJ,EAAAA,EAAAA,UAAkBnC,GAAe,eAAxDwC,EAAO,KAAEC,EAAU,KAC1B,GAA0BN,EAAAA,EAAAA,UAAS,IAAG,eAA/BO,EAAK,KAAEC,EAAQ,KACtB,GAAgCR,EAAAA,EAAAA,UAAS,GAAE,eAApCS,EAAQ,KAAEC,EAAW,KAuB5B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAAAC,SAAAA,EACNC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAM,wBACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,CACNV,IACCQ,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,CACG,cAATZ,IAAwBa,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBA9BnC,WACnB,IACEZ,EAAS,IACTJ,EAASiB,IAAAA,OAAgBlB,EAAO,CAAEmB,OAAQ,OAAQb,SAAUA,EAAUc,WAAY,IAAKC,QAAS,CAACC,OAKnG,CAJE,MAAOlB,GACHA,aAAiBmB,OACnBlB,EAASD,EAAMoB,QAEnB,CACF,CAqB8DC,EAAe,EAAAf,SAAC,cACtD,WAATZ,IAAqBa,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBArBhC,WACnB,IACEZ,EAAS,IACT,IAAM/C,GAAMoE,EAAAA,EAAAA,GAAO1B,GAAO,UAAKE,IAC/BD,EAAS3C,GAAO,GAMlB,CALE,MAAO8C,GACHA,aAAiBmB,QACnBI,QAAQC,IAAI,QAASxB,GACrBC,EAASD,EAAMoB,SAEnB,CACF,CAU2DK,EAAe,EAAAnB,SAAC,cAGhEV,IACCQ,EAAAA,EAAAA,MAAAA,SAAAA,CAAQR,MAAOF,EAAMgC,SAAWC,SAAAA,GAAG,OAAKhC,EAAQgC,EAAIC,OAAOhC,MAAe,EAAAU,SAAAA,EACxEC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAM,YAAWU,SAAC,eAC1BC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAM,SAAQU,SAAC,cAG1BV,GAAkB,cAATF,IACRU,EAAAA,EAAAA,MAAAA,SAAAA,CAAQsB,SAAWC,SAAAA,GAAG,OAAKxB,EAAY0B,OAAOF,EAAIC,OAAOhC,OAAQ,EAAAU,SAAAA,EAC/DC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAO,EAAEU,SAAC,iBAClBC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAO,EAAEU,SAAC,iBAClBC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAO,EAAEU,SAAC,iBAClBC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQX,MAAO,EAAEU,SAAC,mBAGrBV,IAASW,EAAAA,EAAAA,KAACuB,EAAAA,GAAU,CAAClC,MAAOA,KAC7BW,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CACLC,QAAS,WAAM,QACC,OAAd,EAAAtB,EAAOwC,UAAa,OAAN,EAAdC,EAAgBC,OAAhBC,EAAsBC,QACT,cAATzC,GACFG,EAASuC,GAEE,WAAT1C,GACFG,EAASuC,EAEb,EAAE9B,SACH,cAIJA,UAEDC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAU,CACTzC,MAAOA,EACP0C,IAAK/C,EACLgD,OAAO,qBACPC,WAAY,EAACvF,EAAAA,EAAAA,SACbyE,SAAW9B,SAAAA,GACTC,EAASD,EACX,MAGM,WAATF,IACCa,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CACXC,MAAOpB,EAAE,WACToD,MAAO,CAAEC,SAAU,KACnBhC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAQ,CAAAL,SAAAA,EACPC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBAAMd,EAAWzC,EAAgB,EAAAgD,SAAC,WACnDC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBAAMd,EAAWpB,EAAY,EAAA2B,SAAC,SAC/CC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CAACC,QAAS,kBAAMd,EAAW,CAAC,EAAG,EAAAO,SAAC,YAE1CA,UAEDC,EAAAA,EAAAA,KAACoC,EAAAA,GAAU,CAACC,UAAW,CAAEH,MAAO,CAAEF,OAAQ,qBAAsBM,SAAU,OAAQC,OAAQ,IAAMxC,UAC9FF,EAAAA,EAAAA,MAAC2C,EAAAA,GAAO,CAAAzC,SAAAA,EACNC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQlB,cACnB8C,SAAU,gBAAGE,EAAQqB,EAARrB,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAlB,cAAegD,EAAOoB,UAAU,IAEpF3D,EAAE,kBAAkB6D,WAAY,KACjC3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,2EAA2E6D,mBAGxF3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQvC,0BACnBmE,SAAU,gBAAGE,EAAQuB,EAARvB,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAvC,0BAA2BqE,EAAOoB,UAAU,IAEhG3D,EAAE,+BAA+B6D,WAAY,KAC9C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,iDAAiD6D,mBAG9D3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQjB,4BACnB6C,SAAU,gBAAGE,EAAQwB,EAARxB,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAjB,4BAA6B+C,EAAOoB,UAAU,KAEnGzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,kCAAkC6D,aAAqB,KAClE3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SACFjB,EAAE,qIAED6D,mBAIR3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQtC,mBACnBkE,SAAU,gBAAGE,EAAQyB,EAARzB,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAtC,mBAAoBoE,EAAOoB,UAAU,IAEzF3D,EAAE,uBAAuB6D,WAAY,KACtC3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,0EAA0E6D,mBAGvF3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQhB,qBACnB4C,SAAU,gBAAGE,EAAQ0B,EAAR1B,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAhB,qBAAsB8C,EAAOoB,UAAU,IAE3F3D,EAAE,yBAAyB6D,WAAY,KACxC3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SACFjB,EAAE,mHAED6D,mBAIR3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQrC,eACnBiE,SAAU,gBAAGE,EAAQ2B,EAAR3B,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAArC,eAAgBmE,EAAOoB,UAAU,IAErF3D,EAAE,4BAA4B6D,WAAY,KAC3C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,mDAAmD6D,mBAGhE3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQpC,MACnBgE,SAAU,gBAAGE,EAAQ4B,EAAR5B,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAApC,MAAOkE,EAAOoB,UAAU,IAC3E,UACI,SAAC7F,EAAI,CAAAmD,SAAEjB,EAAE,iDAAiD6D,mBAGpE3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQf,yBACnB2C,SAAU,gBAAGE,EAAQ6B,EAAR7B,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAf,yBAA0B6C,EAAOoB,UAAU,IAE/F3D,EAAE,+BAA+B6D,WAAY,KAC9C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,wCAAwC6D,mBAGrD3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQd,iBACnB0C,SAAU,gBAAGE,EAAQ8B,EAAR9B,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAd,iBAAkB4C,EAAOoB,UAAU,IAEvF3D,EAAE,sBAAsB6D,WAAY,KACrC3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,iDAAiD6D,mBAG9D3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,CAAM,mBAEJ,kBACEZ,KAAK,SACLE,MAAOE,EAAQ6D,cACfjC,SAAU,gBAAGE,EAAQgC,EAARhC,OAAQ,OACnB7B,GAAW,UAAKD,EAAa8B,EAAOhC,MAAQ,CAAE+D,cAAe9B,OAAOD,EAAOhC,QAAW,CAAC,GAAK,KAGhGW,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SACFjB,EACC,yGACA6D,mBAIR3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQnC,UACnB+D,SAAU,gBAAGE,EAAQiC,EAARjC,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAnC,UAAWiE,EAAOoB,UAAU,IAEhF3D,EAAE,cAAc6D,WAAY,KAC7B9C,EAAAA,EAAAA,MAACjD,EAAI,CAAAmD,SAAAA,CACFjB,EAAE,2DAA2D6D,WAAY,KAC1E3C,EAAAA,EAAAA,KAAAA,IAAAA,CAAGuD,KAAK,8CAA8ClC,OAAO,SAAQtB,SAAC,cAElE,aAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQjC,SACnB6D,SAAU,gBAAGE,EAAQmC,EAARnC,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAjC,SAAU+D,EAAOoB,UAAU,IAE/E3D,EAAE,qBAAqB6D,WAAY,KACpC9C,EAAAA,EAAAA,MAACjD,EAAI,CAAAmD,SAAAA,CACFjB,EAAE,mEAAmE6D,WAAY,KAClF3C,EAAAA,EAAAA,KAAAA,IAAAA,CAAGuD,KAAK,iDAAiDlC,OAAO,SAAQtB,SAAC,aAErE,aAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,CACGjB,EAAE,eAAe6D,WAAY,KAC9B3C,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,SACLE,MAAOE,EAAQkE,WACftC,SAAU,gBAAGE,EAAQqC,EAARrC,OAAQ,OACnB7B,GAAW,UAAKD,EAAa8B,EAAOhC,MAAS,CAAEoE,WAAYpC,EAAOhC,OAAkB,CAAC,GAAK,KAG9FQ,EAAAA,EAAAA,MAACjD,EAAI,CAAAmD,SAAAA,CAAC,0CACoC,KACxCC,EAAAA,EAAAA,KAAAA,IAAAA,CAAGuD,KAAK,4CAA4ClC,OAAO,SAAQtB,SAAC,cAEhE,aAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQb,mBACnByC,SAAU,gBAAGE,EAAQsC,EAARtC,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAb,mBAAoB2C,EAAOoB,UAAU,IAEzF3D,EAAE,wBAAwB6D,YAC3B3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,iLAMVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQZ,0BACnBwC,SAAU,gBAAGE,EAAQuC,EAARvC,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAZ,0BAA2B0C,EAAOoB,UAAU,KAEjGzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,+BAA+B6D,aAAqB,KAC/D3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,4DAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQlC,2BACnB8D,SAAU,gBAAGE,EAAQwC,EAARxC,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAlC,2BAA4BgE,EAAOoB,UAAU,IAEjG3D,EAAE,gCAAgC6D,WAAY,KAC/C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,oEAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,CACGjB,EAAE,mBAAmB6D,WAAY,KAClC3C,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,OACLE,MAAOE,EAAQhC,gBAAkB,GACjC4D,SAAU,gBAAGE,EAAQyC,EAARzC,OAAQ,OACnB7B,GAAW,UAAKD,EAAa8B,EAAOhC,MAAQ,CAAE9B,eAAgB8D,EAAOhC,MAAM0E,MAAM,MAAS,CAAC,GAAK,KAGpG/D,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,2JAMVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,CACGjB,EAAE,mBAAmB6D,YACtB3C,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,OACLE,MAAOE,EAAQyE,gBAAkB,GACjC7C,SAAU,gBAAGE,EAAQ4C,EAAR5C,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAyE,eAAgB3C,EAAOhC,QAAQ,KAEpFW,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,8DAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ/B,sBACnB2D,SAAU,gBAAGE,EAAQ6C,EAAR7C,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA/B,sBAAuB6D,EAAOoB,UAAU,IAE5F3D,EAAE,2BAA2B6D,WAAW,KAAC,SAAC/F,EAAI,CAAAmD,SAAC,wDAGpDC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ9B,eACnB0D,SAAU,gBAAGE,EAAQ8C,EAAR9C,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA9B,eAAgB4D,EAAOoB,UAAU,IAErF3D,EAAE,mBAAmB6D,WAAW,KAAC,SAAC/F,EAAI,CAAAmD,SAAC,8BAG5CC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ7B,sBACnByD,SAAU,gBAAGE,EAAQ+C,EAAR/C,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA7B,sBAAuB2D,EAAOoB,UAAU,IAE5F3D,EAAE,2BAA2B6D,WAAY,KAC1C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,4DAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQX,oBACnBuC,SAAU,gBAAGE,EAAQgD,EAARhD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAX,oBAAqByC,EAAOoB,UAAU,KAE3FzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,yBAAyB6D,aAAqB,KACzD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,kDAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ5B,mBACnBwD,SAAU,gBAAGE,EAAQiD,EAARjD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA5B,mBAAoB0D,EAAOoB,UAAU,IAEzF3D,EAAE,wBAAwB6D,iBAG/B3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ3B,0BACnBuD,SAAU,gBAAGE,EAAQkD,EAARlD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA3B,0BAA2ByD,EAAOoB,UAAU,IAEhG3D,EAAE,+BAA+B6D,WAAY,KAC9C3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,iDAAiD6D,mBAG9D3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQ1B,2BACnBsD,SAAU,gBAAGE,EAAQmD,EAARnD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAA1B,2BAA4BwD,EAAOoB,UAAU,IAEjG3D,EAAE,iCAAiC6D,WAAY,KAChD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,sGAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQzB,8BACnBqD,SAAU,gBAAGE,EAAQoD,EAARpD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAzB,8BAA+BuD,EAAOoB,UAAU,IAEpG3D,EAAE,qCAAqC6D,WAAY,KACpD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,uGAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQxB,oBACnBoD,SAAU,gBAAGE,EAAQqD,EAARrD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAxB,oBAAqBsD,EAAOoB,UAAU,KAE3FzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,yBAAyB6D,aAAqB,KACzD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,yGAKVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQvB,eACnBmD,SAAU,gBAAGE,EAAQsD,EAARtD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAvB,eAAgBqD,EAAOoB,UAAU,KAEtFzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,mBAAmB6D,aAAqB,KACnD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,gCAAgC6D,mBAG7C3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQtB,cACnBkD,SAAU,gBAAGE,EAAQuD,EAARvD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAAtB,cAAeoD,EAAOoB,UAAU,KAErFzC,EAAAA,EAAAA,KAAClD,EAAM,CAAAiD,SAAEjB,EAAE,mBAAmB6D,aAAqB,KACnD3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAEjB,EAAE,mCAAmC6D,mBAGhD3C,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQrB,oBACnBiD,SAAU,gBAAGE,EAAQwD,EAARxD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAArB,oBAAqBmD,EAAOoB,UAAU,IAE1F3D,EAAE,4CAA4C6D,WAAY,KAC3D3C,EAAAA,EAAAA,KAACpD,EAAI,CAAAmD,SAAC,yDAGVC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAD,UACEF,EAAAA,EAAAA,MAAAA,OAAAA,CAAAE,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,QAAAA,CACEb,KAAK,WACLsD,UAAWlD,EAAQpB,gBACnBgD,SAAU,gBAAGE,EAAQyD,EAARzD,OAAQ,OAAK7B,GAAW,UAAKD,EAAS,CAAApB,gBAAiBkD,EAAOoB,UAAU,IAEtF3D,EAAE,qBAAqB6D,WAAW,KAAC,SAAC/F,EAAI,CAAAmD,SAAC,oEAOrDN,IAASO,EAAAA,EAAAA,KAAC+E,EAAAA,GAAW,CAAAhF,SAAEN,MAG9B,C","sources":["../../packages/html-formatter/src/sample.ts","../../packages/html-formatter/src/index.tsx"],"sourcesContent":["export const html = `<!DOCTYPE html> <html> <head> <title>Page Title</title> <style> body { margin: 0; } </style></head> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html>`;\nexport const val = `<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n    <style>\n      body {\n        margin: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>My First Heading</h1>\n    <p>My first paragraph.</p>\n  </body>\n  <script>\n    function formatter(name) {\n      return 'Hi!' + name\n    }\n  </script>\n</html>\n`;\n","import { Fragment, useRef, useState } from 'react';\nimport {\n  StyledLayout,\n  CopyButton,\n  CodeEditor,\n  Button,\n  Wrapper,\n  ErrorLayout,\n  ResultCode,\n  Spacing,\n} from '@wcj/tools-react-components';\nimport { html } from '@codemirror/lang-html';\nimport { minify, Options } from 'html-minifier';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport prettier from 'prettier';\nimport parserHTML from 'prettier/parser-html';\nimport * as sample from './sample';\n\ntype Type = 'formatter' | 'minify';\n\nconst Info = styled.span`\n  color: var(--color-fg-subtle);\n`;\n\nconst Danger = styled.span`\n  color: red;\n`;\n\nconst defaultOptions: Options = {\n  collapseBooleanAttributes: true,\n  collapseWhitespace: true,\n  decodeEntities: true,\n  html5: true,\n  minifyCSS: true,\n  processConditionalComments: true,\n  minifyJS: true,\n  processScripts: ['text/html'],\n  removeAttributeQuotes: true,\n  removeComments: true,\n  removeEmptyAttributes: true,\n  removeOptionalTags: true,\n  removeRedundantAttributes: true,\n  removeScriptTypeAttributes: true,\n  removeStyleLinkTypeAttributes: true,\n  removeTagWhitespace: true,\n  sortAttributes: true,\n  sortClassName: true,\n  trimCustomFragments: true,\n  useShortDoctype: true,\n};\n\nconst allOptions: Options = {\n  ...defaultOptions,\n  caseSensitive: true,\n  collapseInlineTagWhitespace: true,\n  conservativeCollapse: true,\n  includeAutoGeneratedTags: true,\n  keepClosingSlash: true,\n  preserveLineBreaks: true,\n  preventAttributesEscaping: true,\n  removeEmptyElements: true,\n};\n\nexport default function HTMLFormatter() {\n  const { t } = useTranslation('html-formatter');\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [type, setType] = useState<Type>('minify');\n  const [value, setValue] = useState('');\n  const [options, setOptions] = useState<Options>(defaultOptions);\n  const [error, setError] = useState('');\n  const [tabWidth, setTabWidth] = useState(2);\n  const handleFormat = () => {\n    try {\n      setError('');\n      setValue(prettier.format(value, { parser: 'html', tabWidth: tabWidth, printWidth: 120, plugins: [parserHTML] }));\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  const handleMinify = () => {\n    try {\n      setError('');\n      const val = minify(value, { ...options });\n      setValue(val || '');\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('error', error);\n        setError(error.message);\n      }\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"HTML Formatter/Minify\"\n        extra={\n          <Fragment>\n            {value && (\n              <Fragment>\n                {type === 'formatter' && <Button onClick={() => handleFormat()}>Formatter</Button>}\n                {type === 'minify' && <Button onClick={() => handleMinify()}>Minify</Button>}\n              </Fragment>\n            )}\n            {value && (\n              <select value={type} onChange={(evn) => setType(evn.target.value as Type)}>\n                <option value=\"formatter\">Formatter</option>\n                <option value=\"minify\">Minify</option>\n              </select>\n            )}\n            {value && type === 'formatter' && (\n              <select onChange={(evn) => setTabWidth(Number(evn.target.value))}>\n                <option value={2}>2 Tab Space</option>\n                <option value={3}>3 Tab Space</option>\n                <option value={4}>4 Tab Space</option>\n                <option value={5}>5 Tab Space</option>\n              </select>\n            )}\n            {value && <CopyButton value={value} />}\n            <Button\n              onClick={() => {\n                editor.current?.view?.focus();\n                if (type === 'formatter') {\n                  setValue(sample.html);\n                }\n                if (type === 'minify') {\n                  setValue(sample.val);\n                }\n              }}\n            >\n              Sample\n            </Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={value}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[html()]}\n          onChange={(value) => {\n            setValue(value);\n          }}\n        />\n      </StyledLayout>\n      {type === 'minify' && (\n        <StyledLayout\n          title={t('Options')}\n          style={{ maxWidth: 420 }}\n          extra={\n            <Fragment>\n              <Button onClick={() => setOptions(defaultOptions)}>Reset</Button>\n              <Button onClick={() => setOptions(allOptions)}>All</Button>\n              <Button onClick={() => setOptions({})}>None</Button>\n            </Fragment>\n          }\n        >\n          <ResultCode codeProps={{ style: { height: 'calc(100vh - 87px)', overflow: 'auto', margin: 0 } }}>\n            <Spacing>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.caseSensitive}\n                    onChange={({ target }) => setOptions({ ...options, caseSensitive: target.checked })}\n                  />\n                  {t('Case-sensitive').toString()}{' '}\n                  <Info>{t('Treat attributes in case sensitive manner (useful for custom HTML tags)').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseBooleanAttributes}\n                    onChange={({ target }) => setOptions({ ...options, collapseBooleanAttributes: target.checked })}\n                  />\n                  {t('Collapse boolean attributes').toString()}{' '}\n                  <Info>{t('Omit attribute values from boolean attributes').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseInlineTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseInlineTagWhitespace: target.checked })}\n                  />\n                  <Danger>{t('Collapse inline tag whitespace').toString()}</Danger>{' '}\n                  <Info>\n                    {t(\n                      `Don't leave any spaces between display:inline; elements when collapsing. Must be used in conjunction with collapseWhitespace=true`,\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.collapseWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, collapseWhitespace: target.checked })}\n                  />\n                  {t('Collapse whitespace').toString()}{' '}\n                  <Info>{t(`Collapse white space that contributes to text nodes in a document tree`).toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.conservativeCollapse}\n                    onChange={({ target }) => setOptions({ ...options, conservativeCollapse: target.checked })}\n                  />\n                  {t('Conservative collapse').toString()}{' '}\n                  <Info>\n                    {t(\n                      `Always collapse to 1 space (never remove it entirely). Must be used in conjunction with collapseWhitespace=true`,\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.decodeEntities}\n                    onChange={({ target }) => setOptions({ ...options, decodeEntities: target.checked })}\n                  />\n                  {t('Decode Entity Characters').toString()}{' '}\n                  <Info>{t('Use direct Unicode characters whenever possible').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.html5}\n                    onChange={({ target }) => setOptions({ ...options, html5: target.checked })}\n                  />\n                  HTML5 <Info>{t('Parse input according to HTML5 specifications').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.includeAutoGeneratedTags}\n                    onChange={({ target }) => setOptions({ ...options, includeAutoGeneratedTags: target.checked })}\n                  />\n                  {t('Include auto-generated tags').toString()}{' '}\n                  <Info>{t('Insert tags generated by HTML parser').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.keepClosingSlash}\n                    onChange={({ target }) => setOptions({ ...options, keepClosingSlash: target.checked })}\n                  />\n                  {t('Keep closing slash').toString()}{' '}\n                  <Info>{t('Keep the trailing slash on singleton elements').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  Max.line length\n                  <input\n                    type=\"number\"\n                    value={options.maxLineLength}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { maxLineLength: Number(target.value) } : {}) })\n                    }\n                  />\n                  <Info>\n                    {t(\n                      'Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points',\n                    ).toString()}\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyCSS}\n                    onChange={({ target }) => setOptions({ ...options, minifyCSS: target.checked })}\n                  />\n                  {t('Minify CSS').toString()}{' '}\n                  <Info>\n                    {t('Minify CSS in style elements and style attributes (uses').toString()}{' '}\n                    <a href=\"https://github.com/jakubpawlowicz/clean-css\" target=\"_blank\">\n                      clean-css\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.minifyJS}\n                    onChange={({ target }) => setOptions({ ...options, minifyJS: target.checked })}\n                  />\n                  {t('Minify JavaScript').toString()}{' '}\n                  <Info>\n                    {t('Minify JavaScript in script elements and event attributes (uses').toString()}{' '}\n                    <a href=\"https://github.com/jaywcjlove/uglify-js-export\" target=\"_blank\">\n                      UglifyJS\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Minify URLs').toString()}{' '}\n                  <input\n                    type=\"number\"\n                    value={options.minifyURLs as string}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? ({ minifyURLs: target.value } as any) : {}) })\n                    }\n                  />\n                  <Info>\n                    Minify URLs in various attributes (uses{' '}\n                    <a href=\"https://github.com/stevenvachon/relateurl\" target=\"_blank\">\n                      relateurl\n                    </a>\n                    )\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preserveLineBreaks}\n                    onChange={({ target }) => setOptions({ ...options, preserveLineBreaks: target.checked })}\n                  />\n                  {t('Preserve line-breaks').toString()}\n                  <Info>\n                    Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a\n                    line break. Must be used in conjunction with collapseWhitespace=true\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.preventAttributesEscaping}\n                    onChange={({ target }) => setOptions({ ...options, preventAttributesEscaping: target.checked })}\n                  />\n                  <Danger>{t('Prevent attributes escaping').toString()}</Danger>{' '}\n                  <Info>Prevents the escaping of the values of attributes</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.processConditionalComments}\n                    onChange={({ target }) => setOptions({ ...options, processConditionalComments: target.checked })}\n                  />\n                  {t('Process conditional comments').toString()}{' '}\n                  <Info>Process contents of conditional comments through minifier</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Process scripts').toString()}{' '}\n                  <input\n                    type=\"text\"\n                    value={options.processScripts || ''}\n                    onChange={({ target }) =>\n                      setOptions({ ...options, ...(target.value ? { processScripts: target.value.split(',') } : {}) })\n                    }\n                  />\n                  <Info>\n                    Comma-delimited string corresponding to types of script elements to process through minifier (e.g.\n                    text/ng-template, text/x-handlebars-template)\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  {t('Quote character').toString()}\n                  <input\n                    type=\"text\"\n                    value={options.quoteCharacter || ''}\n                    onChange={({ target }) => setOptions({ ...options, quoteCharacter: target.value })}\n                  />\n                  <Info>Type of quote to use for attribute values (' or \")</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeAttributeQuotes}\n                    onChange={({ target }) => setOptions({ ...options, removeAttributeQuotes: target.checked })}\n                  />\n                  {t('Remove attribute quotes').toString()} <Info>Remove quotes around attributes when possible</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeComments}\n                    onChange={({ target }) => setOptions({ ...options, removeComments: target.checked })}\n                  />\n                  {t('Remove comments').toString()} <Info>Strip HTML comments</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyAttributes: target.checked })}\n                  />\n                  {t('Remove empty attributes').toString()}{' '}\n                  <Info>Remove all attributes with whitespace-only values</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeEmptyElements}\n                    onChange={({ target }) => setOptions({ ...options, removeEmptyElements: target.checked })}\n                  />\n                  <Danger>{t('Remove empty elements').toString()}</Danger>{' '}\n                  <Info>Remove all elements with empty contents</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeOptionalTags}\n                    onChange={({ target }) => setOptions({ ...options, removeOptionalTags: target.checked })}\n                  />\n                  {t('Remove optional tags').toString()}\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeRedundantAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeRedundantAttributes: target.checked })}\n                  />\n                  {t('Remove redundant attributes').toString()}{' '}\n                  <Info>{t('Remove attributes when value matches default.').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeScriptTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeScriptTypeAttributes: target.checked })}\n                  />\n                  {t('Remove script type attributes').toString()}{' '}\n                  <Info>\n                    Remove type=\"text/javascript\" from script tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeStyleLinkTypeAttributes}\n                    onChange={({ target }) => setOptions({ ...options, removeStyleLinkTypeAttributes: target.checked })}\n                  />\n                  {t('Remove style link type attributes').toString()}{' '}\n                  <Info>\n                    Remove type=\"text/css\" from style and link tags. Other type attribute values are left intact\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.removeTagWhitespace}\n                    onChange={({ target }) => setOptions({ ...options, removeTagWhitespace: target.checked })}\n                  />\n                  <Danger>{t('Remove tag whitespace').toString()}</Danger>{' '}\n                  <Info>\n                    Remove space between attributes whenever possible. Note that this will result in invalid HTML!\n                  </Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortAttributes}\n                    onChange={({ target }) => setOptions({ ...options, sortAttributes: target.checked })}\n                  />\n                  <Danger>{t('Sort attributes').toString()}</Danger>{' '}\n                  <Info>{t('Sort attributes by frequency').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.sortClassName}\n                    onChange={({ target }) => setOptions({ ...options, sortClassName: target.checked })}\n                  />\n                  <Danger>{t('Sort class name').toString()}</Danger>{' '}\n                  <Info>{t('Sort style classes by frequency').toString()}</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.trimCustomFragments}\n                    onChange={({ target }) => setOptions({ ...options, trimCustomFragments: target.checked })}\n                  />\n                  {t('Trim white space around custom fragments').toString()}{' '}\n                  <Info>Trim white space around ignoreCustomFragments.</Info>\n                </span>\n              </label>\n              <label>\n                <span>\n                  <input\n                    type=\"checkbox\"\n                    checked={!!options.useShortDoctype}\n                    onChange={({ target }) => setOptions({ ...options, useShortDoctype: target.checked })}\n                  />\n                  {t('Use short doctype').toString()} <Info>Replaces the doctype with the short (HTML5) doctype</Info>\n                </span>\n              </label>\n            </Spacing>\n          </ResultCode>\n        </StyledLayout>\n      )}\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n"],"names":["html","val","Info","styled","Danger","defaultOptions","collapseBooleanAttributes","collapseWhitespace","decodeEntities","html5","minifyCSS","processConditionalComments","minifyJS","processScripts","removeAttributeQuotes","removeComments","removeEmptyAttributes","removeOptionalTags","removeRedundantAttributes","removeScriptTypeAttributes","removeStyleLinkTypeAttributes","removeTagWhitespace","sortAttributes","sortClassName","trimCustomFragments","useShortDoctype","allOptions","caseSensitive","collapseInlineTagWhitespace","conservativeCollapse","includeAutoGeneratedTags","keepClosingSlash","preserveLineBreaks","preventAttributesEscaping","removeEmptyElements","HTMLFormatter","t","useTranslation","editor","useRef","useState","type","setType","value","setValue","options","setOptions","error","setError","tabWidth","setTabWidth","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","prettier","parser","printWidth","plugins","parserHTML","Error","message","handleFormat","minify","console","log","handleMinify","onChange","evn","target","Number","CopyButton","current","_editor$current","view","_editor$current$view","focus","sample","CodeEditor","ref","height","extensions","style","maxWidth","ResultCode","codeProps","overflow","margin","Spacing","checked","_ref","toString","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","maxLineLength","_ref10","_ref11","href","_ref12","minifyURLs","_ref13","_ref14","_ref15","_ref16","_ref17","split","quoteCharacter","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","ErrorLayout"],"sourceRoot":""}