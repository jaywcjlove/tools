{"version":3,"file":"static/js/419.383e1b6f.chunk.js","mappings":"kUAIe,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,YAAhC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAc,SAACC,QAAuB,IAAvBA,IAAAA,EAAgB,IACnCJ,EAAQI,GACRF,ECMG,SAAwBG,EAAsBC,QAAuB,IAA7CD,IAAAA,EAAkB,SAA2B,IAAvBC,IAAAA,EAAmB,IACtE,MAAWA,GAAX,UACA,IAAMC,GAAOC,EAAAA,EAAAA,KACVC,IAAIC,EAAAA,EAAa,CAAEC,UAAU,IAC7BF,IAAIG,EAAAA,GACJH,IAAII,EAAAA,GACJJ,IAAIK,EAAAA,GACJL,IAAIM,EAAAA,GACJN,IAAIO,EAAAA,GACJP,IAAIQ,EAAAA,GACJR,IAAIS,EAAAA,IACJT,IAAIU,EAAAA,GACJV,IAAIW,EAAAA,GAGJX,IAAIY,EAAAA,GACJC,YAAYjB,GACf,OAAOkB,OAAOhB,GDvBAiB,CAAepB,KAE7B,OACEqB,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAcC,MAAM,aAAaC,MAAOhC,IAAQ6B,EAAAA,EAAAA,KAACI,EAAAA,GAAD,CAAY5B,MAAOL,IAAnE4B,UACEC,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CACEC,YAAY,EACZ9B,MAAOL,EACPoC,QAAUC,SAAAA,GAAD,OAASjC,EAAaiC,EAAIC,OAA+BjC,aAGtEwB,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CAAcC,MAAM,kBAAkBC,MAAO9B,IAAY2B,EAAAA,EAAAA,KAACI,EAAAA,GAAD,CAAY5B,MAAOH,IAA5E0B,UACEC,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAUC,YAAY,EAAO9B,MAAOH,EAAUqC,UAAQ","sources":["../../packages/html-to-markdown/src/index.tsx","../../packages/html-to-markdown/src/utils.ts"],"sourcesContent":["import { useState } from 'react';\nimport { Wrapper, Textarea, StyledLayout, CopyButton } from '@wcj/tools-react-components';\nimport { htmlToMarkdown } from './utils';\n\nexport default function Html2Markdown() {\n  const [html, setHtml] = useState<string>();\n  const [markdown, setMarkdown] = useState<string>();\n  const handleInput = (value: string = '') => {\n    setHtml(value);\n    setMarkdown(htmlToMarkdown(value));\n  };\n  return (\n    <Wrapper>\n      <StyledLayout title=\"Input HTML\" extra={html && <CopyButton value={html} />}>\n        <Textarea\n          spellCheck={false}\n          value={html}\n          onInput={(evn) => handleInput((evn.target as HTMLTextAreaElement).value)}\n        />\n      </StyledLayout>\n      <StyledLayout title=\"Result Markdown\" extra={markdown && <CopyButton value={markdown} />}>\n        <Textarea spellCheck={false} value={markdown} readOnly />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n","import { unified } from 'unified';\nimport rehypeParse from 'rehype-parse';\nimport rehypeRemark from 'rehype-remark';\nimport remarkStringify from 'remark-stringify';\nimport remarkGfm from 'remark-gfm';\nimport slug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeIgnore from 'rehype-ignore';\nimport rehypeRaw from 'rehype-raw';\nimport rehypeFormat from 'rehype-format';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeVideo from 'rehype-video';\n\ntype Options = {};\n\nexport function htmlToMarkdown(htmlStr: string = '', options: Options = {}) {\n  const {} = options;\n  const file = unified()\n    .use(rehypeParse, { fragment: true })\n    .use(slug)\n    .use(rehypeAutolinkHeadings)\n    .use(rehypeIgnore)\n    .use(rehypeVideo)\n    .use(rehypeFormat)\n    .use(rehypeRaw)\n    .use(rehypePrism)\n    .use(rehypeRemark)\n    .use(remarkGfm)\n    // .use(remarkPlugins || [])\n    // .use(rehypePlugins || [])\n    .use(remarkStringify)\n    .processSync(htmlStr);\n  return String(file);\n}\n"],"names":["Html2Markdown","useState","html","setHtml","markdown","setMarkdown","handleInput","value","htmlStr","options","file","unified","use","rehypeParse","fragment","slug","rehypeAutolinkHeadings","rehypeIgnore","rehypeVideo","rehypeFormat","rehypeRaw","rehypePrism","rehypeRemark","remarkGfm","remarkStringify","processSync","String","htmlToMarkdown","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","CopyButton","Textarea","spellCheck","onInput","evn","target","readOnly"],"sourceRoot":""}