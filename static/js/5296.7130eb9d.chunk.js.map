{"version":3,"file":"static/js/5296.7130eb9d.chunk.js","mappings":"gNAIMA,EAAS,0BACTC,EAAe,wCAErB,SAASC,EAAeC,GACtB,YADwC,IAAlBA,IAAAA,EAAc,IAC7BA,EACJC,QAAQ,SAAU,KAClBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,UAAW,KACnBA,QAAQ,MAAO,SACnB,CAED,SAASC,EAAaF,GACpB,YADsC,IAAlBA,IAAAA,EAAc,IAC3BA,EACJC,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,UACdA,QAAQ,MAAO,SACnB,CAEc,SAASE,IACtB,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,YAA5B,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwBJ,EAAAA,EAAAA,UAA2B,OAAnD,eAAOK,EAAP,KAAaC,EAAb,KACMC,EAAc,SAACN,QAAuB,IAAvBA,IAAAA,EAAgB,IACtB,QAATI,GACFH,EAASD,GACTG,EAAUN,EAAaG,KACL,WAATI,IACTH,EAASP,EAAeM,IACxBG,EAAUH,GANd,EASA,OACEO,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAM,gBACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,CACGT,IAASU,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAYf,MAAOA,KAC7BU,EAAAA,EAAAA,KAACM,EAAAA,GAAD,CACEC,QAAS,WACPhB,EAAST,GACTW,EAAUN,EAAaL,GAH3B,EAAAiB,SAAAA,cALNA,UAgBEC,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CACEC,YAAY,EACZnB,MAAOA,EACPoB,OAAO,qBACPC,YAAY,mBACZC,QAAS,kBAAMjB,EAAQ,MAAd,EACTkB,WAAY,EAACC,EAAAA,EAAAA,OACbC,SAAWC,SAAAA,GACI,QAATtB,GACFE,EAAYoB,EAEf,OAGLhB,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAM,cACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,EACEC,EAAAA,EAAAA,KAACM,EAAAA,GAAD,CACEC,QAAS,WACPhB,EAASP,EAAeD,IACxBU,EAAUV,EAHd,EAAAgB,SAAAA,WAQCP,IAAUQ,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAYf,MAAOE,OAZpCO,UAgBEC,EAAAA,EAAAA,KAACQ,EAAAA,GAAD,CACEC,YAAY,EACZnB,MAAOE,EACPkB,OAAO,qBACPC,YAAY,wBACZC,QAAS,kBAAMjB,EAAQ,SAAd,EACTkB,WAAY,EAACC,EAAAA,EAAAA,OACbC,SAAWC,SAAAA,GACI,WAATtB,GACFE,EAAYoB,EAEf,QAKV,C","sources":["../../packages/html-escape/src/index.tsx"],"sourcesContent":["import { Fragment, useState } from 'react';\nimport { Wrapper, StyledLayout, CopyButton, Button, CodeEditor } from '@wcj/tools-react-components';\nimport { html } from '@codemirror/lang-html';\n\nconst sample = `<div>Hello World!</div>`;\nconst sampleEscape = `&lt;div&gt;Goodbye World!&lt;/div&gt;`;\n\nfunction unescapeHandle(str: string = '') {\n  return str\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#x27;/g, \"'\")\n    .replace(/&#x60;/g, '`')\n    .replace(/\\`/g, '&#x60;');\n}\n\nfunction escapeHandle(str: string = '') {\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\`/g, '&#x60;');\n}\n\nexport default function HTMLEscape() {\n  const [value, setValue] = useState<string>();\n  const [escape, setEscape] = useState<string>();\n  const [type, setType] = useState<'raw' | 'escape'>('raw');\n  const handleInput = (value: string = '') => {\n    if (type === 'raw') {\n      setValue(value);\n      setEscape(escapeHandle(value));\n    } else if (type === 'escape') {\n      setValue(unescapeHandle(value));\n      setEscape(value);\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"HTML Unescape\"\n        extra={\n          <Fragment>\n            {value && <CopyButton value={value} />}\n            <Button\n              onClick={() => {\n                setValue(sample);\n                setEscape(escapeHandle(sample));\n              }}\n            >\n              Sample\n            </Button>\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          spellCheck={false}\n          value={value}\n          height=\"calc(100vh - 87px)\"\n          placeholder=\"Example: `<div>`\"\n          onFocus={() => setType('raw')}\n          extensions={[html()]}\n          onChange={(val) => {\n            if (type === 'raw') {\n              handleInput(val);\n            }\n          }}\n        />\n      </StyledLayout>\n      <StyledLayout\n        title=\"HTML Escape\"\n        extra={\n          <Fragment>\n            <Button\n              onClick={() => {\n                setValue(unescapeHandle(sampleEscape));\n                setEscape(sampleEscape);\n              }}\n            >\n              Sample\n            </Button>\n            {escape && <CopyButton value={escape} />}\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          spellCheck={false}\n          value={escape}\n          height=\"calc(100vh - 87px)\"\n          placeholder=\"Output: `&lt&#59;div&gt&#59;`\"\n          onFocus={() => setType('escape')}\n          extensions={[html()]}\n          onChange={(val) => {\n            if (type === 'escape') {\n              handleInput(val);\n            }\n          }}\n        />\n      </StyledLayout>\n    </Wrapper>\n  );\n}\n"],"names":["sample","sampleEscape","unescapeHandle","str","replace","escapeHandle","HTMLEscape","useState","value","setValue","escape","setEscape","type","setType","handleInput","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","CopyButton","Button","onClick","CodeEditor","spellCheck","height","placeholder","onFocus","extensions","html","onChange","val"],"sourceRoot":""}