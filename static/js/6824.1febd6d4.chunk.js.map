{"version":3,"file":"static/js/6824.1febd6d4.chunk.js","mappings":"6OAAaA,EAAO,kE,UCSL,SAASC,IACtB,IAAMC,GAASC,EAAAA,EAAAA,QAA2B,MAC1C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KA2BA,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAD,CAAAC,SAAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAD,CACEC,MAAM,uBACNC,OACEN,EAAAA,EAAAA,MAACO,EAAAA,SAAD,CAAAL,SAAAA,CACGR,IAASS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAQC,QAAS,kBAhChB,WACnB,IACEZ,EAAS,IACTF,EACEe,IAAAA,OAAgBhB,EAAO,CAAEiB,OAAQ,WAAYb,SAAUA,EAAUc,WAAY,IAAKC,QAAS,CAACC,QAE9F,MAAOlB,GACHA,aAAiBmB,OACnBlB,EAASD,EAAMoB,UAwBsBC,IAAvBf,SAAAA,WACTR,IAASS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CAAQC,QAAS,kBArBhB,WACnB,IACEZ,EAAS,IACT,IAAMqB,GAAOC,EAAAA,EAAAA,QAAOzB,GACpB,GAAIwB,EAAKtB,MACP,MAAM,IAAImB,MAAMG,EAAKtB,MAAMoB,SAE7BrB,EAASuB,EAAKE,MACd,MAAOxB,GACHA,aAAiBmB,OACnBlB,EAASD,EAAMoB,UAWsBK,IAAvBnB,SAAAA,WACTR,IACCM,EAAAA,EAAAA,MAAAA,SAAAA,CAAQsB,SAAWC,SAAAA,GAAD,OAASxB,EAAYyB,OAAOD,EAAIE,OAAO/B,SAAzDQ,SAAAA,EACEC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,iBACAC,EAAAA,EAAAA,KAAAA,SAAAA,CAAQT,MAAO,EAAfQ,SAAAA,mBAGHR,IAASS,EAAAA,EAAAA,KAACuB,EAAAA,GAAD,CAAYhC,MAAOA,KAE3BS,EAAAA,EAAAA,KAACK,EAAAA,GAAD,CACEC,QAAS,WAAM,QACb,SAAAlB,EAAOoC,UAAP,WAAgBC,OAAhB,EAAsBC,QACtBlC,EAASmC,IAHb5B,SAAAA,cAhBRA,UA4BEC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAD,CACErC,MAAOA,EACPsC,IAAKzC,EACL0C,OAAO,qBACPC,WAAY,EAACC,EAAAA,EAAAA,OACbb,SAAW5B,SAAAA,GACTC,EAASD,QAIdE,IAASO,EAAAA,EAAAA,KAACiC,EAAAA,GAAD,CAAAlC,SAAcN","sources":["../../packages/js-beautifier/src/sample.ts","../../packages/js-beautifier/src/index.tsx"],"sourcesContent":["export const json = `function hello(who = \"world\") { console.log(\\`Hello, \\${who}!\\`) }`;\nexport const val = ``;\n","import { Fragment, useRef, useState } from 'react';\nimport { StyledLayout, CopyButton, CodeEditor, Button, Wrapper, ErrorLayout } from '@wcj/tools-react-components';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport { minify } from 'uglify-js-export';\nimport prettier from 'prettier';\nimport parserBabel from 'prettier/parser-babel';\nimport * as sample from './sample';\n\nexport default function JSONFormat() {\n  const editor = useRef<ReactCodeMirrorRef>(null);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState('');\n  const [tabWidth, setTabWidth] = useState(2);\n  const handleFormat = () => {\n    try {\n      setError('');\n      setValue(\n        prettier.format(value, { parser: 'babel-ts', tabWidth: tabWidth, printWidth: 120, plugins: [parserBabel] }),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  const handleMinify = () => {\n    try {\n      setError('');\n      const data = minify(value);\n      if (data.error) {\n        throw new Error(data.error.message);\n      }\n      setValue(data.code);\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      }\n    }\n  };\n  return (\n    <Wrapper>\n      <StyledLayout\n        title=\"JS Beautifier/Minify\"\n        extra={\n          <Fragment>\n            {value && <Button onClick={() => handleFormat()}>Format</Button>}\n            {value && <Button onClick={() => handleMinify()}>Minify</Button>}\n            {value && (\n              <select onChange={(evn) => setTabWidth(Number(evn.target.value))}>\n                <option value={2}>2 Tab Space</option>\n                <option value={3}>3 Tab Space</option>\n                <option value={4}>4 Tab Space</option>\n                <option value={5}>5 Tab Space</option>\n              </select>\n            )}\n            {value && <CopyButton value={value} />}\n            {sample.json && (\n              <Button\n                onClick={() => {\n                  editor.current?.view?.focus();\n                  setValue(sample.json);\n                }}\n              >\n                Sample\n              </Button>\n            )}\n          </Fragment>\n        }\n      >\n        <CodeEditor\n          value={value}\n          ref={editor}\n          height=\"calc(100vh - 87px)\"\n          extensions={[javascript()]}\n          onChange={(value) => {\n            setValue(value);\n          }}\n        />\n      </StyledLayout>\n      {error && <ErrorLayout>{error}</ErrorLayout>}\n    </Wrapper>\n  );\n}\n"],"names":["json","JSONFormat","editor","useRef","useState","value","setValue","error","setError","tabWidth","setTabWidth","_jsxs","Wrapper","children","_jsx","StyledLayout","title","extra","Fragment","Button","onClick","prettier","parser","printWidth","plugins","parserBabel","Error","message","handleFormat","data","minify","code","handleMinify","onChange","evn","Number","target","CopyButton","current","view","focus","sample","CodeEditor","ref","height","extensions","javascript","ErrorLayout"],"sourceRoot":""}