{
  "Pass `false` to skip mangling names": "传递 `false` 以跳过修改名称",
  "Pass `true` to discard calls to console.* functions.": "传递 `true` 以放弃对 console.* 函数的调用。",
  "Remove `debugger;` statements": "删除 `debugger;` 语句",
  "Remove unreachable code": "删除无法访问的代码",
  "Enable substitutions of variables with `RegExp` values the same way as if they are constants": "允许用 `RegExp` 值替换变量，就像它们是常量一样",
  "substitute void 0 if there is a variable named undefined in scope": "如果范围内有一个名为 undefined 的变量，则替换 void 0",
  "drop unreferenced functions and variables": "删除未引用的函数和变量",
  "convert block-scoped declaractions into `var` whenever safe to do so": "在安全的情况下将块范围的声明转换为 `var`",
  "Support non-standard Safari/Webkit.": "支持非标准的 Safari/Webkit。",
  "Optimize expressions like `Array.prototype.slice.call(a)` into `[].slice.call(a)`": "优化像 `Array.prototype.slice.call(a)` 这样的表达式到 `[].slice.call(a)`",
  "Optimize numerical expressions like `2 * x * 3` into `6 * x`, which may give imprecise floating point results.": "将 2 * x * 3 等数值表达式优化为 6 * x ，这可能会产生不精确的浮点结果。",
  "Compress and mangle `Function(args, code)` when both args and code are string literals.": "当 args 和 code 都是字符串文字时，压缩和破坏 `Function(args, code)`。",
  "Compress expressions like a `<= b` assuming none of the operands can be (coerced to) `NaN`.": "假设没有任何操作数可以（强制）为 `NaN`，则压缩表达式，如 `<= b`。",
  "Transforms typeof foo == \"undefined\" into foo === void 0.": "将 typeof foo == \"undefined\" 转换为 foo === void 0。",
  "Prevent specific toplevel functions and variables from unused removal (can be array, comma-separated, RegExp or function. Implies toplevel)": "防止未使用的特定顶层函数和变量被删除（可以是数组、逗号分隔、RegExp 或函数。暗示顶层）",
  "Drop unreferenced functions (\"funcs\") and/or variables (\"vars\") in the top level scope (false by default, true to drop both unreferenced functions and variables)": "在顶级范围内删除未引用的函数（“funcs”）和/或变量（“vars”）（默认为 false，true 删除未引用的函数和变量）",
  "apply \"unsafe\" transformations": "应用“不安全”的转换",
  "Compact template literals by embedding expressions and/or converting to string literals, e.g. `foo ${42}` → \"foo 42\"": "通过嵌入表达式和/或转换为字符串文字来压缩模板文字，例如 `foo ${42}` → \"foo 42\"",
  "De-duplicate and remove unreachable `switch` branches.": "重复并删除无法访问的“switch”分支。",
  "compact string concatenations": "紧凑的字符串连接",
  "Pass false to disable potentially dropping functions marked as \"pure\".": "传递 false 以禁用可能删除标记为“pure”的功能。",
  "combine and reuse variables.": "组合和重用变量。",
  "join consecutive simple statements using the comma operator.": "使用逗号运算符连接连续的简单语句。",
  "Improve optimization on variables assigned with and used as constant values.": "改进分配和用作常量值的变量的优化。",
  "Allows single-use functions to be inlined as function expressions when permissible allowing further optimization.": "在允许进一步优化的情况下，允许将一次性函数内联为函数表达式。",
  "Rewrite property access using the dot notation, for example `foo[\"bar\"]` to `foo.bar`": "使用点符号重写属性访问，例如 `foo[\"bar\"]` 到 `foo.bar`",
  "The maximum number of times to run compress.": "运行压缩的最大次数。",
  "compact duplicate keys in object literals": "对象文字中的紧凑重复键",
  "negate `Immediately-Called Function Expressions` where the return value is discarded, to avoid the parens that the code generator would insert.": "否定“立即调用函数表达式”，其中返回值被丢弃，以避免代码生成器插入的括号。",
  "Optimizations for `do`, `while` and `for` loops when we can statically determine the condition.": "当我们可以静态确定条件时，优化 `do`、`while` 和 `for` 循环。",
  "Pass true to prevent Infinity from being compressed into `1/0`, which may cause performance issues on `Chrome`": "传递 true 以防止 Infinity 被压缩为 `1/0`，这可能会导致 `Chrome` 上的性能问题",
  "join consecutive `var` statements": "加入连续的`var`语句",
  "Inline calls to function with simple/return statement": "使用简单/返回语句内联调用函数",
  "drop unreferenced import symbols when used with `unused`": "与“unused”一起使用时删除未引用的导入符号",
  "Optimizations for if/return and if/continue": "if/return 和 if/continue 的优化",
  "Hoist var declarations (this is `false` by default because it seems to increase the size of the output in general)": "Hoist var 声明（默认情况下这是 `false`，因为它似乎通常会增加输出的大小）",
  "Hoist properties from constant object and array literals into regular variables subject to a set of constraints.": "将常量对象和数组文字中的属性提升为受一组约束的常规变量。",
  "hoist `export` statements to facilitate various `compress` and `mangle` optimizations.": "提升 `export` 语句以促进各种 `compress` 和 `mangle` 优化。",
  "Pass `true` to preserve completion values from terminal statements without `return`, e.g. in bookmarklets.": "传递 `true` 以保留终端语句中的完成值而不使用 `return`，例如 在书签中。",
  "Attempt to evaluate constant expressions": "尝试计算常量表达式",
  "Set to true to support IE8": "设置为 true 以支持 IE8",
  "Apply certain optimizations to binary nodes, e.g. `!(a <= b) → a > b,` attempts to negate binary nodes, e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc": "对二进制节点应用某些优化，例如 `!(a <= b) → a > b,` 尝试否定二进制节点，例如 `a = !b && !c && !d && !e → a=!(b||c||d||e)` 等等",
  "Collapse single-use non-constant variables, side effects permitting.": "折叠一次性使用的非常量变量，副作用允许。",
  "Various optimizations for boolean context, for example `!!a ? b : c → a ? b : c`": "布尔上下文的各种优化，例如 `!!a ? b : c → a ? b:c`",
  "Apply optimizations to assignment expressions": "对赋值表达式应用优化",
  "Support `#!command` as the first line": "支持 `#!command` 作为第一行",
  "Support top level `return` statements": "支持顶级`return`语句",
  "Replace `arguments[index]` with function parameter name whenever possible.": "尽可能将 `arguments[index]` 替换为函数参数名称。",
  "Pass true to prevent discarding or mangling of function names. Useful for code relying on Function.prototype.name.": "传递 true 以防止丢弃或修改函数名称。 对于依赖 Function.prototype.name 的代码很有用。",
  "Set to `true` if you wish to enable top level variable and function name mangling and to drop unused variables and functions.": "如果您希望启用顶级变量和函数名称修改并删除未使用的变量和函数，请设置为 `true`。"
}
